var latexjs =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = {"amp":"&","apos":"'","gt":">","lt":"<","quot":"\""}

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = {"Aacute":"Á","aacute":"á","Abreve":"Ă","abreve":"ă","ac":"∾","acd":"∿","acE":"∾̳","Acirc":"Â","acirc":"â","acute":"´","Acy":"А","acy":"а","AElig":"Æ","aelig":"æ","af":"⁡","Afr":"𝔄","afr":"𝔞","Agrave":"À","agrave":"à","alefsym":"ℵ","aleph":"ℵ","Alpha":"Α","alpha":"α","Amacr":"Ā","amacr":"ā","amalg":"⨿","amp":"&","AMP":"&","andand":"⩕","And":"⩓","and":"∧","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angmsd":"∡","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","Aogon":"Ą","aogon":"ą","Aopf":"𝔸","aopf":"𝕒","apacir":"⩯","ap":"≈","apE":"⩰","ape":"≊","apid":"≋","apos":"'","ApplyFunction":"⁡","approx":"≈","approxeq":"≊","Aring":"Å","aring":"å","Ascr":"𝒜","ascr":"𝒶","Assign":"≔","ast":"*","asymp":"≈","asympeq":"≍","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","awconint":"∳","awint":"⨑","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","Backslash":"∖","Barv":"⫧","barvee":"⊽","barwed":"⌅","Barwed":"⌆","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","Bcy":"Б","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","Because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","Bernoullis":"ℬ","Beta":"Β","beta":"β","beth":"ℶ","between":"≬","Bfr":"𝔅","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bNot":"⫭","bnot":"⌐","Bopf":"𝔹","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxbox":"⧉","boxdl":"┐","boxdL":"╕","boxDl":"╖","boxDL":"╗","boxdr":"┌","boxdR":"╒","boxDr":"╓","boxDR":"╔","boxh":"─","boxH":"═","boxhd":"┬","boxHd":"╤","boxhD":"╥","boxHD":"╦","boxhu":"┴","boxHu":"╧","boxhU":"╨","boxHU":"╩","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxul":"┘","boxuL":"╛","boxUl":"╜","boxUL":"╝","boxur":"└","boxuR":"╘","boxUr":"╙","boxUR":"╚","boxv":"│","boxV":"║","boxvh":"┼","boxvH":"╪","boxVh":"╫","boxVH":"╬","boxvl":"┤","boxvL":"╡","boxVl":"╢","boxVL":"╣","boxvr":"├","boxvR":"╞","boxVr":"╟","boxVR":"╠","bprime":"‵","breve":"˘","Breve":"˘","brvbar":"¦","bscr":"𝒷","Bscr":"ℬ","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsolb":"⧅","bsol":"\\","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","Bumpeq":"≎","bumpeq":"≏","Cacute":"Ć","cacute":"ć","capand":"⩄","capbrcup":"⩉","capcap":"⩋","cap":"∩","Cap":"⋒","capcup":"⩇","capdot":"⩀","CapitalDifferentialD":"ⅅ","caps":"∩︀","caret":"⁁","caron":"ˇ","Cayleys":"ℭ","ccaps":"⩍","Ccaron":"Č","ccaron":"č","Ccedil":"Ç","ccedil":"ç","Ccirc":"Ĉ","ccirc":"ĉ","Cconint":"∰","ccups":"⩌","ccupssm":"⩐","Cdot":"Ċ","cdot":"ċ","cedil":"¸","Cedilla":"¸","cemptyv":"⦲","cent":"¢","centerdot":"·","CenterDot":"·","cfr":"𝔠","Cfr":"ℭ","CHcy":"Ч","chcy":"ч","check":"✓","checkmark":"✓","Chi":"Χ","chi":"χ","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","CircleDot":"⊙","circledR":"®","circledS":"Ⓢ","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","cir":"○","cirE":"⧃","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","clubs":"♣","clubsuit":"♣","colon":":","Colon":"∷","Colone":"⩴","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","Congruent":"≡","conint":"∮","Conint":"∯","ContourIntegral":"∮","copf":"𝕔","Copf":"ℂ","coprod":"∐","Coproduct":"∐","copy":"©","COPY":"©","copysr":"℗","CounterClockwiseContourIntegral":"∳","crarr":"↵","cross":"✗","Cross":"⨯","Cscr":"𝒞","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cupbrcap":"⩈","cupcap":"⩆","CupCap":"≍","cup":"∪","Cup":"⋓","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dagger":"†","Dagger":"‡","daleth":"ℸ","darr":"↓","Darr":"↡","dArr":"⇓","dash":"‐","Dashv":"⫤","dashv":"⊣","dbkarow":"⤏","dblac":"˝","Dcaron":"Ď","dcaron":"ď","Dcy":"Д","dcy":"д","ddagger":"‡","ddarr":"⇊","DD":"ⅅ","dd":"ⅆ","DDotrahd":"⤑","ddotseq":"⩷","deg":"°","Del":"∇","Delta":"Δ","delta":"δ","demptyv":"⦱","dfisht":"⥿","Dfr":"𝔇","dfr":"𝔡","dHar":"⥥","dharl":"⇃","dharr":"⇂","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","diam":"⋄","diamond":"⋄","Diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","DifferentialD":"ⅆ","digamma":"ϝ","disin":"⋲","div":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","DJcy":"Ђ","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","Dopf":"𝔻","dopf":"𝕕","Dot":"¨","dot":"˙","DotDot":"⃜","doteq":"≐","doteqdot":"≑","DotEqual":"≐","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrowBar":"⤓","downarrow":"↓","DownArrow":"↓","Downarrow":"⇓","DownArrowUpArrow":"⇵","DownBreve":"̑","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVectorBar":"⥖","DownLeftVector":"↽","DownRightTeeVector":"⥟","DownRightVectorBar":"⥗","DownRightVector":"⇁","DownTeeArrow":"↧","DownTee":"⊤","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","Dscr":"𝒟","dscr":"𝒹","DScy":"Ѕ","dscy":"ѕ","dsol":"⧶","Dstrok":"Đ","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","DZcy":"Џ","dzcy":"џ","dzigrarr":"⟿","Eacute":"É","eacute":"é","easter":"⩮","Ecaron":"Ě","ecaron":"ě","Ecirc":"Ê","ecirc":"ê","ecir":"≖","ecolon":"≕","Ecy":"Э","ecy":"э","eDDot":"⩷","Edot":"Ė","edot":"ė","eDot":"≑","ee":"ⅇ","efDot":"≒","Efr":"𝔈","efr":"𝔢","eg":"⪚","Egrave":"È","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","Element":"∈","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","Emacr":"Ē","emacr":"ē","empty":"∅","emptyset":"∅","EmptySmallSquare":"◻","emptyv":"∅","EmptyVerySmallSquare":"▫","emsp13":" ","emsp14":" ","emsp":" ","ENG":"Ŋ","eng":"ŋ","ensp":" ","Eogon":"Ę","eogon":"ę","Eopf":"𝔼","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","Epsilon":"Ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","Equal":"⩵","equals":"=","EqualTilde":"≂","equest":"≟","Equilibrium":"⇌","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erarr":"⥱","erDot":"≓","escr":"ℯ","Escr":"ℰ","esdot":"≐","Esim":"⩳","esim":"≂","Eta":"Η","eta":"η","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","euro":"€","excl":"!","exist":"∃","Exists":"∃","expectation":"ℰ","exponentiale":"ⅇ","ExponentialE":"ⅇ","fallingdotseq":"≒","Fcy":"Ф","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","Ffr":"𝔉","ffr":"𝔣","filig":"ﬁ","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","Fopf":"𝔽","fopf":"𝕗","forall":"∀","ForAll":"∀","fork":"⋔","forkv":"⫙","Fouriertrf":"ℱ","fpartint":"⨍","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","Fscr":"ℱ","gacute":"ǵ","Gamma":"Γ","gamma":"γ","Gammad":"Ϝ","gammad":"ϝ","gap":"⪆","Gbreve":"Ğ","gbreve":"ğ","Gcedil":"Ģ","Gcirc":"Ĝ","gcirc":"ĝ","Gcy":"Г","gcy":"г","Gdot":"Ġ","gdot":"ġ","ge":"≥","gE":"≧","gEl":"⪌","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","gescc":"⪩","ges":"⩾","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","Gfr":"𝔊","gfr":"𝔤","gg":"≫","Gg":"⋙","ggg":"⋙","gimel":"ℷ","GJcy":"Ѓ","gjcy":"ѓ","gla":"⪥","gl":"≷","glE":"⪒","glj":"⪤","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gnE":"≩","gneq":"⪈","gneqq":"≩","gnsim":"⋧","Gopf":"𝔾","gopf":"𝕘","grave":"`","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","gtcc":"⪧","gtcir":"⩺","gt":">","GT":">","Gt":"≫","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","Hacek":"ˇ","hairsp":" ","half":"½","hamilt":"ℋ","HARDcy":"Ъ","hardcy":"ъ","harrcir":"⥈","harr":"↔","hArr":"⇔","harrw":"↭","Hat":"^","hbar":"ℏ","Hcirc":"Ĥ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","Hfr":"ℌ","HilbertSpace":"ℋ","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","Hopf":"ℍ","horbar":"―","HorizontalLine":"─","hscr":"𝒽","Hscr":"ℋ","hslash":"ℏ","Hstrok":"Ħ","hstrok":"ħ","HumpDownHump":"≎","HumpEqual":"≏","hybull":"⁃","hyphen":"‐","Iacute":"Í","iacute":"í","ic":"⁣","Icirc":"Î","icirc":"î","Icy":"И","icy":"и","Idot":"İ","IEcy":"Е","iecy":"е","iexcl":"¡","iff":"⇔","ifr":"𝔦","Ifr":"ℑ","Igrave":"Ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","IJlig":"Ĳ","ijlig":"ĳ","Imacr":"Ī","imacr":"ī","image":"ℑ","ImaginaryI":"ⅈ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","Im":"ℑ","imof":"⊷","imped":"Ƶ","Implies":"⇒","incare":"℅","in":"∈","infin":"∞","infintie":"⧝","inodot":"ı","intcal":"⊺","int":"∫","Int":"∬","integers":"ℤ","Integral":"∫","intercal":"⊺","Intersection":"⋂","intlarhk":"⨗","intprod":"⨼","InvisibleComma":"⁣","InvisibleTimes":"⁢","IOcy":"Ё","iocy":"ё","Iogon":"Į","iogon":"į","Iopf":"𝕀","iopf":"𝕚","Iota":"Ι","iota":"ι","iprod":"⨼","iquest":"¿","iscr":"𝒾","Iscr":"ℐ","isin":"∈","isindot":"⋵","isinE":"⋹","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","Itilde":"Ĩ","itilde":"ĩ","Iukcy":"І","iukcy":"і","Iuml":"Ï","iuml":"ï","Jcirc":"Ĵ","jcirc":"ĵ","Jcy":"Й","jcy":"й","Jfr":"𝔍","jfr":"𝔧","jmath":"ȷ","Jopf":"𝕁","jopf":"𝕛","Jscr":"𝒥","jscr":"𝒿","Jsercy":"Ј","jsercy":"ј","Jukcy":"Є","jukcy":"є","Kappa":"Κ","kappa":"κ","kappav":"ϰ","Kcedil":"Ķ","kcedil":"ķ","Kcy":"К","kcy":"к","Kfr":"𝔎","kfr":"𝔨","kgreen":"ĸ","KHcy":"Х","khcy":"х","KJcy":"Ќ","kjcy":"ќ","Kopf":"𝕂","kopf":"𝕜","Kscr":"𝒦","kscr":"𝓀","lAarr":"⇚","Lacute":"Ĺ","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","Lambda":"Λ","lambda":"λ","lang":"⟨","Lang":"⟪","langd":"⦑","langle":"⟨","lap":"⪅","Laplacetrf":"ℒ","laquo":"«","larrb":"⇤","larrbfs":"⤟","larr":"←","Larr":"↞","lArr":"⇐","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","latail":"⤙","lAtail":"⤛","lat":"⪫","late":"⪭","lates":"⪭︀","lbarr":"⤌","lBarr":"⤎","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","Lcaron":"Ľ","lcaron":"ľ","Lcedil":"Ļ","lcedil":"ļ","lceil":"⌈","lcub":"{","Lcy":"Л","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","lE":"≦","LeftAngleBracket":"⟨","LeftArrowBar":"⇤","leftarrow":"←","LeftArrow":"←","Leftarrow":"⇐","LeftArrowRightArrow":"⇆","leftarrowtail":"↢","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVectorBar":"⥙","LeftDownVector":"⇃","LeftFloor":"⌊","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","LeftRightArrow":"↔","Leftrightarrow":"⇔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","LeftRightVector":"⥎","LeftTeeArrow":"↤","LeftTee":"⊣","LeftTeeVector":"⥚","leftthreetimes":"⋋","LeftTriangleBar":"⧏","LeftTriangle":"⊲","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVectorBar":"⥘","LeftUpVector":"↿","LeftVectorBar":"⥒","LeftVector":"↼","lEg":"⪋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","lescc":"⪨","les":"⩽","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","lessgtr":"≶","LessLess":"⪡","lesssim":"≲","LessSlantEqual":"⩽","LessTilde":"≲","lfisht":"⥼","lfloor":"⌊","Lfr":"𝔏","lfr":"𝔩","lg":"≶","lgE":"⪑","lHar":"⥢","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","LJcy":"Љ","ljcy":"љ","llarr":"⇇","ll":"≪","Ll":"⋘","llcorner":"⌞","Lleftarrow":"⇚","llhard":"⥫","lltri":"◺","Lmidot":"Ŀ","lmidot":"ŀ","lmoustache":"⎰","lmoust":"⎰","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lnE":"≨","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","LongLeftArrow":"⟵","Longleftarrow":"⟸","longleftrightarrow":"⟷","LongLeftRightArrow":"⟷","Longleftrightarrow":"⟺","longmapsto":"⟼","longrightarrow":"⟶","LongRightArrow":"⟶","Longrightarrow":"⟹","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","Lopf":"𝕃","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","LowerLeftArrow":"↙","LowerRightArrow":"↘","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","Lscr":"ℒ","lsh":"↰","Lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","Lstrok":"Ł","lstrok":"ł","ltcc":"⪦","ltcir":"⩹","lt":"<","LT":"<","Lt":"≪","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltri":"◃","ltrie":"⊴","ltrif":"◂","ltrPar":"⦖","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","macr":"¯","male":"♂","malt":"✠","maltese":"✠","Map":"⤅","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","Mcy":"М","mcy":"м","mdash":"—","mDDot":"∺","measuredangle":"∡","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","mfr":"𝔪","mho":"℧","micro":"µ","midast":"*","midcir":"⫰","mid":"∣","middot":"·","minusb":"⊟","minus":"−","minusd":"∸","minusdu":"⨪","MinusPlus":"∓","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","Mopf":"𝕄","mopf":"𝕞","mp":"∓","mscr":"𝓂","Mscr":"ℳ","mstpos":"∾","Mu":"Μ","mu":"μ","multimap":"⊸","mumap":"⊸","nabla":"∇","Nacute":"Ń","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natural":"♮","naturals":"ℕ","natur":"♮","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","Ncaron":"Ň","ncaron":"ň","Ncedil":"Ņ","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","Ncy":"Н","ncy":"н","ndash":"–","nearhk":"⤤","nearr":"↗","neArr":"⇗","nearrow":"↗","ne":"≠","nedot":"≐̸","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","nequiv":"≢","nesear":"⤨","nesim":"≂̸","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\n","nexist":"∄","nexists":"∄","Nfr":"𝔑","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","nGg":"⋙̸","ngsim":"≵","nGt":"≫⃒","ngt":"≯","ngtr":"≯","nGtv":"≫̸","nharr":"↮","nhArr":"⇎","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","NJcy":"Њ","njcy":"њ","nlarr":"↚","nlArr":"⇍","nldr":"‥","nlE":"≦̸","nle":"≰","nleftarrow":"↚","nLeftarrow":"⇍","nleftrightarrow":"↮","nLeftrightarrow":"⇎","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nLl":"⋘̸","nlsim":"≴","nLt":"≪⃒","nlt":"≮","nltri":"⋪","nltrie":"⋬","nLtv":"≪̸","nmid":"∤","NoBreak":"⁠","NonBreakingSpace":" ","nopf":"𝕟","Nopf":"ℕ","Not":"⫬","not":"¬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","notin":"∉","notindot":"⋵̸","notinE":"⋹̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","NotLeftTriangleBar":"⧏̸","NotLeftTriangle":"⋪","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangleBar":"⧐̸","NotRightTriangle":"⋫","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","nparallel":"∦","npar":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","nprec":"⊀","npreceq":"⪯̸","npre":"⪯̸","nrarrc":"⤳̸","nrarr":"↛","nrArr":"⇏","nrarrw":"↝̸","nrightarrow":"↛","nRightarrow":"⇏","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","Nscr":"𝒩","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","Ntilde":"Ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","Nu":"Ν","nu":"ν","num":"#","numero":"№","numsp":" ","nvap":"≍⃒","nvdash":"⊬","nvDash":"⊭","nVdash":"⊮","nVDash":"⊯","nvge":"≥⃒","nvgt":">⃒","nvHarr":"⤄","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwarhk":"⤣","nwarr":"↖","nwArr":"⇖","nwarrow":"↖","nwnear":"⤧","Oacute":"Ó","oacute":"ó","oast":"⊛","Ocirc":"Ô","ocirc":"ô","ocir":"⊚","Ocy":"О","ocy":"о","odash":"⊝","Odblac":"Ő","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","OElig":"Œ","oelig":"œ","ofcir":"⦿","Ofr":"𝔒","ofr":"𝔬","ogon":"˛","Ograve":"Ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","Omacr":"Ō","omacr":"ō","Omega":"Ω","omega":"ω","Omicron":"Ο","omicron":"ο","omid":"⦶","ominus":"⊖","Oopf":"𝕆","oopf":"𝕠","opar":"⦷","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","operp":"⦹","oplus":"⊕","orarr":"↻","Or":"⩔","or":"∨","ord":"⩝","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oS":"Ⓢ","Oscr":"𝒪","oscr":"ℴ","Oslash":"Ø","oslash":"ø","osol":"⊘","Otilde":"Õ","otilde":"õ","otimesas":"⨶","Otimes":"⨷","otimes":"⊗","Ouml":"Ö","ouml":"ö","ovbar":"⌽","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","para":"¶","parallel":"∥","par":"∥","parsim":"⫳","parsl":"⫽","part":"∂","PartialD":"∂","Pcy":"П","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","Pfr":"𝔓","pfr":"𝔭","Phi":"Φ","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","Pi":"Π","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plus":"+","plusdo":"∔","plusdu":"⨥","pluse":"⩲","PlusMinus":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","Poincareplane":"ℌ","pointint":"⨕","popf":"𝕡","Popf":"ℙ","pound":"£","prap":"⪷","Pr":"⪻","pr":"≺","prcue":"≼","precapprox":"⪷","prec":"≺","preccurlyeq":"≼","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","pre":"⪯","prE":"⪳","precsim":"≾","prime":"′","Prime":"″","primes":"ℙ","prnap":"⪹","prnE":"⪵","prnsim":"⋨","prod":"∏","Product":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","Proportional":"∝","Proportion":"∷","propto":"∝","prsim":"≾","prurel":"⊰","Pscr":"𝒫","pscr":"𝓅","Psi":"Ψ","psi":"ψ","puncsp":" ","Qfr":"𝔔","qfr":"𝔮","qint":"⨌","qopf":"𝕢","Qopf":"ℚ","qprime":"⁗","Qscr":"𝒬","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quot":"\"","QUOT":"\"","rAarr":"⇛","race":"∽̱","Racute":"Ŕ","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","Rang":"⟫","rangd":"⦒","range":"⦥","rangle":"⟩","raquo":"»","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarr":"→","Rarr":"↠","rArr":"⇒","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","Rarrtl":"⤖","rarrtl":"↣","rarrw":"↝","ratail":"⤚","rAtail":"⤜","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rBarr":"⤏","RBarr":"⤐","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","Rcaron":"Ř","rcaron":"ř","Rcedil":"Ŗ","rcedil":"ŗ","rceil":"⌉","rcub":"}","Rcy":"Р","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","Re":"ℜ","rect":"▭","reg":"®","REG":"®","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","Rfr":"ℜ","rHar":"⥤","rhard":"⇁","rharu":"⇀","rharul":"⥬","Rho":"Ρ","rho":"ρ","rhov":"ϱ","RightAngleBracket":"⟩","RightArrowBar":"⇥","rightarrow":"→","RightArrow":"→","Rightarrow":"⇒","RightArrowLeftArrow":"⇄","rightarrowtail":"↣","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVectorBar":"⥕","RightDownVector":"⇂","RightFloor":"⌋","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","RightTeeArrow":"↦","RightTee":"⊢","RightTeeVector":"⥛","rightthreetimes":"⋌","RightTriangleBar":"⧐","RightTriangle":"⊳","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVectorBar":"⥔","RightUpVector":"↾","RightVectorBar":"⥓","RightVector":"⇀","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoustache":"⎱","rmoust":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","Ropf":"ℝ","roplus":"⨮","rotimes":"⨵","RoundImplies":"⥰","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","Rrightarrow":"⇛","rsaquo":"›","rscr":"𝓇","Rscr":"ℛ","rsh":"↱","Rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","RuleDelayed":"⧴","ruluhar":"⥨","rx":"℞","Sacute":"Ś","sacute":"ś","sbquo":"‚","scap":"⪸","Scaron":"Š","scaron":"š","Sc":"⪼","sc":"≻","sccue":"≽","sce":"⪰","scE":"⪴","Scedil":"Ş","scedil":"ş","Scirc":"Ŝ","scirc":"ŝ","scnap":"⪺","scnE":"⪶","scnsim":"⋩","scpolint":"⨓","scsim":"≿","Scy":"С","scy":"с","sdotb":"⊡","sdot":"⋅","sdote":"⩦","searhk":"⤥","searr":"↘","seArr":"⇘","searrow":"↘","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","Sfr":"𝔖","sfr":"𝔰","sfrown":"⌢","sharp":"♯","SHCHcy":"Щ","shchcy":"щ","SHcy":"Ш","shcy":"ш","ShortDownArrow":"↓","ShortLeftArrow":"←","shortmid":"∣","shortparallel":"∥","ShortRightArrow":"→","ShortUpArrow":"↑","shy":"­","Sigma":"Σ","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","SmallCircle":"∘","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","SOFTcy":"Ь","softcy":"ь","solbar":"⌿","solb":"⧄","sol":"/","Sopf":"𝕊","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","Sqrt":"√","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","square":"□","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","squarf":"▪","squ":"□","squf":"▪","srarr":"→","Sscr":"𝒮","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","Star":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","Sub":"⋐","subdot":"⪽","subE":"⫅","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","Subset":"⋐","subseteq":"⊆","subseteqq":"⫅","SubsetEqual":"⊆","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succapprox":"⪸","succ":"≻","succcurlyeq":"≽","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","SuchThat":"∋","sum":"∑","Sum":"∑","sung":"♪","sup1":"¹","sup2":"²","sup3":"³","sup":"⊃","Sup":"⋑","supdot":"⪾","supdsub":"⫘","supE":"⫆","supe":"⊇","supedot":"⫄","Superset":"⊃","SupersetEqual":"⊇","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","Supset":"⋑","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swarhk":"⤦","swarr":"↙","swArr":"⇙","swarrow":"↙","swnwar":"⤪","szlig":"ß","Tab":"\t","target":"⌖","Tau":"Τ","tau":"τ","tbrk":"⎴","Tcaron":"Ť","tcaron":"ť","Tcedil":"Ţ","tcedil":"ţ","Tcy":"Т","tcy":"т","tdot":"⃛","telrec":"⌕","Tfr":"𝔗","tfr":"𝔱","there4":"∴","therefore":"∴","Therefore":"∴","Theta":"Θ","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","ThickSpace":"  ","ThinSpace":" ","thinsp":" ","thkap":"≈","thksim":"∼","THORN":"Þ","thorn":"þ","tilde":"˜","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","timesbar":"⨱","timesb":"⊠","times":"×","timesd":"⨰","tint":"∭","toea":"⤨","topbot":"⌶","topcir":"⫱","top":"⊤","Topf":"𝕋","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","TRADE":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","TripleDot":"⃛","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","Tscr":"𝒯","tscr":"𝓉","TScy":"Ц","tscy":"ц","TSHcy":"Ћ","tshcy":"ћ","Tstrok":"Ŧ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","Uacute":"Ú","uacute":"ú","uarr":"↑","Uarr":"↟","uArr":"⇑","Uarrocir":"⥉","Ubrcy":"Ў","ubrcy":"ў","Ubreve":"Ŭ","ubreve":"ŭ","Ucirc":"Û","ucirc":"û","Ucy":"У","ucy":"у","udarr":"⇅","Udblac":"Ű","udblac":"ű","udhar":"⥮","ufisht":"⥾","Ufr":"𝔘","ufr":"𝔲","Ugrave":"Ù","ugrave":"ù","uHar":"⥣","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","Umacr":"Ū","umacr":"ū","uml":"¨","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","uogon":"ų","Uopf":"𝕌","uopf":"𝕦","UpArrowBar":"⤒","uparrow":"↑","UpArrow":"↑","Uparrow":"⇑","UpArrowDownArrow":"⇅","updownarrow":"↕","UpDownArrow":"↕","Updownarrow":"⇕","UpEquilibrium":"⥮","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","UpperLeftArrow":"↖","UpperRightArrow":"↗","upsi":"υ","Upsi":"ϒ","upsih":"ϒ","Upsilon":"Υ","upsilon":"υ","UpTeeArrow":"↥","UpTee":"⊥","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","Uring":"Ů","uring":"ů","urtri":"◹","Uscr":"𝒰","uscr":"𝓊","utdot":"⋰","Utilde":"Ũ","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","Uuml":"Ü","uuml":"ü","uwangle":"⦧","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","vArr":"⇕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vBar":"⫨","Vbar":"⫫","vBarv":"⫩","Vcy":"В","vcy":"в","vdash":"⊢","vDash":"⊨","Vdash":"⊩","VDash":"⊫","Vdashl":"⫦","veebar":"⊻","vee":"∨","Vee":"⋁","veeeq":"≚","vellip":"⋮","verbar":"|","Verbar":"‖","vert":"|","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","Vopf":"𝕍","vopf":"𝕧","vprop":"∝","vrtri":"⊳","Vscr":"𝒱","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","Vvdash":"⊪","vzigzag":"⦚","Wcirc":"Ŵ","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","Wedge":"⋀","wedgeq":"≙","weierp":"℘","Wfr":"𝔚","wfr":"𝔴","Wopf":"𝕎","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","Wscr":"𝒲","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","Xfr":"𝔛","xfr":"𝔵","xharr":"⟷","xhArr":"⟺","Xi":"Ξ","xi":"ξ","xlarr":"⟵","xlArr":"⟸","xmap":"⟼","xnis":"⋻","xodot":"⨀","Xopf":"𝕏","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrarr":"⟶","xrArr":"⟹","Xscr":"𝒳","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","Yacute":"Ý","yacute":"ý","YAcy":"Я","yacy":"я","Ycirc":"Ŷ","ycirc":"ŷ","Ycy":"Ы","ycy":"ы","yen":"¥","Yfr":"𝔜","yfr":"𝔶","YIcy":"Ї","yicy":"ї","Yopf":"𝕐","yopf":"𝕪","Yscr":"𝒴","yscr":"𝓎","YUcy":"Ю","yucy":"ю","yuml":"ÿ","Yuml":"Ÿ","Zacute":"Ź","zacute":"ź","Zcaron":"Ž","zcaron":"ž","Zcy":"З","zcy":"з","Zdot":"Ż","zdot":"ż","zeetrf":"ℨ","ZeroWidthSpace":"​","Zeta":"Ζ","zeta":"ζ","zfr":"𝔷","Zfr":"ℨ","ZHcy":"Ж","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","Zopf":"ℤ","Zscr":"𝒵","zscr":"𝓏","zwj":"‍","zwnj":"‌"}

/***/ }),
/* 3 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */



function peg$subclass(child, parent) {
  function ctor() {
    this.constructor = child;
  }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function (expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function literal(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    "class": function _class(expectation) {
      var escapedParts = "",
          i;

      for (i = 0; i < expectation.parts.length; i++) {
        escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
      }

      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
    },

    any: function any(expectation) {
      return "any character";
    },

    end: function end(expectation) {
      return "end of input";
    },

    other: function other(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
      return '\\x0' + hex(ch);
    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
      return '\\x' + hex(ch);
    });
  }

  function classEscape(s) {
    return s.replace(/\\/g, '\\\\').replace(/\]/g, '\\]').replace(/\^/g, '\\^').replace(/-/g, '\\-').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
      return '\\x0' + hex(ch);
    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
      return '\\x' + hex(ch);
    });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i,
        j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},
      peg$startRuleFunctions = { document: peg$parsedocument },
      peg$startRuleFunction = peg$parsedocument,
      peg$c0 = function peg$c0() {
    g.startBalanced();g.enterGroup();return true;
  },
      peg$c1 = function peg$c1(pars) {
    g.exitGroup();
    g.endBalanced() || error("groups need to be balanced!");
    g.createDocument(pars);
    return g;
  },
      peg$c2 = function peg$c2(b, p) {
    b && g.break();return g.create(g.paragraph, p);
  },
      peg$c3 = function peg$c3(e) {
    g.continue();return e;
  },
      peg$c4 = function peg$c4() {
    return g.create(g.linebreak);
  },
      peg$c5 = peg$otherExpectation("text"),
      peg$c6 = function peg$c6() {
    return undefined;
  },
      peg$c7 = function peg$c7(p) {
    return g.createText(p.join(""));
  },
      peg$c8 = function peg$c8() {
    g.enterGroup();return true;
  },
      peg$c9 = function peg$c9(s) {
    return g.createText(s);
  },
      peg$c10 = function peg$c10() {
    return !g.isBalanced() && g.exitGroup();
  },
      peg$c11 = peg$otherExpectation("primitive"),
      peg$c12 = function peg$c12() {
    return g.sp;
  },
      peg$c13 = function peg$c13(b) {
    return !g.isBalanced();
  },
      peg$c14 = function peg$c14(b) {
    return b;
  },
      peg$c15 = function peg$c15(c) {
    return c;
  },
      peg$c16 = peg$otherExpectation("symbol macro"),
      peg$c17 = function peg$c17(name) {
    return g.hasSymbol(name);
  },
      peg$c18 = function peg$c18(name) {
    return g.getSymbol(name);
  },
      peg$c19 = peg$otherExpectation("identifier"),
      peg$c20 = "_",
      peg$c21 = peg$literalExpectation("_", false),
      peg$c22 = ":",
      peg$c23 = peg$literalExpectation(":", false),
      peg$c24 = peg$otherExpectation("mandatory argument"),
      peg$c25 = function peg$c25() {
    g.enterGroup();g.startBalanced();return true;
  },
      peg$c26 = function peg$c26(s, p) {
    g.endBalanced() || error("groups inside an argument need to be balanced!");
    g.exitGroup() || error("there was no group to end");

    s != undefined && p.unshift(g.createText(s));
    return g.createFragment(p);
  },
      peg$c27 = peg$otherExpectation("optional argument"),
      peg$c28 = function peg$c28() {
    g.startBalanced();return true;
  },
      peg$c29 = function peg$c29(p) {
    return g.isBalanced();
  },
      peg$c30 = function peg$c30(p) {
    g.endBalanced();
    return g.createFragment(p);
  },
      peg$c31 = function peg$c31(m) {
    return m;
  },
      peg$c32 = function peg$c32(m) {
    g.break();return m;
  },
      peg$c33 = peg$otherExpectation("user-defined hmode macro"),
      peg$c34 = function peg$c34(name) {
    return g.hasMacro(name);
  },
      peg$c35 = "*",
      peg$c36 = peg$literalExpectation("*", false),
      peg$c37 = function peg$c37(name, starred, o) {
    return { optional: true, value: o };
  },
      peg$c38 = function peg$c38(name, starred, m) {
    return { mandatory: true, value: m };
  },
      peg$c39 = function peg$c39(name, starred, args, s) {
    var node = g.processMacro(name, starred != undefined, args);

    if (s != undefined) {
      if (node == undefined) node = g.createText(s);else node = g.createFragment([node, g.createText(s)]);
    }

    return node;
  },
      peg$c40 = function peg$c40(m) {
    error("unknown macro: " + m);
  },
      peg$c41 = "tableofcontents",
      peg$c42 = peg$literalExpectation("tableofcontents", false),
      peg$c43 = function peg$c43() {},
      peg$c44 = "part",
      peg$c45 = peg$literalExpectation("part", false),
      peg$c46 = function peg$c46(s, t) {
    return g.create(g.part, t);
  },
      peg$c47 = "chapter",
      peg$c48 = peg$literalExpectation("chapter", false),
      peg$c49 = function peg$c49(s, t) {
    return g.create(g.chapter, t);
  },
      peg$c50 = "section",
      peg$c51 = peg$literalExpectation("section", false),
      peg$c52 = function peg$c52(s, t) {
    return g.create(g.section, t);
  },
      peg$c53 = "subsection",
      peg$c54 = peg$literalExpectation("subsection", false),
      peg$c55 = function peg$c55(s, t) {
    return g.create(g.subsection, t);
  },
      peg$c56 = "subsubsection",
      peg$c57 = peg$literalExpectation("subsubsection", false),
      peg$c58 = function peg$c58(s, t) {
    return g.create(g.subsubsection, t);
  },
      peg$c59 = "subparagraph",
      peg$c60 = peg$literalExpectation("subparagraph", false),
      peg$c61 = function peg$c61(s, t) {
    return g.create(g.subparagraph, t);
  },
      peg$c62 = "text",
      peg$c63 = peg$literalExpectation("text", false),
      peg$c64 = "rm",
      peg$c65 = peg$literalExpectation("rm", false),
      peg$c66 = "sf",
      peg$c67 = peg$literalExpectation("sf", false),
      peg$c68 = "tt",
      peg$c69 = peg$literalExpectation("tt", false),
      peg$c70 = function peg$c70(f) {
    g.enterGroup();g.setFontFamily(f);return true;
  },
      peg$c71 = function peg$c71(f, a) {
    g.exitGroup();return a;
  },
      peg$c72 = "md",
      peg$c73 = peg$literalExpectation("md", false),
      peg$c74 = "bf",
      peg$c75 = peg$literalExpectation("bf", false),
      peg$c76 = function peg$c76(w) {
    g.enterGroup();g.setFontWeight(w);return true;
  },
      peg$c77 = function peg$c77(w, a) {
    g.exitGroup();return a;
  },
      peg$c78 = "up",
      peg$c79 = peg$literalExpectation("up", false),
      peg$c80 = "it",
      peg$c81 = peg$literalExpectation("it", false),
      peg$c82 = "sl",
      peg$c83 = peg$literalExpectation("sl", false),
      peg$c84 = "sc",
      peg$c85 = peg$literalExpectation("sc", false),
      peg$c86 = function peg$c86(s) {
    g.enterGroup();g.setFontShape(s);return true;
  },
      peg$c87 = function peg$c87(s, a) {
    g.exitGroup();return a;
  },
      peg$c88 = "textnormal",
      peg$c89 = peg$literalExpectation("textnormal", false),
      peg$c90 = function peg$c90() {
    g.enterGroup();g.setFontFamily("rm");
    g.setFontWeight("md");
    g.setFontShape("up");return true;
  },
      peg$c91 = function peg$c91(a) {
    g.exitGroup();return a;
  },
      peg$c92 = "underline",
      peg$c93 = peg$literalExpectation("underline", false),
      peg$c94 = function peg$c94() {
    g.enterGroup();g.addAttribute("underline");return true;
  },
      peg$c95 = "emph",
      peg$c96 = peg$literalExpectation("emph", false),
      peg$c97 = function peg$c97(a) {
    return g.create(g.emph, a);
  },
      peg$c98 = "family",
      peg$c99 = peg$literalExpectation("family", false),
      peg$c100 = function peg$c100(f) {
    g.setFontFamily(f);
  },
      peg$c101 = "series",
      peg$c102 = peg$literalExpectation("series", false),
      peg$c103 = function peg$c103(w) {
    g.setFontWeight(w);
  },
      peg$c104 = "shape",
      peg$c105 = peg$literalExpectation("shape", false),
      peg$c106 = function peg$c106(s) {
    g.setFontShape(s);
  },
      peg$c107 = "normalfont",
      peg$c108 = peg$literalExpectation("normalfont", false),
      peg$c109 = function peg$c109() {
    g.setFontFamily("rm");
    g.setFontWeight("md");
    g.setFontShape("up");
  },
      peg$c110 = "tiny",
      peg$c111 = peg$literalExpectation("tiny", false),
      peg$c112 = "scriptsize",
      peg$c113 = peg$literalExpectation("scriptsize", false),
      peg$c114 = "footnotesize",
      peg$c115 = peg$literalExpectation("footnotesize", false),
      peg$c116 = "small",
      peg$c117 = peg$literalExpectation("small", false),
      peg$c118 = "normalsize",
      peg$c119 = peg$literalExpectation("normalsize", false),
      peg$c120 = "large",
      peg$c121 = peg$literalExpectation("large", false),
      peg$c122 = "Large",
      peg$c123 = peg$literalExpectation("Large", false),
      peg$c124 = "LARGE",
      peg$c125 = peg$literalExpectation("LARGE", false),
      peg$c126 = "huge",
      peg$c127 = peg$literalExpectation("huge", false),
      peg$c128 = "Huge",
      peg$c129 = peg$literalExpectation("Huge", false),
      peg$c130 = function peg$c130(s) {
    g.setFontSize(s);
  },
      peg$c131 = "em",
      peg$c132 = peg$literalExpectation("em", false),
      peg$c133 = function peg$c133() {
    g.setFontShape("em");
  },
      peg$c134 = "centering",
      peg$c135 = peg$literalExpectation("centering", false),
      peg$c136 = function peg$c136() {
    g.setAlignment("center");
  },
      peg$c137 = "raggedright",
      peg$c138 = peg$literalExpectation("raggedright", false),
      peg$c139 = function peg$c139() {
    g.setAlignment("raggedright");
  },
      peg$c140 = "raggedleft",
      peg$c141 = peg$literalExpectation("raggedleft", false),
      peg$c142 = function peg$c142() {
    g.setAlignment("raggedleft");
  },
      peg$c143 = "vspace",
      peg$c144 = peg$literalExpectation("vspace", false),
      peg$c145 = function peg$c145(l) {
    return g.createVSpaceInline(l);
  },
      peg$c146 = function peg$c146(l) {
    return g.createVSpace(l);
  },
      peg$c147 = "med",
      peg$c148 = peg$literalExpectation("med", false),
      peg$c149 = "big",
      peg$c150 = peg$literalExpectation("big", false),
      peg$c151 = "skip",
      peg$c152 = peg$literalExpectation("skip", false),
      peg$c153 = function peg$c153(s) {
    return g.createVSpaceSkipInline(s + "skip");
  },
      peg$c154 = function peg$c154(s) {
    return g.createVSpaceSkip(s + "skip");
  },
      peg$c155 = "addvspace",
      peg$c156 = peg$literalExpectation("addvspace", false),
      peg$c157 = "break",
      peg$c158 = peg$literalExpectation("break", false),
      peg$c159 = "hspace",
      peg$c160 = peg$literalExpectation("hspace", false),
      peg$c161 = function peg$c161(l) {
    return g.createHSpace(l);
  },
      peg$c162 = "pt",
      peg$c163 = peg$literalExpectation("pt", false),
      peg$c164 = "mm",
      peg$c165 = peg$literalExpectation("mm", false),
      peg$c166 = "cm",
      peg$c167 = peg$literalExpectation("cm", false),
      peg$c168 = "in",
      peg$c169 = peg$literalExpectation("in", false),
      peg$c170 = "ex",
      peg$c171 = peg$literalExpectation("ex", false),
      peg$c172 = function peg$c172(u) {
    return u;
  },
      peg$c173 = function peg$c173(l, u) {
    return l + u;
  },
      peg$c174 = function peg$c174(l) {
    return l;
  },
      peg$c175 = peg$otherExpectation("\\begin"),
      peg$c176 = function peg$c176(b) {
    b && g.break();
  },
      peg$c177 = peg$otherExpectation("\\end"),
      peg$c178 = function peg$c178(id) {
    return id;
  },
      peg$c179 = peg$otherExpectation("environment"),
      peg$c180 = function peg$c180(e, id) {
    // each environment has to return a json object: { name: <name in begin>, node: <content node> }
    if (e.name != id) error("environment <b>" + e.name + "</b> is missing its end, found " + id + " instead");

    g.endBalanced() || error(e.name + ": groups need to be balanced in environments!");

    return e.node;
  },
      peg$c181 = function peg$c181(e) {
    error("unknown environment: " + e);
  },
      peg$c182 = peg$otherExpectation("itemize environment"),
      peg$c183 = "itemize",
      peg$c184 = peg$literalExpectation("itemize", false),
      peg$c185 = function peg$c185(name, items) {
    return {
      name: name,
      node: g.create(g.unorderedList, items.map(function (item_pwtext) {
        return g.create(g.listitem,
        // this becomes the paragraph_with_linebreak fragment
        item_pwtext[1].map(function (text) {
          return text[1];
        }));
      }))
    };
  },
      peg$c186 = "item",
      peg$c187 = peg$literalExpectation("item", false),
      peg$c188 = function peg$c188(og) {
    return og;
  },
      peg$c189 = peg$otherExpectation("comment environment"),
      peg$c190 = "\\begin{comment}",
      peg$c191 = peg$literalExpectation("\\begin{comment}", false),
      peg$c192 = peg$anyExpectation(),
      peg$c193 = function peg$c193() {
    g.break();return undefined;
  },
      peg$c194 = "\\end{comment}",
      peg$c195 = peg$literalExpectation("\\end{comment}", false),
      peg$c196 = function peg$c196(m) {
    return g.parseMath(m, false);
  },
      peg$c197 = function peg$c197(m) {
    return g.parseMath(m, true);
  },
      peg$c198 = "begin",
      peg$c199 = peg$literalExpectation("begin", false),
      peg$c200 = "end",
      peg$c201 = peg$literalExpectation("end", false),
      peg$c202 = "par",
      peg$c203 = peg$literalExpectation("par", false),
      peg$c204 = "plus",
      peg$c205 = peg$literalExpectation("plus", false),
      peg$c206 = "minus",
      peg$c207 = peg$literalExpectation("minus", false),
      peg$c208 = "\\",
      peg$c209 = peg$literalExpectation("\\", false),
      peg$c210 = "{",
      peg$c211 = peg$literalExpectation("{", false),
      peg$c212 = "}",
      peg$c213 = peg$literalExpectation("}", false),
      peg$c214 = peg$otherExpectation("math"),
      peg$c215 = "$",
      peg$c216 = peg$literalExpectation("$", false),
      peg$c217 = "&",
      peg$c218 = peg$literalExpectation("&", false),
      peg$c219 = peg$otherExpectation("parameter"),
      peg$c220 = "#",
      peg$c221 = peg$literalExpectation("#", false),
      peg$c222 = "^",
      peg$c223 = peg$literalExpectation("^", false),
      peg$c224 = "\0",
      peg$c225 = peg$literalExpectation("\0", false),
      peg$c226 = peg$otherExpectation("EOF"),
      peg$c227 = peg$otherExpectation("newline"),
      peg$c228 = "\r",
      peg$c229 = peg$literalExpectation("\r", false),
      peg$c230 = "\n",
      peg$c231 = peg$literalExpectation("\n", false),
      peg$c232 = "\r\n",
      peg$c233 = peg$literalExpectation("\r\n", false),
      peg$c234 = peg$otherExpectation("whitespace"),
      peg$c235 = /^[ \t]/,
      peg$c236 = peg$classExpectation([" ", "\t"], false, false),
      peg$c237 = peg$otherExpectation("comment"),
      peg$c238 = "%",
      peg$c239 = peg$literalExpectation("%", false),
      peg$c240 = peg$otherExpectation("spaces"),
      peg$c241 = function peg$c241() {
    return g.brsp;
  },
      peg$c242 = peg$otherExpectation("paragraph break"),
      peg$c243 = peg$otherExpectation("linebreak"),
      peg$c244 = function peg$c244(l) {
    return l;
  },
      peg$c245 = function peg$c245(l) {
    if (l) return g.createBreakSpace(l);else return g.create(g.linebreak);
  },
      peg$c246 = "[",
      peg$c247 = peg$literalExpectation("[", false),
      peg$c248 = "]",
      peg$c249 = peg$literalExpectation("]", false),
      peg$c250 = peg$otherExpectation("letter"),
      peg$c251 = /^[a-z]/i,
      peg$c252 = peg$classExpectation([["a", "z"]], false, true),
      peg$c253 = function peg$c253(c) {
    return g.character(c);
  },
      peg$c254 = peg$otherExpectation("ligature"),
      peg$c255 = "ffi",
      peg$c256 = peg$literalExpectation("ffi", false),
      peg$c257 = "ffl",
      peg$c258 = peg$literalExpectation("ffl", false),
      peg$c259 = "ff",
      peg$c260 = peg$literalExpectation("ff", false),
      peg$c261 = "fi",
      peg$c262 = peg$literalExpectation("fi", false),
      peg$c263 = "fl",
      peg$c264 = peg$literalExpectation("fl", false),
      peg$c265 = "!\xB4",
      peg$c266 = peg$literalExpectation("!\xB4", false),
      peg$c267 = "?\xB4",
      peg$c268 = peg$literalExpectation("?\xB4", false),
      peg$c269 = "<<",
      peg$c270 = peg$literalExpectation("<<", false),
      peg$c271 = ">>",
      peg$c272 = peg$literalExpectation(">>", false),
      peg$c273 = function peg$c273(l) {
    return g.ligature(l);
  },
      peg$c274 = peg$otherExpectation("digit"),
      peg$c275 = /^[0-9]/,
      peg$c276 = peg$classExpectation([["0", "9"]], false, false),
      peg$c277 = function peg$c277(n) {
    return g.character(n);
  },
      peg$c278 = peg$otherExpectation("punctuation"),
      peg$c279 = /^[.,;:*\/()!?=+<>]/,
      peg$c280 = peg$classExpectation([".", ",", ";", ":", "*", "/", "(", ")", "!", "?", "=", "+", "<", ">"], false, false),
      peg$c281 = function peg$c281(p) {
    return g.character(p);
  },
      peg$c282 = peg$otherExpectation("quotes"),
      peg$c283 = /^[\u201C\u201D"'\xAB\xBB]/,
      peg$c284 = peg$classExpectation(["\u201C", "\u201D", "\"", "'", "\xAB", "\xBB"], false, false),
      peg$c285 = function peg$c285(q) {
    return g.character(q);
  },
      peg$c286 = peg$otherExpectation("left bracket"),
      peg$c287 = function peg$c287(b) {
    return g.character(b);
  },
      peg$c288 = peg$otherExpectation("right bracket"),
      peg$c289 = peg$otherExpectation("utf8 char"),
      peg$c290 = function peg$c290(u) {
    return g.character(u);
  },
      peg$c291 = peg$otherExpectation("non-brk space"),
      peg$c292 = "~",
      peg$c293 = peg$literalExpectation("~", false),
      peg$c294 = function peg$c294() {
    return g.nbsp;
  },
      peg$c295 = peg$otherExpectation("hyphen"),
      peg$c296 = "-",
      peg$c297 = peg$literalExpectation("-", false),
      peg$c298 = function peg$c298() {
    return g.hyphen;
  },
      peg$c299 = peg$otherExpectation("endash"),
      peg$c300 = "--",
      peg$c301 = peg$literalExpectation("--", false),
      peg$c302 = function peg$c302() {
    return g.endash;
  },
      peg$c303 = peg$otherExpectation("emdash"),
      peg$c304 = "---",
      peg$c305 = peg$literalExpectation("---", false),
      peg$c306 = function peg$c306() {
    return g.emdash;
  },
      peg$c307 = peg$otherExpectation("control symbol"),
      peg$c308 = /^[$%#&~{}_\^\-, \n\r\t]/,
      peg$c309 = peg$classExpectation(["$", "%", "#", "&", "~", "{", "}", "_", "^", "-", ",", " ", "\n", "\r", "\t"], false, false),
      peg$c310 = function peg$c310(c) {
    return g.controlSymbol(c);
  },
      peg$c311 = "symbol",
      peg$c312 = peg$literalExpectation("symbol", false),
      peg$c313 = function peg$c313(i) {
    return String.fromCharCode(i);
  },
      peg$c314 = "char",
      peg$c315 = peg$literalExpectation("char", false),
      peg$c316 = "^^^^",
      peg$c317 = peg$literalExpectation("^^^^", false),
      peg$c318 = "^^",
      peg$c319 = peg$literalExpectation("^^", false),
      peg$c320 = function peg$c320(i) {
    return parseInt(i, 10);
  },
      peg$c321 = "'",
      peg$c322 = peg$literalExpectation("'", false),
      peg$c323 = function peg$c323(o) {
    return parseInt(i, 8);
  },
      peg$c324 = "\"",
      peg$c325 = peg$literalExpectation("\"", false),
      peg$c326 = function peg$c326(h) {
    return h;
  },
      peg$c327 = function peg$c327(h) {
    return parseInt(h, 16);
  },
      peg$c328 = /^[0-7]/,
      peg$c329 = peg$classExpectation([["0", "7"]], false, false),
      peg$c330 = /^[a-f0-9]/i,
      peg$c331 = peg$classExpectation([["a", "f"], ["0", "9"]], false, true),
      peg$c332 = /^[+\-]/,
      peg$c333 = peg$classExpectation(["+", "-"], false, false),
      peg$c334 = ".",
      peg$c335 = peg$literalExpectation(".", false),
      peg$currPos = 0,
      peg$savedPos = 0,
      peg$posDetailsCache = [{ line: 1, column: 1 }],
      peg$maxFailPos = 0,
      peg$maxFailExpected = [],
      peg$silentFails = 0,
      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos],
        p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) {
      return;
    }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
  }

  function peg$parsedocument() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    peg$savedPos = peg$currPos;
    s1 = peg$c0();
    if (s1) {
      s1 = void 0;
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseskip_all_space();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseparagraph();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseparagraph();
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseskip_all_space();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseEOF();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c1(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseparagraph() {
    var s0, s1, s2, s3, s4;

    s0 = peg$parsevmode_macro();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsebreak();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseskip_space();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsetext();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parsetext();
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c2(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseenvironment();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c3(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseparagraph_with_linebreak() {
    var s0, s1;

    s0 = peg$parsetext();
    if (s0 === peg$FAILED) {
      s0 = peg$parsevmode_macro();
      if (s0 === peg$FAILED) {
        s0 = peg$parseenvironment();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsebreak();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c4();
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parsetext() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseligature();
    if (s2 === peg$FAILED) {
      s2 = peg$parseemdash();
      if (s2 === peg$FAILED) {
        s2 = peg$parseendash();
        if (s2 === peg$FAILED) {
          s2 = peg$parseprimitive();
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$currPos;
            peg$silentFails++;
            s4 = peg$parsebreak();
            peg$silentFails--;
            if (s4 === peg$FAILED) {
              s3 = void 0;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsecomment();
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$parsesp();
                if (s6 === peg$FAILED) {
                  s6 = peg$parsenl();
                }
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$parsesp();
                  if (s6 === peg$FAILED) {
                    s6 = peg$parsenl();
                  }
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c6();
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseligature();
        if (s2 === peg$FAILED) {
          s2 = peg$parseemdash();
          if (s2 === peg$FAILED) {
            s2 = peg$parseendash();
            if (s2 === peg$FAILED) {
              s2 = peg$parseprimitive();
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$currPos;
                peg$silentFails++;
                s4 = peg$parsebreak();
                peg$silentFails--;
                if (s4 === peg$FAILED) {
                  s3 = void 0;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsecomment();
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    s6 = peg$parsesp();
                    if (s6 === peg$FAILED) {
                      s6 = peg$parsenl();
                    }
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$parsesp();
                      if (s6 === peg$FAILED) {
                        s6 = peg$parsenl();
                      }
                    }
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$c6();
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c7(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parselinebreak();
      if (s0 === peg$FAILED) {
        s0 = peg$parsehmode_macro();
        if (s0 === peg$FAILED) {
          s0 = peg$parsemath();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsebegin_group();
            if (s1 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s2 = peg$c8();
              if (s2) {
                s2 = void 0;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsespace();
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c9(s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseend_group();
              if (s1 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s2 = peg$c10();
                if (s2) {
                  s2 = void 0;
                } else {
                  s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsespace();
                  if (s3 === peg$FAILED) {
                    s3 = null;
                  }
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c9(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c5);
      }
    }

    return s0;
  }

  function peg$parseprimitive() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$parsechar();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsespace();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c12();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parsehyphen();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedigit();
          if (s0 === peg$FAILED) {
            s0 = peg$parsepunctuation();
            if (s0 === peg$FAILED) {
              s0 = peg$parsequotes();
              if (s0 === peg$FAILED) {
                s0 = peg$parseleft_br();
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseright_br();
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s2 = peg$c13(s1);
                    if (s2) {
                      s2 = void 0;
                    } else {
                      s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c14(s1);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsenbsp();
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$currPos;
                      peg$silentFails++;
                      s2 = peg$parsebreak();
                      peg$silentFails--;
                      if (s2 === peg$FAILED) {
                        s1 = void 0;
                      } else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parsectl_sym();
                        if (s2 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c15(s2);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsesymbol();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsecharsym();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseutf8_char();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c11);
      }
    }

    return s0;
  }

  function peg$parsesymbol() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseescape();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s3 = peg$c17(s2);
        if (s3) {
          s3 = void 0;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseskip_space();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c18(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c16);
      }
    }

    return s0;
  }

  function peg$parseidentifier() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsechar();
    if (s2 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 95) {
        s2 = peg$c20;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c21);
        }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c22;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c23);
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsechar();
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s2 = peg$c20;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c21);
            }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s2 = peg$c22;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c23);
              }
            }
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c19);
      }
    }

    return s0;
  }

  function peg$parsearggroup() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseskip_space();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebegin_group();
      if (s2 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s3 = peg$c25();
        if (s3) {
          s3 = void 0;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsespace();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseparagraph_with_linebreak();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseparagraph_with_linebreak();
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseend_group();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c26(s4, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c24);
      }
    }

    return s0;
  }

  function peg$parseoptgroup() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseskip_space();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebegin_optgroup();
      if (s2 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s3 = peg$c28();
        if (s3) {
          s3 = void 0;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseparagraph_with_linebreak();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseparagraph_with_linebreak();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseend_optgroup();
            if (s5 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s6 = peg$c29(s4);
              if (s6) {
                s6 = void 0;
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c30(s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c27);
      }
    }

    return s0;
  }

  function peg$parsemacro() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseescape();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefontfamily();
      if (s2 === peg$FAILED) {
        s2 = peg$parsefontweight();
        if (s2 === peg$FAILED) {
          s2 = peg$parsefontshape();
          if (s2 === peg$FAILED) {
            s2 = peg$parsenormalfont();
            if (s2 === peg$FAILED) {
              s2 = peg$parseem();
              if (s2 === peg$FAILED) {
                s2 = peg$parsefontsize();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsecentering();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseraggedright();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parseraggedleft();
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c31(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehmode_macro() {
    var s0, s1, s2;

    s0 = peg$parsemacro();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseescape();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecustom_macro();
        if (s2 === peg$FAILED) {
          s2 = peg$parsetextfamily();
          if (s2 === peg$FAILED) {
            s2 = peg$parsetextweight();
            if (s2 === peg$FAILED) {
              s2 = peg$parsetextshape();
              if (s2 === peg$FAILED) {
                s2 = peg$parsetextnormal();
                if (s2 === peg$FAILED) {
                  s2 = peg$parseemph();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parseunderline();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsesmbskip_hmode();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parsehspace();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parsevspace_hmode();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c31(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsevmode_macro() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseskip_all_space();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsemacro();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c31(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseskip_all_space();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseescape();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsepart();
          if (s3 === peg$FAILED) {
            s3 = peg$parsechapter();
            if (s3 === peg$FAILED) {
              s3 = peg$parsesection();
              if (s3 === peg$FAILED) {
                s3 = peg$parsesubsection();
                if (s3 === peg$FAILED) {
                  s3 = peg$parsesubsubsection();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parsevspace_vmode();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseaddvspace();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parsesmbskip_vmode();
                        if (s3 === peg$FAILED) {
                          s3 = peg$parsesmbbreak();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseskip_all_space();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c32(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsecustom_macro() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$c34(s1);
      if (s2) {
        s2 = void 0;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s3 = peg$c35;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c36);
          }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseskip_space();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parseoptgroup();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s6;
              s7 = peg$c37(s1, s3, s7);
            }
            s6 = s7;
            if (s6 === peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parsearggroup();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c38(s1, s3, s7);
              }
              s6 = s7;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parseoptgroup();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s6;
                s7 = peg$c37(s1, s3, s7);
              }
              s6 = s7;
              if (s6 === peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parsearggroup();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s6;
                  s7 = peg$c38(s1, s3, s7);
                }
                s6 = s7;
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsespace();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c39(s1, s3, s5, s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c33);
      }
    }

    return s0;
  }

  function peg$parseunknown_macro() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c40(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsetableofcontents() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 15) === peg$c41) {
      s1 = peg$c41;
      peg$currPos += 15;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c42);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsechar();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseskip_space();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c43();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepart() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c44) {
      s1 = peg$c44;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c45);
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 42) {
        s2 = peg$c35;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c36);
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsearggroup();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c46(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsechapter() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c47) {
      s1 = peg$c47;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c48);
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 42) {
        s2 = peg$c35;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c36);
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsearggroup();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c49(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesection() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c50) {
      s1 = peg$c50;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c51);
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 42) {
        s2 = peg$c35;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c36);
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsearggroup();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c52(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesubsection() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c53) {
      s1 = peg$c53;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c54);
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 42) {
        s2 = peg$c35;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c36);
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsearggroup();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c55(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesubsubsection() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 13) === peg$c56) {
      s1 = peg$c56;
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c57);
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 42) {
        s2 = peg$c35;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c36);
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsearggroup();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c58(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesubparagraph() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c59) {
      s1 = peg$c59;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c60);
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 42) {
        s2 = peg$c35;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c36);
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsearggroup();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c61(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetextfamily() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c62) {
      s1 = peg$c62;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c63);
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c64) {
        s2 = peg$c64;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c65);
        }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c66) {
          s2 = peg$c66;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c67);
          }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c68) {
            s2 = peg$c68;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c69);
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsechar();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s4 = peg$c70(s2);
          if (s4) {
            s4 = void 0;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsearggroup();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c71(s2, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetextweight() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c62) {
      s1 = peg$c62;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c63);
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c72) {
        s2 = peg$c72;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c73);
        }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c74) {
          s2 = peg$c74;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c75);
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsechar();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s4 = peg$c76(s2);
          if (s4) {
            s4 = void 0;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsearggroup();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c77(s2, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetextshape() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c62) {
      s1 = peg$c62;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c63);
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c78) {
        s2 = peg$c78;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c79);
        }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c80) {
          s2 = peg$c80;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c81);
          }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c82) {
            s2 = peg$c82;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c83);
            }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c84) {
              s2 = peg$c84;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c85);
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsechar();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s4 = peg$c86(s2);
          if (s4) {
            s4 = void 0;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsearggroup();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c87(s2, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetextnormal() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c88) {
      s1 = peg$c88;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c89);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsechar();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s3 = peg$c90();
        if (s3) {
          s3 = void 0;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsearggroup();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c91(s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseunderline() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c92) {
      s1 = peg$c92;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c93);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsechar();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s3 = peg$c94();
        if (s3) {
          s3 = void 0;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsearggroup();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c91(s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseemph() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c95) {
      s1 = peg$c95;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c96);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsearggroup();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c97(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefontfamily() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c64) {
      s1 = peg$c64;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c65);
      }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c66) {
        s1 = peg$c66;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c67);
        }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c68) {
          s1 = peg$c68;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c69);
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c98) {
        s2 = peg$c98;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c99);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsechar();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseskip_space();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c100(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefontweight() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c72) {
      s1 = peg$c72;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c73);
      }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c74) {
        s1 = peg$c74;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c75);
        }
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c101) {
        s2 = peg$c101;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c102);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsechar();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseskip_space();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c103(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefontshape() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c78) {
      s1 = peg$c78;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c79);
      }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c80) {
        s1 = peg$c80;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c81);
        }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c82) {
          s1 = peg$c82;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c83);
          }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c84) {
            s1 = peg$c84;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c85);
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c104) {
        s2 = peg$c104;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c105);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsechar();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseskip_space();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c106(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenormalfont() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c107) {
      s1 = peg$c107;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c108);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsechar();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseskip_space();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c109();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefontsize() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c110) {
      s1 = peg$c110;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c111);
      }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 10) === peg$c112) {
        s1 = peg$c112;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c113);
        }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 12) === peg$c114) {
          s1 = peg$c114;
          peg$currPos += 12;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c115);
          }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c116) {
            s1 = peg$c116;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c117);
            }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 10) === peg$c118) {
              s1 = peg$c118;
              peg$currPos += 10;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c119);
              }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c120) {
                s1 = peg$c120;
                peg$currPos += 5;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c121);
                }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c122) {
                  s1 = peg$c122;
                  peg$currPos += 5;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c123);
                  }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c124) {
                    s1 = peg$c124;
                    peg$currPos += 5;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c125);
                    }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c126) {
                      s1 = peg$c126;
                      peg$currPos += 4;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c127);
                      }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c128) {
                        s1 = peg$c128;
                        peg$currPos += 4;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c129);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsechar();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseskip_space();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c130(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseem() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c131) {
      s1 = peg$c131;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c132);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsechar();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseskip_space();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c133();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecentering() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c134) {
      s1 = peg$c134;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c135);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsechar();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseskip_space();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c136();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseraggedright() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 11) === peg$c137) {
      s1 = peg$c137;
      peg$currPos += 11;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c138);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsechar();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseskip_space();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c139();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseraggedleft() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c140) {
      s1 = peg$c140;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c141);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsechar();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseskip_space();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c142();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevspace_hmode() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c143) {
      s1 = peg$c143;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c144);
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 42) {
        s2 = peg$c35;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c36);
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsechar();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parselengthgroup();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c145(s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevspace_vmode() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c143) {
      s1 = peg$c143;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c144);
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 42) {
        s2 = peg$c35;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c36);
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsechar();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parselengthgroup();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c146(s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmbskip_hmode() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c116) {
      s2 = peg$c116;
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c117);
      }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c147) {
        s2 = peg$c147;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c148);
        }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c149) {
          s2 = peg$c149;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c150);
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c151) {
        s2 = peg$c151;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c152);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsechar();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseskip_space();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c153(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmbskip_vmode() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c116) {
      s2 = peg$c116;
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c117);
      }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c147) {
        s2 = peg$c147;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c148);
        }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c149) {
          s2 = peg$c149;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c150);
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c151) {
        s2 = peg$c151;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c152);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsechar();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseskip_space();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c154(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseaddvspace() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c155) {
      s1 = peg$c155;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c156);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsechar();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parselengthgroup();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c146(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesmbbreak() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c116) {
      s2 = peg$c116;
      peg$currPos += 5;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c117);
      }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c147) {
        s2 = peg$c147;
        peg$currPos += 3;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c148);
        }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c149) {
          s2 = peg$c149;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c150);
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c157) {
        s2 = peg$c157;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c158);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsechar();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseskip_space();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c154(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsehspace() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c159) {
      s1 = peg$c159;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c160);
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 42) {
        s2 = peg$c35;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c36);
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsechar();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parselengthgroup();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c161(s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselength_unit() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseskip_space();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c162) {
        s2 = peg$c162;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c163);
        }
      }
      if (s2 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c164) {
          s2 = peg$c164;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c165);
          }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c166) {
            s2 = peg$c166;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c167);
            }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c168) {
              s2 = peg$c168;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c169);
              }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c170) {
                s2 = peg$c170;
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c171);
                }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c131) {
                  s2 = peg$c131;
                  peg$currPos += 2;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c132);
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parsechar();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
          s3 = void 0;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseskip_space();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c172(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselength() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsefloat();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselength_unit();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseplus();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsefloat();
          if (s5 !== peg$FAILED) {
            s6 = peg$parselength_unit();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parseminus();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsefloat();
            if (s6 !== peg$FAILED) {
              s7 = peg$parselength_unit();
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c173(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselengthgroup() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseskip_space();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebegin_group();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseskip_space();
        if (s3 !== peg$FAILED) {
          s4 = peg$parselength();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseend_group();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c174(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebegin_env() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsebreak();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseskip_space();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseescape();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsebegin();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c176(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c175);
      }
    }

    return s0;
  }

  function peg$parseend_env() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseskip_all_space();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseescape();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend();
        if (s3 !== peg$FAILED) {
          s4 = peg$parsebegin_group();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseidentifier();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseend_group();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c178(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c177);
      }
    }

    return s0;
  }

  function peg$parseenvironment() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsebegin_env();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsebegin_group();
      if (s2 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s3 = peg$c28();
        if (s3) {
          s3 = void 0;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseitemize();
          if (s4 === peg$FAILED) {
            s4 = peg$parseunknown_environment();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseend_env();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c180(s4, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c179);
      }
    }

    return s0;
  }

  function peg$parseunknown_environment() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c181(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseitemize() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7) === peg$c183) {
      s1 = peg$c183;
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c184);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseend_group();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseitem();
        if (s5 !== peg$FAILED) {
          s6 = [];
          s7 = peg$currPos;
          s8 = peg$currPos;
          peg$silentFails++;
          s9 = peg$parseitem();
          if (s9 === peg$FAILED) {
            s9 = peg$parseend_env();
          }
          peg$silentFails--;
          if (s9 === peg$FAILED) {
            s8 = void 0;
          } else {
            peg$currPos = s8;
            s8 = peg$FAILED;
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parseparagraph_with_linebreak();
            if (s9 !== peg$FAILED) {
              s8 = [s8, s9];
              s7 = s8;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$currPos;
            s8 = peg$currPos;
            peg$silentFails++;
            s9 = peg$parseitem();
            if (s9 === peg$FAILED) {
              s9 = peg$parseend_env();
            }
            peg$silentFails--;
            if (s9 === peg$FAILED) {
              s8 = void 0;
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parseparagraph_with_linebreak();
              if (s9 !== peg$FAILED) {
                s8 = [s8, s9];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parseitem();
          if (s5 !== peg$FAILED) {
            s6 = [];
            s7 = peg$currPos;
            s8 = peg$currPos;
            peg$silentFails++;
            s9 = peg$parseitem();
            if (s9 === peg$FAILED) {
              s9 = peg$parseend_env();
            }
            peg$silentFails--;
            if (s9 === peg$FAILED) {
              s8 = void 0;
            } else {
              peg$currPos = s8;
              s8 = peg$FAILED;
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parseparagraph_with_linebreak();
              if (s9 !== peg$FAILED) {
                s8 = [s8, s9];
                s7 = s8;
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$currPos;
              s8 = peg$currPos;
              peg$silentFails++;
              s9 = peg$parseitem();
              if (s9 === peg$FAILED) {
                s9 = peg$parseend_env();
              }
              peg$silentFails--;
              if (s9 === peg$FAILED) {
                s8 = void 0;
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 !== peg$FAILED) {
                s9 = peg$parseparagraph_with_linebreak();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
            }
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c185(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c182);
      }
    }

    return s0;
  }

  function peg$parseitem() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseskip_all_space();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseescape();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c186) {
          s3 = peg$c186;
          peg$currPos += 4;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c187);
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseoptgroup();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseskip_space();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c188(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomment_env() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 15) === peg$c190) {
      s1 = peg$c190;
      peg$currPos += 15;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c191);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parseend_comment();
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = void 0;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c192);
          }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parseend_comment();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c192);
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseend_comment();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseskip_space();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c193();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c189);
      }
    }

    return s0;
  }

  function peg$parseend_comment() {
    var s0;

    if (input.substr(peg$currPos, 13) === peg$c194) {
      s0 = peg$c194;
      peg$currPos += 13;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c195);
      }
    }

    return s0;
  }

  function peg$parsemath() {
    var s0;

    s0 = peg$parseinline_math();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedisplay_math();
    }

    return s0;
  }

  function peg$parseinline_math() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsemath_shift();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parsemath_primitive();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsemath_primitive();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsemath_shift();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c196(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedisplay_math() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsemath_shift();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsemath_shift();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parsemath_primitive();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsemath_primitive();
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s3 = input.substring(s3, peg$currPos);
        } else {
          s3 = s4;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsemath_shift();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemath_shift();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c197(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseescape();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseleft_br();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parsemath_primitive();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsemath_primitive();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s3 = input.substring(s3, peg$currPos);
          } else {
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseescape();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseright_br();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c197(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsemath_primitive() {
    var s0, s1, s2, s3;

    s0 = peg$parseprimitive();
    if (s0 === peg$FAILED) {
      s0 = peg$parsealignment_tab();
      if (s0 === peg$FAILED) {
        s0 = peg$parsesuperscript();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesubscript();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseescape();
            if (s1 !== peg$FAILED) {
              s2 = peg$parseidentifier();
              if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsebegin_group();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseskip_space();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseend_group();
                  if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsebegin_group();
                if (s1 !== peg$FAILED) {
                  s2 = [];
                  s3 = peg$parsemath_primitive();
                  if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                      s2.push(s3);
                      s3 = peg$parsemath_primitive();
                    }
                  } else {
                    s2 = peg$FAILED;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseend_group();
                    if (s3 !== peg$FAILED) {
                      s1 = [s1, s2, s3];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$parsebreak();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parselinebreak();
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsebegin() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c198) {
      s1 = peg$c198;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c199);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsechar();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseskip_space();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseend() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c200) {
      s1 = peg$c200;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c201);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsechar();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseskip_space();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepar() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c202) {
      s1 = peg$c202;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c203);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsechar();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseplus() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c204) {
      s1 = peg$c204;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c205);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsechar();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseskip_space();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseminus() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c206) {
      s1 = peg$c206;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c207);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parsechar();
      peg$silentFails--;
      if (s3 === peg$FAILED) {
        s2 = void 0;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseskip_space();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseescape() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c208;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c209);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c6();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsebegin_group() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c210;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c211);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c6();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseend_group() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 125) {
      s1 = peg$c212;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c213);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c6();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsemath_shift() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s1 = peg$c215;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c216);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c6();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c214);
      }
    }

    return s0;
  }

  function peg$parsealignment_tab() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 38) {
      s1 = peg$c217;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c218);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c6();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsemacro_parameter() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c220;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c221);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c6();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c219);
      }
    }

    return s0;
  }

  function peg$parsesuperscript() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 94) {
      s1 = peg$c222;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c223);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c6();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsesubscript() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 95) {
      s1 = peg$c20;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c21);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c6();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseignore() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 0) {
      s1 = peg$c224;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c225);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c6();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseEOF() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c192);
      }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = void 0;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c226);
      }
    }

    return s0;
  }

  function peg$parsenl() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 13) {
      s2 = peg$c228;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c229);
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 10) {
        s2 = peg$c230;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c231);
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 13) {
        s0 = peg$c228;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c229);
        }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c232) {
          s1 = peg$c232;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c233);
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c6();
        }
        s0 = s1;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c227);
      }
    }

    return s0;
  }

  function peg$parsesp() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c235.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c236);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c6();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c234);
      }
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 37) {
      s1 = peg$c238;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c239);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$currPos;
      peg$silentFails++;
      s5 = peg$parsenl();
      peg$silentFails--;
      if (s5 === peg$FAILED) {
        s4 = void 0;
      } else {
        peg$currPos = s4;
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c192);
          }
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parsenl();
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c192);
            }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsenl();
        if (s3 === peg$FAILED) {
          s3 = peg$parseEOF();
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsecomment_env();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c6();
      }
      s0 = s1;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c237);
      }
    }

    return s0;
  }

  function peg$parseskip_space() {
    var s0, s1, s2, s3, s4;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$currPos;
    peg$silentFails++;
    s4 = peg$parsebreak();
    peg$silentFails--;
    if (s4 === peg$FAILED) {
      s3 = void 0;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parsenl();
      if (s4 === peg$FAILED) {
        s4 = peg$parsesp();
        if (s4 === peg$FAILED) {
          s4 = peg$parsecomment();
        }
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$currPos;
      peg$silentFails++;
      s4 = peg$parsebreak();
      peg$silentFails--;
      if (s4 === peg$FAILED) {
        s3 = void 0;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsenl();
        if (s4 === peg$FAILED) {
          s4 = peg$parsesp();
          if (s4 === peg$FAILED) {
            s4 = peg$parsecomment();
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c6();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c240);
      }
    }

    return s0;
  }

  function peg$parseskip_all_space() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsenl();
    if (s2 === peg$FAILED) {
      s2 = peg$parsesp();
      if (s2 === peg$FAILED) {
        s2 = peg$parsecomment();
      }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsenl();
      if (s2 === peg$FAILED) {
        s2 = peg$parsesp();
        if (s2 === peg$FAILED) {
          s2 = peg$parsecomment();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c6();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c240);
      }
    }

    return s0;
  }

  function peg$parsespace() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parsebreak();
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsesp();
      if (s3 === peg$FAILED) {
        s3 = peg$parsenl();
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsesp();
          if (s3 === peg$FAILED) {
            s3 = peg$parsenl();
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parsecomment();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsecomment();
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parsesp();
          if (s5 === peg$FAILED) {
            s5 = peg$parsenl();
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parsesp();
            if (s5 === peg$FAILED) {
              s5 = peg$parsenl();
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c241();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c240);
      }
    }

    return s0;
  }

  function peg$parsebreak() {
    var s0, s1, s2, s3, s4, s5, s6;

    peg$silentFails++;
    s0 = [];
    s1 = peg$currPos;
    s2 = peg$parseskip_all_space();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseescape();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsepar();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseskip_all_space();
          if (s5 !== peg$FAILED) {
            s2 = [s2, s3, s4, s5];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = peg$parseskip_all_space();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseescape();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsepar();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseskip_all_space();
              if (s5 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsesp();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsesp();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseescape();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsenl();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parsecomment();
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parsesp();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parsesp();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsenl();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = [];
              s6 = peg$parsesp();
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$parsesp();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsenl();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$parsesp();
            if (s5 === peg$FAILED) {
              s5 = peg$parsenl();
              if (s5 === peg$FAILED) {
                s5 = peg$parsecomment();
              }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parsesp();
              if (s5 === peg$FAILED) {
                s5 = peg$parsenl();
                if (s5 === peg$FAILED) {
                  s5 = peg$parsecomment();
                }
              }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c242);
      }
    }

    return s0;
  }

  function peg$parselinebreak() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseescape();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 92) {
        s2 = peg$c208;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c209);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseskip_space();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 42) {
            s4 = peg$c35;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c36);
            }
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseskip_space();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parsebegin_optgroup();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseskip_space();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parselength();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseend_optgroup();
                    if (s10 !== peg$FAILED) {
                      s11 = peg$parseskip_space();
                      if (s11 !== peg$FAILED) {
                        peg$savedPos = s6;
                        s7 = peg$c244(s9);
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c245(s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c243);
      }
    }

    return s0;
  }

  function peg$parsebegin_optgroup() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c246;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c247);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c6();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseend_optgroup() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 93) {
      s1 = peg$c248;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c249);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c6();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsechar() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c251.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c252);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c253(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c250);
      }
    }

    return s0;
  }

  function peg$parseligature() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c255) {
      s1 = peg$c255;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c256);
      }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c257) {
        s1 = peg$c257;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c258);
        }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c259) {
          s1 = peg$c259;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c260);
          }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c261) {
            s1 = peg$c261;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c262);
            }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c263) {
              s1 = peg$c263;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) {
                peg$fail(peg$c264);
              }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c265) {
                s1 = peg$c265;
                peg$currPos += 2;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                  peg$fail(peg$c266);
                }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c267) {
                  s1 = peg$c267;
                  peg$currPos += 2;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c268);
                  }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c269) {
                    s1 = peg$c269;
                    peg$currPos += 2;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c270);
                    }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c271) {
                      s1 = peg$c271;
                      peg$currPos += 2;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c272);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c273(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c254);
      }
    }

    return s0;
  }

  function peg$parsedigit() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c275.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c276);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c277(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c274);
      }
    }

    return s0;
  }

  function peg$parsepunctuation() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c279.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c280);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c281(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c278);
      }
    }

    return s0;
  }

  function peg$parsequotes() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$c283.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c284);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c285(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c282);
      }
    }

    return s0;
  }

  function peg$parseleft_br() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c246;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c247);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c287(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c286);
      }
    }

    return s0;
  }

  function peg$parseright_br() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 93) {
      s1 = peg$c248;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c249);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c287(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c288);
      }
    }

    return s0;
  }

  function peg$parseutf8_char() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parsesp();
    if (s2 === peg$FAILED) {
      s2 = peg$parsenl();
      if (s2 === peg$FAILED) {
        s2 = peg$parseescape();
        if (s2 === peg$FAILED) {
          s2 = peg$parsebegin_group();
          if (s2 === peg$FAILED) {
            s2 = peg$parseend_group();
            if (s2 === peg$FAILED) {
              s2 = peg$parsemath_shift();
              if (s2 === peg$FAILED) {
                s2 = peg$parsealignment_tab();
                if (s2 === peg$FAILED) {
                  s2 = peg$parsemacro_parameter();
                  if (s2 === peg$FAILED) {
                    s2 = peg$parsesuperscript();
                    if (s2 === peg$FAILED) {
                      s2 = peg$parsesubscript();
                      if (s2 === peg$FAILED) {
                        s2 = peg$parseignore();
                        if (s2 === peg$FAILED) {
                          s2 = peg$parsecomment();
                          if (s2 === peg$FAILED) {
                            s2 = peg$parsebegin_optgroup();
                            if (s2 === peg$FAILED) {
                              s2 = peg$parseend_optgroup();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = void 0;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c192);
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c290(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c289);
      }
    }

    return s0;
  }

  function peg$parsenbsp() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 126) {
      s1 = peg$c292;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c293);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c294();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c291);
      }
    }

    return s0;
  }

  function peg$parsehyphen() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c296;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c297);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c298();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c295);
      }
    }

    return s0;
  }

  function peg$parseendash() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c300) {
      s1 = peg$c300;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c301);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c302();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c299);
      }
    }

    return s0;
  }

  function peg$parseemdash() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c304) {
      s1 = peg$c304;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c305);
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c306();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c303);
      }
    }

    return s0;
  }

  function peg$parsectl_sym() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseescape();
    if (s1 !== peg$FAILED) {
      if (peg$c308.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c309);
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c310(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c307);
      }
    }

    return s0;
  }

  function peg$parsecharsym() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseescape();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c311) {
        s2 = peg$c311;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c312);
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsebegin_group();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseskip_space();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsecharnumber();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseskip_space();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseend_group();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c313(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseescape();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c314) {
          s2 = peg$c314;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c315);
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecharnumber();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c313(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c316) {
          s1 = peg$c316;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c317);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsehex64();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c313(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c318) {
            s1 = peg$c318;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$c319);
            }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parsehex32();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c313(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parsecharnumber() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseint();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c320(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c321;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$c322);
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseoct();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c323(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c324;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c325);
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsehex64();
          if (s2 === peg$FAILED) {
            s2 = peg$parsehex32();
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c326(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsehex32() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$parsehex();
    if (s3 !== peg$FAILED) {
      s4 = peg$parsehex();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c327(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsehex64() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    s3 = peg$parsehex();
    if (s3 !== peg$FAILED) {
      s4 = peg$parsehex();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsehex();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsehex();
          if (s6 !== peg$FAILED) {
            s3 = [s3, s4, s5, s6];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c327(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseint() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c275.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c276);
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c275.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c276);
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseoct() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c328.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c329);
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c328.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c329);
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsehex() {
    var s0;

    if (peg$c330.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c331);
      }
    }

    return s0;
  }

  function peg$parsefloat() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (peg$c332.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$c333);
      }
    }
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$currPos;
      s4 = peg$parseint();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s6 = peg$c334;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c335);
          }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parseint();
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c334;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$c335);
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseint();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  // TODO: pass g in options, take it out of options here so we are more flexible
  var g = new (__webpack_require__(5).HtmlGenerator)();

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

// Generated by LiveScript 1.5.0
(function () {
  var entities,
      katex,
      _,
      Macros,
      HtmlGenerator,
      out$ = typeof exports != 'undefined' && exports || this;
  if (typeof document === 'undefined') {
    global.document = __webpack_require__(6).createDocument();
  }
  entities = __webpack_require__(7);
  katex = __webpack_require__(13);
  _ = __webpack_require__(14);
  Object.defineProperty(Array.prototype, 'top', {
    enumerable: false,
    configurable: true,
    get: function get() {
      return this[this.length - 1];
    },
    set: undefined
  });
  Macros = function () {
    Macros.displayName = 'Macros';
    var prototype = Macros.prototype,
        constructor = Macros;
    function Macros(generator) {
      this._generator = generator;
    }
    Macros.prototype._checkOneM = function (arg) {
      var macro;
      if (arg.length === 1 && arg[0].mandatory) {
        return;
      }
      macro = /Macros\.(\w+)/.exec(new Error().stack.split('\n')[2])[1];
      throw new Error(macro + " expects exactly one mandatory argument!");
    };
    Macros.prototype._appendRemainingArgs = function (node, args) {};
    Macros.prototype._returnRemainingArgs = function (args) {
      return this._generator.createFragment(args.map(function (a) {
        return a.value;
      }));
    };
    Macros.prototype.echo = function (args) {
      var this$ = this;
      return this._generator.createFragment(args.map(function (x) {
        if (x.value) {
          return this$._generator.createFragment([this$._generator.createText(x.mandatory ? "+" : "-"), x.value, this$._generator.createText(x.mandatory ? "+" : "-")]);
        }
      }));
    };
    Macros.prototype.TeX = function () {
      var tex, e;
      tex = this._generator.create(this._generator.inlineBlock);
      tex.setAttribute('class', 'tex');
      tex.appendChild(this._generator.createText('T'));
      e = this._generator.create(this._generator.inlineBlock);
      e.appendChild(this._generator.createText('e'));
      tex.appendChild(e);
      tex.appendChild(this._generator.createText('X'));
      return tex;
    };
    Macros.prototype.LaTeX = function () {
      var latex, a, e;
      latex = this._generator.create(this._generator.inlineBlock);
      latex.setAttribute('class', 'latex');
      latex.appendChild(this._generator.createText('L'));
      a = this._generator.create(this._generator.inlineBlock);
      a.appendChild(this._generator.createText('a'));
      latex.appendChild(a);
      latex.appendChild(this._generator.createText('T'));
      e = this._generator.create(this._generator.inlineBlock);
      e.appendChild(this._generator.createText('e'));
      latex.appendChild(e);
      latex.appendChild(this._generator.createText('X'));
      return latex;
    };
    Macros.prototype.today = function () {
      return this._generator.createText(new Date().toLocaleDateString('en', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      }));
    };
    Macros.prototype.newline = function () {
      return this._generator.create(this._generator.linebreak);
    };
    Macros.prototype.negthinspace = function () {
      var ts;
      ts = this._generator.create(this._generator.inlineBlock);
      ts.setAttribute('class', 'negthinspace');
      return ts;
    };
    Macros.prototype.mbox = function (arg) {};
    Macros.prototype.fbox = function (arg) {};
    Macros.prototype.pagestyle = function (arg) {};
    Macros.prototype.include = function (arg) {};
    Macros.prototype.includeonly = function (arg) {};
    Macros.prototype.input = function (arg) {};
    Macros.prototype.vfill = function () {};
    Macros.prototype['break'] = function () {};
    Macros.prototype.nobreak = function () {};
    Macros.prototype.allowbreak = function () {};
    Macros.prototype.newpage = function () {};
    Macros.prototype.linebreak = function () {};
    Macros.prototype.nolinebreak = function () {};
    Macros.prototype.pagebreak = function () {};
    Macros.prototype.nopagebreak = function () {};
    Macros.prototype.samepage = function () {};
    Macros.prototype.enlargethispage = function () {};
    Macros.prototype.thispagestyle = function () {};
    return Macros;
  }();
  out$.HtmlGenerator = HtmlGenerator = function () {
    HtmlGenerator.displayName = 'HtmlGenerator';
    var ligatures,
        symbols,
        prototype = HtmlGenerator.prototype,
        constructor = HtmlGenerator;
    HtmlGenerator.prototype.sp = ' ';
    HtmlGenerator.prototype.brsp = '\u200B ';
    HtmlGenerator.prototype.nbsp = entities.decodeHTML("&nbsp;");
    HtmlGenerator.prototype.thinsp = entities.decodeHTML("&thinsp;");
    HtmlGenerator.prototype.hyphen = entities.decodeHTML("&hyphen;");
    HtmlGenerator.prototype.minus = entities.decodeHTML("&minus;");
    HtmlGenerator.prototype.endash = entities.decodeHTML("&ndash;");
    HtmlGenerator.prototype.emdash = entities.decodeHTML("&mdash;");
    HtmlGenerator.prototype.part = "part";
    HtmlGenerator.prototype.chapter = "h1";
    HtmlGenerator.prototype.section = "h2";
    HtmlGenerator.prototype.subsection = "h3";
    HtmlGenerator.prototype.subsubsection = "h4";
    HtmlGenerator.prototype.subparagraph = "h6";
    HtmlGenerator.prototype.paragraph = "p";
    HtmlGenerator.prototype.unorderedList = "ul";
    HtmlGenerator.prototype.orderedList = "ol";
    HtmlGenerator.prototype.listitem = "li";
    HtmlGenerator.prototype.descriptionList = "dl";
    HtmlGenerator.prototype.term = "dt";
    HtmlGenerator.prototype.description = "dd";
    HtmlGenerator.prototype.emph = "em";
    HtmlGenerator.prototype.linebreak = "br";
    HtmlGenerator.prototype.inlineBlock = "span";
    HtmlGenerator.prototype.block = "div";
    HtmlGenerator.prototype._isPhrasingContent = function (el) {};
    ligatures = new Map([['ff', '\uFB00'], ['ffi', '\uFB03'], ['ffl', '\uFB04'], ['fi', '\uFB01'], ['fl', '\uFB02'], ['!´', '\xA1'], ['?´', '\xBF'], ['<<', '\xAB'], ['>>', '\xBB']]);
    symbols = new Map([['nobreakspace', entities.decodeHTML('&nbsp;')], ['thinspace', entities.decodeHTML('&thinsp;')], ['enspace', entities.decodeHTML('&ensp;')], ['enskip', entities.decodeHTML('&ensp;')], ['quad', entities.decodeHTML('&emsp;')], ['qquad', entities.decodeHTML('&emsp;&emsp;')], ['textvisiblespace', '\u2423'], ['slash', '/'], ['textasciicircum', '^'], ['textless', '<'], ['textgreater', '>'], ['textasciitilde', '˜'], ['textbackslash', '∖'], ['textbraceleft', '{'], ['textbraceright', '}'], ['textdollar', '$'], ['textunderscore', '_'], ['textquoteleft', entities.decodeHTML('&lsquo;')], ['textquoteright', entities.decodeHTML('&rsquo;')], ['textquotedbl', entities.decodeHTML('&quot;')], ['textquotedblleft', entities.decodeHTML('&ldquo;')], ['textquotedblright', entities.decodeHTML('&rdquo;')], ['quotesinglbase', entities.decodeHTML('&sbquo;')], ['quotedblbase', entities.decodeHTML('&bdquo;')], ['guillemotleft', entities.decodeHTML('&laquo;')], ['guillemotright', entities.decodeHTML('&raquo;')], ['guilsinglleft', entities.decodeHTML('&lsaquo;')], ['guilsinglright', entities.decodeHTML('&rsaquo;')], ['textellipsis', entities.decodeHTML('&hellip;')], ['dots', entities.decodeHTML('&hellip;')], ['textbullet', entities.decodeHTML('&bull;')], ['textemdash', '\u2013'], ['textendash', '\u2014'], ['textdagger', '\u2020'], ['dag', '\u2020'], ['textdaggerdbl', '\u2021'], ['ddag', '\u2021'], ['textperiodcentered', entities.decodeHTML('&middot;')], ['textexclamdown', entities.decodeHTML('&iexcl;')], ['textquestiondown', entities.decodeHTML('&iquest;')], ['textsection', entities.decodeHTML('&sect;')], ['S', entities.decodeHTML('&sect;')], ['textparagraph', entities.decodeHTML('&para;')], ['P', entities.decodeHTML('&para;')], ['checkmark', '\u2713'], ['textordfeminine', entities.decodeHTML('&ordf;')], ['textordmasculine', entities.decodeHTML('&ordm;')], ['textbar', '|'], ['textbardbl', '\u2016'], ['textbigcircle', '\u25CB'], ['textcopyright', entities.decodeHTML('&copy;')], ['copyright', entities.decodeHTML('&copy;')], ['textregistered', entities.decodeHTML('&reg;')], ['texttrademark', entities.decodeHTML('&trade;')], ['textdegree', entities.decodeHTML('&deg;')], ['degree', entities.decodeHTML('&deg;')], ['textcelsius', '\u2103'], ['celsius', '\u2103'], ['textperthousand', entities.decodeHTML('&permil;')], ['perthousand', entities.decodeHTML('&permil;')], ['textpertenthousand', '\u2031'], ['textonehalf', entities.decodeHTML('&frac12;')], ['textthreequarters', entities.decodeHTML('&frac34;')], ['textonequarter', entities.decodeHTML('&frac14;')], ['textfractionsolidus', entities.decodeHTML('&frasl;')], ['textdiv', entities.decodeHTML('&divide;')], ['texttimes', entities.decodeHTML('&times;')], ['textminus', entities.decodeHTML('&minus;')], ['textpm', entities.decodeHTML('&plusmn;')], ['textsurd', entities.decodeHTML('&radic;')], ['textlnot', entities.decodeHTML('&not;')], ['textasteriskcentered', entities.decodeHTML('&lowast;')], ['textonesuperior', entities.decodeHTML('&sup1;')], ['texttwosuperior', entities.decodeHTML('&sup2;')], ['textthreesuperior', entities.decodeHTML('&sup3;')], ['textzerooldstyle', '\uF730'], ['textoneoldstyle', '\uF731'], ['texttwooldstyle', '\uF732'], ['textthreeoldstyle', '\uF733'], ['textfouroldstyle', '\uF734'], ['textfiveoldstyle', '\uF735'], ['textsixoldstyle', '\uF736'], ['textsevenoldstyle', '\uF737'], ['texteightoldstyle', '\uF738'], ['textnineoldstyle', '\uF739'], ['texteuro', entities.decodeHTML('&euro;')], ['textcent', entities.decodeHTML('&cent;')], ['textsterling', entities.decodeHTML('&pound;')], ['pounds', entities.decodeHTML('&pound;')], ['textalpha', entities.decodeHTML('&alpha;')], ['textbeta', entities.decodeHTML('&beta;')], ['textgamma', entities.decodeHTML('&gamma;')], ['textdelta', entities.decodeHTML('&delta;')], ['textepsilon', entities.decodeHTML('&epsilon;')], ['textzeta', entities.decodeHTML('&zeta;')], ['texteta', entities.decodeHTML('&eta;')], ['texttheta', entities.decodeHTML('&thetasym;')], ['textiota', entities.decodeHTML('&iota;')], ['textkappa', entities.decodeHTML('&kappa;')], ['textlambda', entities.decodeHTML('&lambda;')], ['textmu', entities.decodeHTML('&mu;')], ['textnu', entities.decodeHTML('&nu;')], ['textxi', entities.decodeHTML('&xi;')], ['textomikron', entities.decodeHTML('&omicron;')], ['textpi', entities.decodeHTML('&pi;')], ['textrho', entities.decodeHTML('&rho;')], ['textsigma', entities.decodeHTML('&sigma;')], ['texttau', entities.decodeHTML('&tau;')], ['textupsilon', entities.decodeHTML('&upsilon;')], ['textphi', entities.decodeHTML('&phi;')], ['textchi', entities.decodeHTML('&chi;')], ['textpsi', entities.decodeHTML('&psi;')], ['textomega', entities.decodeHTML('&omega;')], ['textAlpha', entities.decodeHTML('&Alpha;')], ['textBeta', entities.decodeHTML('&Beta;')], ['textGamma', entities.decodeHTML('&Gamma;')], ['textDelta', entities.decodeHTML('&Delta;')], ['textEpsilon', entities.decodeHTML('&Epsilon;')], ['textZeta', entities.decodeHTML('&Zeta;')], ['textEta', entities.decodeHTML('&Eta;')], ['textTheta', entities.decodeHTML('&Theta;')], ['textIota', entities.decodeHTML('&Iota;')], ['textKappa', entities.decodeHTML('&Kappa;')], ['textLambda', entities.decodeHTML('&Lambda;')], ['textMu', entities.decodeHTML('&Mu;')], ['textNu', entities.decodeHTML('&Nu;')], ['textXi', entities.decodeHTML('&Xi;')], ['textOmikron', entities.decodeHTML('&Omicron;')], ['textPi', entities.decodeHTML('&Pi;')], ['textRho', entities.decodeHTML('&Rho;')], ['textSigma', entities.decodeHTML('&Sigma;')], ['textTau', entities.decodeHTML('&Tau;')], ['textUpsilon', entities.decodeHTML('&Upsilon;')], ['textPhi', entities.decodeHTML('&Phi;')], ['textChi', entities.decodeHTML('&Chi;')], ['textPsi', entities.decodeHTML('&Psi;')], ['textOmega', entities.decodeHTML('&Omega;')]]);
    HtmlGenerator.prototype._macros = null;
    HtmlGenerator.prototype._dom = null;
    HtmlGenerator.prototype._attrs = null;
    HtmlGenerator.prototype._groups = null;
    HtmlGenerator.prototype._continue = false;
    function HtmlGenerator() {
      this._dom = document.createDocumentFragment();
      this._attrs = [{}];
      this._groups = [];
      this._macros = new Macros(this);
    }
    HtmlGenerator.prototype._serializeFragment = function (f) {
      var c;
      c = document.createElement("container");
      c.appendChild(f.cloneNode(true));
      return c.innerHTML;
    };
    HtmlGenerator.prototype.character = function (c) {
      return c;
    };
    HtmlGenerator.prototype.ligature = function (l) {
      return ligatures.get(l);
    };
    HtmlGenerator.prototype.controlSymbol = function (c) {
      switch (c) {
        case ' ':
        case '\n':
        case '\r':
        case '\t':
          return this.brsp;
        case ',':
          return this.thinsp;
        case '-':
          break;
        default:
          return this.character(c);
      }
    };
    /* @return the DOM representation (DocumentFrament) for immediate use */
    HtmlGenerator.prototype.dom = function () {
      return this._dom;
    };
    /* @return the HTML representation */
    HtmlGenerator.prototype.html = function () {
      return this._serializeFragment(this._dom);
    };
    HtmlGenerator.prototype.createDocument = function (fs) {
      this._appendChildrenTo(fs, this._dom);
    };
    HtmlGenerator.prototype.create = function (type, children) {
      var el, classes;
      el = document.createElement(type);
      classes = "";
      if (type === this.paragraph) {
        classes += this._blockAttributes();
      }
      if (this._continue) {
        classes += " continue";
        this._continue = false;
      }
      if (classes.trim()) {
        el.setAttribute("class", classes.trim());
      }
      return this._appendChildrenTo(children, el);
    };
    HtmlGenerator.prototype.createText = function (t) {
      if (!t) {
        return;
      }
      return this._wrapWithAttributes(document.createTextNode(t));
    };
    HtmlGenerator.prototype.createFragment = function (children) {
      var f;
      if (!children || !children.length) {
        return;
      }
      f = document.createDocumentFragment();
      return this._appendChildrenTo(children, f);
    };
    HtmlGenerator.prototype.createVSpaceSkip = function (skip) {
      var span;
      span = document.createElement("span");
      span.setAttribute("class", "vspace " + skip);
      return span;
    };
    HtmlGenerator.prototype.createVSpaceSkipInline = function (skip) {
      var span;
      span = document.createElement("span");
      span.setAttribute("class", "vspace-inline " + skip);
      return span;
    };
    HtmlGenerator.prototype.createVSpace = function (length) {
      var span;
      span = document.createElement("span");
      span.setAttribute("class", "vspace");
      span.setAttribute("style", "margin-bottom:" + length);
      return span;
    };
    HtmlGenerator.prototype.createVSpaceInline = function (length) {
      var span;
      span = document.createElement("span");
      span.setAttribute("class", "vspace-inline");
      span.setAttribute("style", "margin-bottom:" + length);
      return span;
    };
    HtmlGenerator.prototype.createBreakSpace = function (length) {
      var span;
      span = document.createElement("span");
      span.setAttribute("class", "breakspace");
      span.setAttribute("style", "margin-bottom:" + length);
      return span;
    };
    HtmlGenerator.prototype.createHSpace = function (length) {
      var span;
      span = document.createElement("span");
      span.setAttribute("style", "margin-right:" + length);
      return span;
    };
    HtmlGenerator.prototype.parseMath = function (math, display) {
      var f;
      f = document.createDocumentFragment();
      katex['default'].render(math, f, {
        displayMode: !!display,
        throwOnError: false
      });
      return f;
    };
    HtmlGenerator.prototype.hasSymbol = function (name) {
      return symbols.has(name);
    };
    HtmlGenerator.prototype.getSymbol = function (name) {
      return symbols.get(name);
    };
    HtmlGenerator.prototype.hasMacro = function (name) {
      return typeof this._macros[name] === "function";
    };
    HtmlGenerator.prototype.processMacro = function (name, starred, args) {
      return this._macros[name](args);
    };
    HtmlGenerator.prototype.enterGroup = function () {
      this._attrs.push(Object.assign({}, this._attrs.top));
      ++this._groups[this._groups.length - 1];
    };
    HtmlGenerator.prototype.exitGroup = function () {
      this._attrs.pop();
      return --this._groups[this._groups.length - 1] >= 0;
    };
    HtmlGenerator.prototype.startBalanced = function () {
      this._groups.push(0);
    };
    HtmlGenerator.prototype.endBalanced = function () {
      return this._groups.pop() === 0;
    };
    HtmlGenerator.prototype.isBalanced = function () {
      return this._groups[this._groups.length - 1] === 0;
    };
    HtmlGenerator.prototype['continue'] = function () {
      this._continue = true;
    };
    HtmlGenerator.prototype['break'] = function () {
      this._continue = false;
    };
    HtmlGenerator.prototype.setFontFamily = function (family) {
      this._attrs.top.fontFamily = family;
    };
    HtmlGenerator.prototype.setFontWeight = function (weight) {
      this._attrs.top.fontWeight = weight;
    };
    HtmlGenerator.prototype.setFontShape = function (shape) {
      this._attrs.top.fontShape = shape;
    };
    HtmlGenerator.prototype.setFontSize = function (size) {
      this._attrs.top.fontSize = size;
    };
    HtmlGenerator.prototype.setAlignment = function (align) {
      this._attrs.top.align = align;
    };
    HtmlGenerator.prototype._inlineAttributes = function () {
      var cur;
      cur = this._attrs.top;
      return [cur.fontFamily, cur.fontWeight, cur.fontShape, cur.fontSize].join(" ").trim();
    };
    HtmlGenerator.prototype._blockAttributes = function () {
      return [this._attrs.top.align].join(" ".trim());
    };
    HtmlGenerator.prototype._appendChildrenTo = function (children, parent) {
      var i$, to$, yet$, i, e;
      if (children) {
        for (yet$ = true, i$ = 0, to$ = children.length; i$ <= to$; ++i$) {
          i = i$;
          yet$ = false;
          try {
            if (children[i] != null) {
              parent.appendChild(children[i]);
            }
          } catch (e$) {
            e = e$;
            console.log(e);
            console.trace();
            this.debugNodes(children);
          }
        }if (yet$) {
          parent.appendChild(children);
        }
      }
      return parent;
    };
    HtmlGenerator.prototype._wrapWithAttributes = function (el, attrs) {
      var span;
      if (!attrs) {
        attrs = this._inlineAttributes();
      }
      if (attrs) {
        span = document.createElement("span");
        span.setAttribute("class", attrs);
        span.appendChild(el);
        return span;
      }
      return el;
    };
    HtmlGenerator.prototype._addBlockAttributes = function (el) {
      var attr;
      attr = this._blockAttributes();
      if (!attr) {
        return;
      }
      if (el.hasAttribute("class")) {
        attr += " " + el.getAttribute("class");
      }
      return el.setAttribute("class", attr);
    };
    HtmlGenerator.prototype.debugDOM = function (oParent, oCallback) {
      var oNode;
      if (oParent.hasChildNodes()) {
        oNode = oParent.firstChild;
        for (; oNode; oNode = oNode.nextSibling) {
          DOMComb(oNode, oCallback);
        }
      }
      oCallback.call(oParent);
    };
    HtmlGenerator.prototype.debugNode = function (n) {
      if (!n) {
        return;
      }
      if (typeof n.nodeName !== "undefined") {
        console.log(n.nodeName, ": ", n.textContent);
      } else {
        console.log("not a node: ", n);
      }
    };
    HtmlGenerator.prototype.debugNodes = function (l) {
      var i$, len$, n;
      for (i$ = 0, len$ = l.length; i$ < len$; ++i$) {
        n = l[i$];
        this.debugNode(n);
      }
    };
    HtmlGenerator.prototype.debugNodeContent = function () {
      if (this.nodeValue) {
        console.log(this.nodeValue);
      }
    };
    return HtmlGenerator;
  }();
}).call(undefined);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = domino;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var encode = __webpack_require__(8),
    decode = __webpack_require__(9);

exports.decode = function (data, level) {
	return (!level || level <= 0 ? decode.XML : decode.HTML)(data);
};

exports.decodeStrict = function (data, level) {
	return (!level || level <= 0 ? decode.XML : decode.HTMLStrict)(data);
};

exports.encode = function (data, level) {
	return (!level || level <= 0 ? encode.XML : encode.HTML)(data);
};

exports.encodeXML = encode.XML;

exports.encodeHTML4 = exports.encodeHTML5 = exports.encodeHTML = encode.HTML;

exports.decodeXML = exports.decodeXMLStrict = decode.XML;

exports.decodeHTML4 = exports.decodeHTML5 = exports.decodeHTML = decode.HTML;

exports.decodeHTML4Strict = exports.decodeHTML5Strict = exports.decodeHTMLStrict = decode.HTMLStrict;

exports.escape = encode.escape;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inverseXML = getInverseObj(__webpack_require__(1)),
    xmlReplacer = getInverseReplacer(inverseXML);

exports.XML = getInverse(inverseXML, xmlReplacer);

var inverseHTML = getInverseObj(__webpack_require__(2)),
    htmlReplacer = getInverseReplacer(inverseHTML);

exports.HTML = getInverse(inverseHTML, htmlReplacer);

function getInverseObj(obj) {
	return Object.keys(obj).sort().reduce(function (inverse, name) {
		inverse[obj[name]] = "&" + name + ";";
		return inverse;
	}, {});
}

function getInverseReplacer(inverse) {
	var single = [],
	    multiple = [];

	Object.keys(inverse).forEach(function (k) {
		if (k.length === 1) {
			single.push("\\" + k);
		} else {
			multiple.push(k);
		}
	});

	//TODO add ranges
	multiple.unshift("[" + single.join("") + "]");

	return new RegExp(multiple.join("|"), "g");
}

var re_nonASCII = /[^\0-\x7F]/g,
    re_astralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

function singleCharReplacer(c) {
	return "&#x" + c.charCodeAt(0).toString(16).toUpperCase() + ";";
}

function astralReplacer(c) {
	// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	var high = c.charCodeAt(0);
	var low = c.charCodeAt(1);
	var codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;
	return "&#x" + codePoint.toString(16).toUpperCase() + ";";
}

function getInverse(inverse, re) {
	function func(name) {
		return inverse[name];
	}

	return function (data) {
		return data.replace(re, func).replace(re_astralSymbols, astralReplacer).replace(re_nonASCII, singleCharReplacer);
	};
}

var re_xmlChars = getInverseReplacer(inverseXML);

function escapeXML(data) {
	return data.replace(re_xmlChars, singleCharReplacer).replace(re_astralSymbols, astralReplacer).replace(re_nonASCII, singleCharReplacer);
}

exports.escape = escapeXML;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var entityMap = __webpack_require__(2),
    legacyMap = __webpack_require__(10),
    xmlMap = __webpack_require__(1),
    decodeCodePoint = __webpack_require__(11);

var decodeXMLStrict = getStrictDecoder(xmlMap),
    decodeHTMLStrict = getStrictDecoder(entityMap);

function getStrictDecoder(map) {
	var keys = Object.keys(map).join("|"),
	    replace = getReplacer(map);

	keys += "|#[xX][\\da-fA-F]+|#\\d+";

	var re = new RegExp("&(?:" + keys + ");", "g");

	return function (str) {
		return String(str).replace(re, replace);
	};
}

var decodeHTML = function () {
	var legacy = Object.keys(legacyMap).sort(sorter);

	var keys = Object.keys(entityMap).sort(sorter);

	for (var i = 0, j = 0; i < keys.length; i++) {
		if (legacy[j] === keys[i]) {
			keys[i] += ";?";
			j++;
		} else {
			keys[i] += ";";
		}
	}

	var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"),
	    replace = getReplacer(entityMap);

	function replacer(str) {
		if (str.substr(-1) !== ";") str += ";";
		return replace(str);
	}

	//TODO consider creating a merged map
	return function (str) {
		return String(str).replace(re, replacer);
	};
}();

function sorter(a, b) {
	return a < b ? 1 : -1;
}

function getReplacer(map) {
	return function replace(str) {
		if (str.charAt(1) === "#") {
			if (str.charAt(2) === "X" || str.charAt(2) === "x") {
				return decodeCodePoint(parseInt(str.substr(3), 16));
			}
			return decodeCodePoint(parseInt(str.substr(2), 10));
		}
		return map[str.slice(1, -1)];
	};
}

module.exports = {
	XML: decodeXMLStrict,
	HTML: decodeHTML,
	HTMLStrict: decodeHTMLStrict
};

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = {"Aacute":"Á","aacute":"á","Acirc":"Â","acirc":"â","acute":"´","AElig":"Æ","aelig":"æ","Agrave":"À","agrave":"à","amp":"&","AMP":"&","Aring":"Å","aring":"å","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","brvbar":"¦","Ccedil":"Ç","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","COPY":"©","curren":"¤","deg":"°","divide":"÷","Eacute":"É","eacute":"é","Ecirc":"Ê","ecirc":"ê","Egrave":"È","egrave":"è","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","GT":">","Iacute":"Í","iacute":"í","Icirc":"Î","icirc":"î","iexcl":"¡","Igrave":"Ì","igrave":"ì","iquest":"¿","Iuml":"Ï","iuml":"ï","laquo":"«","lt":"<","LT":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","Ntilde":"Ñ","ntilde":"ñ","Oacute":"Ó","oacute":"ó","Ocirc":"Ô","ocirc":"ô","Ograve":"Ò","ograve":"ò","ordf":"ª","ordm":"º","Oslash":"Ø","oslash":"ø","Otilde":"Õ","otilde":"õ","Ouml":"Ö","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\"","QUOT":"\"","raquo":"»","reg":"®","REG":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","THORN":"Þ","thorn":"þ","times":"×","Uacute":"Ú","uacute":"ú","Ucirc":"Û","ucirc":"û","Ugrave":"Ù","ugrave":"ù","uml":"¨","Uuml":"Ü","uuml":"ü","Yacute":"Ý","yacute":"ý","yen":"¥","yuml":"ÿ"}

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var decodeMap = __webpack_require__(12);

module.exports = decodeCodePoint;

// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
function decodeCodePoint(codePoint) {

	if (codePoint >= 0xD800 && codePoint <= 0xDFFF || codePoint > 0x10FFFF) {
		return "\uFFFD";
	}

	if (codePoint in decodeMap) {
		codePoint = decodeMap[codePoint];
	}

	var output = "";

	if (codePoint > 0xFFFF) {
		codePoint -= 0x10000;
		output += String.fromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);
		codePoint = 0xDC00 | codePoint & 0x3FF;
	}

	output += String.fromCharCode(codePoint);
	return output;
}

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = {"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (f) {
    if (( false ? "undefined" : _typeof(exports)) === "object" && typeof module !== "undefined") {
        module.exports = f();
    } else if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (f),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        var g;if (typeof window !== "undefined") {
            g = window;
        } else if (typeof global !== "undefined") {
            g = global;
        } else if (typeof self !== "undefined") {
            g = self;
        } else {
            g = this;
        }g.katex = f();
    }
})(function () {
    var define, module, exports;return function e(t, n, r) {
        function s(o, u) {
            if (!n[o]) {
                if (!t[o]) {
                    var a = typeof require == "function" && require;if (!u && a) return require(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;
                }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
                    var n = t[o][1][e];return s(n ? n : e);
                }, l, l.exports, e, t, n, r);
            }return n[o].exports;
        }var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) {
            s(r[o]);
        }return s;
    }({ 1: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _ParseError = require("./src/ParseError");

            var _ParseError2 = _interopRequireDefault(_ParseError);

            var _Settings = require("./src/Settings");

            var _Settings2 = _interopRequireDefault(_Settings);

            var _buildTree = require("./src/buildTree");

            var _buildTree2 = _interopRequireDefault(_buildTree);

            var _parseTree = require("./src/parseTree");

            var _parseTree2 = _interopRequireDefault(_parseTree);

            var _utils = require("./src/utils");

            var _utils2 = _interopRequireDefault(_utils);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * Parse and build an expression, and place that expression in the DOM node
             * given.
             */
            var render = function render(expression, baseNode, options) {
                _utils2.default.clearNode(baseNode);

                var settings = new _Settings2.default(options);

                var tree = (0, _parseTree2.default)(expression, settings);
                var node = (0, _buildTree2.default)(tree, expression, settings).toNode();

                baseNode.appendChild(node);
            };

            // KaTeX's styles don't work properly in quirks mode. Print out an error, and
            // disable rendering.
            /* eslint no-console:0 */
            /**
             * This is the main entry point for KaTeX. Here, we expose functions for
             * rendering expressions either to DOM nodes or to markup strings.
             *
             * We also expose the ParseError class to check if errors thrown from KaTeX are
             * errors in the expression, or errors in javascript handling.
             */

            if (typeof document !== "undefined") {
                if (document.compatMode !== "CSS1Compat") {
                    typeof console !== "undefined" && console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your " + "website has a suitable doctype.");

                    render = function render() {
                        throw new _ParseError2.default("KaTeX doesn't work in quirks mode.");
                    };
                }
            }

            /**
             * Parse and build an expression, and return the markup for that.
             */
            var renderToString = function renderToString(expression, options) {
                var settings = new _Settings2.default(options);

                var tree = (0, _parseTree2.default)(expression, settings);
                return (0, _buildTree2.default)(tree, expression, settings).toMarkup();
            };

            /**
             * Parse an expression and return the parse tree.
             */
            var generateParseTree = function generateParseTree(expression, options) {
                var settings = new _Settings2.default(options);
                return (0, _parseTree2.default)(expression, settings);
            };

            var katex = {
                render: render,
                renderToString: renderToString,
                /**
                 * NOTE: This method is not currently recommended for public use.
                 * The internal tree representation is unstable and is very likely
                 * to change. Use at your own risk.
                 */
                __parse: generateParseTree,
                ParseError: _ParseError2.default
            };

            exports.default = katex;
        }, { "./src/ParseError": 84, "./src/Settings": 87, "./src/buildTree": 94, "./src/parseTree": 109, "./src/utils": 115 }], 2: [function (require, module, exports) {
            module.exports = { "default": require("core-js/library/fn/array/from"), __esModule: true };
        }, { "core-js/library/fn/array/from": 12 }], 3: [function (require, module, exports) {
            module.exports = { "default": require("core-js/library/fn/get-iterator"), __esModule: true };
        }, { "core-js/library/fn/get-iterator": 13 }], 4: [function (require, module, exports) {
            module.exports = { "default": require("core-js/library/fn/is-iterable"), __esModule: true };
        }, { "core-js/library/fn/is-iterable": 14 }], 5: [function (require, module, exports) {
            module.exports = { "default": require("core-js/library/fn/json/stringify"), __esModule: true };
        }, { "core-js/library/fn/json/stringify": 15 }], 6: [function (require, module, exports) {
            module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
        }, { "core-js/library/fn/object/define-property": 16 }], 7: [function (require, module, exports) {
            module.exports = { "default": require("core-js/library/fn/object/freeze"), __esModule: true };
        }, { "core-js/library/fn/object/freeze": 17 }], 8: [function (require, module, exports) {
            "use strict";

            exports.__esModule = true;

            exports.default = function (instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            };
        }, {}], 9: [function (require, module, exports) {
            "use strict";

            exports.__esModule = true;

            var _defineProperty = require("../core-js/object/define-property");

            var _defineProperty2 = _interopRequireDefault(_defineProperty);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            exports.default = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        (0, _defineProperty2.default)(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();
        }, { "../core-js/object/define-property": 6 }], 10: [function (require, module, exports) {
            "use strict";

            exports.__esModule = true;

            var _isIterable2 = require("../core-js/is-iterable");

            var _isIterable3 = _interopRequireDefault(_isIterable2);

            var _getIterator2 = require("../core-js/get-iterator");

            var _getIterator3 = _interopRequireDefault(_getIterator2);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            exports.default = function () {
                function sliceIterator(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;

                    try {
                        for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
                            _arr.push(_s.value);

                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally {
                        try {
                            if (!_n && _i["return"]) _i["return"]();
                        } finally {
                            if (_d) throw _e;
                        }
                    }

                    return _arr;
                }

                return function (arr, i) {
                    if (Array.isArray(arr)) {
                        return arr;
                    } else if ((0, _isIterable3.default)(Object(arr))) {
                        return sliceIterator(arr, i);
                    } else {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    }
                };
            }();
        }, { "../core-js/get-iterator": 3, "../core-js/is-iterable": 4 }], 11: [function (require, module, exports) {
            "use strict";

            exports.__esModule = true;

            var _from = require("../core-js/array/from");

            var _from2 = _interopRequireDefault(_from);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            exports.default = function (arr) {
                if (Array.isArray(arr)) {
                    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                        arr2[i] = arr[i];
                    }

                    return arr2;
                } else {
                    return (0, _from2.default)(arr);
                }
            };
        }, { "../core-js/array/from": 2 }], 12: [function (require, module, exports) {
            require('../../modules/es6.string.iterator');
            require('../../modules/es6.array.from');
            module.exports = require('../../modules/_core').Array.from;
        }, { "../../modules/_core": 24, "../../modules/es6.array.from": 73, "../../modules/es6.string.iterator": 77 }], 13: [function (require, module, exports) {
            require('../modules/web.dom.iterable');
            require('../modules/es6.string.iterator');
            module.exports = require('../modules/core.get-iterator');
        }, { "../modules/core.get-iterator": 71, "../modules/es6.string.iterator": 77, "../modules/web.dom.iterable": 78 }], 14: [function (require, module, exports) {
            require('../modules/web.dom.iterable');
            require('../modules/es6.string.iterator');
            module.exports = require('../modules/core.is-iterable');
        }, { "../modules/core.is-iterable": 72, "../modules/es6.string.iterator": 77, "../modules/web.dom.iterable": 78 }], 15: [function (require, module, exports) {
            var core = require('../../modules/_core');
            var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
            module.exports = function stringify(it) {
                // eslint-disable-line no-unused-vars
                return $JSON.stringify.apply($JSON, arguments);
            };
        }, { "../../modules/_core": 24 }], 16: [function (require, module, exports) {
            require('../../modules/es6.object.define-property');
            var $Object = require('../../modules/_core').Object;
            module.exports = function defineProperty(it, key, desc) {
                return $Object.defineProperty(it, key, desc);
            };
        }, { "../../modules/_core": 24, "../../modules/es6.object.define-property": 75 }], 17: [function (require, module, exports) {
            require('../../modules/es6.object.freeze');
            module.exports = require('../../modules/_core').Object.freeze;
        }, { "../../modules/_core": 24, "../../modules/es6.object.freeze": 76 }], 18: [function (require, module, exports) {
            module.exports = function (it) {
                if (typeof it != 'function') throw TypeError(it + ' is not a function!');
                return it;
            };
        }, {}], 19: [function (require, module, exports) {
            module.exports = function () {/* empty */};
        }, {}], 20: [function (require, module, exports) {
            var isObject = require('./_is-object');
            module.exports = function (it) {
                if (!isObject(it)) throw TypeError(it + ' is not an object!');
                return it;
            };
        }, { "./_is-object": 40 }], 21: [function (require, module, exports) {
            // false -> Array#indexOf
            // true  -> Array#includes
            var toIObject = require('./_to-iobject');
            var toLength = require('./_to-length');
            var toAbsoluteIndex = require('./_to-absolute-index');
            module.exports = function (IS_INCLUDES) {
                return function ($this, el, fromIndex) {
                    var O = toIObject($this);
                    var length = toLength(O.length);
                    var index = toAbsoluteIndex(fromIndex, length);
                    var value;
                    // Array#includes uses SameValueZero equality algorithm
                    // eslint-disable-next-line no-self-compare
                    if (IS_INCLUDES && el != el) while (length > index) {
                        value = O[index++];
                        // eslint-disable-next-line no-self-compare
                        if (value != value) return true;
                        // Array#indexOf ignores holes, Array#includes - not
                    } else for (; length > index; index++) {
                        if (IS_INCLUDES || index in O) {
                            if (O[index] === el) return IS_INCLUDES || index || 0;
                        }
                    }return !IS_INCLUDES && -1;
                };
            };
        }, { "./_to-absolute-index": 62, "./_to-iobject": 64, "./_to-length": 65 }], 22: [function (require, module, exports) {
            // getting tag from 19.1.3.6 Object.prototype.toString()
            var cof = require('./_cof');
            var TAG = require('./_wks')('toStringTag');
            // ES3 wrong here
            var ARG = cof(function () {
                return arguments;
            }()) == 'Arguments';

            // fallback for IE11 Script Access Denied error
            var tryGet = function tryGet(it, key) {
                try {
                    return it[key];
                } catch (e) {/* empty */}
            };

            module.exports = function (it) {
                var O, T, B;
                return it === undefined ? 'Undefined' : it === null ? 'Null'
                // @@toStringTag case
                : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
                // builtinTag case
                : ARG ? cof(O)
                // ES3 arguments fallback
                : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
            };
        }, { "./_cof": 23, "./_wks": 69 }], 23: [function (require, module, exports) {
            var toString = {}.toString;

            module.exports = function (it) {
                return toString.call(it).slice(8, -1);
            };
        }, {}], 24: [function (require, module, exports) {
            var core = module.exports = { version: '2.5.1' };
            if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
        }, {}], 25: [function (require, module, exports) {
            'use strict';

            var $defineProperty = require('./_object-dp');
            var createDesc = require('./_property-desc');

            module.exports = function (object, index, value) {
                if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
            };
        }, { "./_object-dp": 50, "./_property-desc": 56 }], 26: [function (require, module, exports) {
            // optional / simple context binding
            var aFunction = require('./_a-function');
            module.exports = function (fn, that, length) {
                aFunction(fn);
                if (that === undefined) return fn;
                switch (length) {
                    case 1:
                        return function (a) {
                            return fn.call(that, a);
                        };
                    case 2:
                        return function (a, b) {
                            return fn.call(that, a, b);
                        };
                    case 3:
                        return function (a, b, c) {
                            return fn.call(that, a, b, c);
                        };
                }
                return function () /* ...args */{
                    return fn.apply(that, arguments);
                };
            };
        }, { "./_a-function": 18 }], 27: [function (require, module, exports) {
            // 7.2.1 RequireObjectCoercible(argument)
            module.exports = function (it) {
                if (it == undefined) throw TypeError("Can't call method on  " + it);
                return it;
            };
        }, {}], 28: [function (require, module, exports) {
            // Thank's IE8 for his funny defineProperty
            module.exports = !require('./_fails')(function () {
                return Object.defineProperty({}, 'a', { get: function get() {
                        return 7;
                    } }).a != 7;
            });
        }, { "./_fails": 32 }], 29: [function (require, module, exports) {
            var isObject = require('./_is-object');
            var document = require('./_global').document;
            // typeof document.createElement is 'object' in old IE
            var is = isObject(document) && isObject(document.createElement);
            module.exports = function (it) {
                return is ? document.createElement(it) : {};
            };
        }, { "./_global": 33, "./_is-object": 40 }], 30: [function (require, module, exports) {
            // IE 8- don't enum bug keys
            module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
        }, {}], 31: [function (require, module, exports) {
            var global = require('./_global');
            var core = require('./_core');
            var ctx = require('./_ctx');
            var hide = require('./_hide');
            var PROTOTYPE = 'prototype';

            var $export = function $export(type, name, source) {
                var IS_FORCED = type & $export.F;
                var IS_GLOBAL = type & $export.G;
                var IS_STATIC = type & $export.S;
                var IS_PROTO = type & $export.P;
                var IS_BIND = type & $export.B;
                var IS_WRAP = type & $export.W;
                var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
                var expProto = exports[PROTOTYPE];
                var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
                var key, own, out;
                if (IS_GLOBAL) source = name;
                for (key in source) {
                    // contains in native
                    own = !IS_FORCED && target && target[key] !== undefined;
                    if (own && key in exports) continue;
                    // export native or passed
                    out = own ? target[key] : source[key];
                    // prevent global pollution for namespaces
                    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
                    // bind timers to global for call from export context
                    : IS_BIND && own ? ctx(out, global)
                    // wrap global constructors for prevent change them in library
                    : IS_WRAP && target[key] == out ? function (C) {
                        var F = function F(a, b, c) {
                            if (this instanceof C) {
                                switch (arguments.length) {
                                    case 0:
                                        return new C();
                                    case 1:
                                        return new C(a);
                                    case 2:
                                        return new C(a, b);
                                }return new C(a, b, c);
                            }return C.apply(this, arguments);
                        };
                        F[PROTOTYPE] = C[PROTOTYPE];
                        return F;
                        // make static versions for prototype methods
                    }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
                    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
                    if (IS_PROTO) {
                        (exports.virtual || (exports.virtual = {}))[key] = out;
                        // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
                        if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
                    }
                }
            };
            // type bitmap
            $export.F = 1; // forced
            $export.G = 2; // global
            $export.S = 4; // static
            $export.P = 8; // proto
            $export.B = 16; // bind
            $export.W = 32; // wrap
            $export.U = 64; // safe
            $export.R = 128; // real proto method for `library`
            module.exports = $export;
        }, { "./_core": 24, "./_ctx": 26, "./_global": 33, "./_hide": 35 }], 32: [function (require, module, exports) {
            module.exports = function (exec) {
                try {
                    return !!exec();
                } catch (e) {
                    return true;
                }
            };
        }, {}], 33: [function (require, module, exports) {
            // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
            var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self
            // eslint-disable-next-line no-new-func
            : Function('return this')();
            if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
        }, {}], 34: [function (require, module, exports) {
            var hasOwnProperty = {}.hasOwnProperty;
            module.exports = function (it, key) {
                return hasOwnProperty.call(it, key);
            };
        }, {}], 35: [function (require, module, exports) {
            var dP = require('./_object-dp');
            var createDesc = require('./_property-desc');
            module.exports = require('./_descriptors') ? function (object, key, value) {
                return dP.f(object, key, createDesc(1, value));
            } : function (object, key, value) {
                object[key] = value;
                return object;
            };
        }, { "./_descriptors": 28, "./_object-dp": 50, "./_property-desc": 56 }], 36: [function (require, module, exports) {
            var document = require('./_global').document;
            module.exports = document && document.documentElement;
        }, { "./_global": 33 }], 37: [function (require, module, exports) {
            module.exports = !require('./_descriptors') && !require('./_fails')(function () {
                return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function get() {
                        return 7;
                    } }).a != 7;
            });
        }, { "./_descriptors": 28, "./_dom-create": 29, "./_fails": 32 }], 38: [function (require, module, exports) {
            // fallback for non-array-like ES3 and non-enumerable old V8 strings
            var cof = require('./_cof');
            // eslint-disable-next-line no-prototype-builtins
            module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
                return cof(it) == 'String' ? it.split('') : Object(it);
            };
        }, { "./_cof": 23 }], 39: [function (require, module, exports) {
            // check on default Array iterator
            var Iterators = require('./_iterators');
            var ITERATOR = require('./_wks')('iterator');
            var ArrayProto = Array.prototype;

            module.exports = function (it) {
                return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
            };
        }, { "./_iterators": 46, "./_wks": 69 }], 40: [function (require, module, exports) {
            module.exports = function (it) {
                return (typeof it === "undefined" ? "undefined" : _typeof(it)) === 'object' ? it !== null : typeof it === 'function';
            };
        }, {}], 41: [function (require, module, exports) {
            // call something on iterator step with safe closing on error
            var anObject = require('./_an-object');
            module.exports = function (iterator, fn, value, entries) {
                try {
                    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
                    // 7.4.6 IteratorClose(iterator, completion)
                } catch (e) {
                    var ret = iterator['return'];
                    if (ret !== undefined) anObject(ret.call(iterator));
                    throw e;
                }
            };
        }, { "./_an-object": 20 }], 42: [function (require, module, exports) {
            'use strict';

            var create = require('./_object-create');
            var descriptor = require('./_property-desc');
            var setToStringTag = require('./_set-to-string-tag');
            var IteratorPrototype = {};

            // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
            require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () {
                return this;
            });

            module.exports = function (Constructor, NAME, next) {
                Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
                setToStringTag(Constructor, NAME + ' Iterator');
            };
        }, { "./_hide": 35, "./_object-create": 49, "./_property-desc": 56, "./_set-to-string-tag": 58, "./_wks": 69 }], 43: [function (require, module, exports) {
            'use strict';

            var LIBRARY = require('./_library');
            var $export = require('./_export');
            var redefine = require('./_redefine');
            var hide = require('./_hide');
            var has = require('./_has');
            var Iterators = require('./_iterators');
            var $iterCreate = require('./_iter-create');
            var setToStringTag = require('./_set-to-string-tag');
            var getPrototypeOf = require('./_object-gpo');
            var ITERATOR = require('./_wks')('iterator');
            var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
            var FF_ITERATOR = '@@iterator';
            var KEYS = 'keys';
            var VALUES = 'values';

            var returnThis = function returnThis() {
                return this;
            };

            module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
                $iterCreate(Constructor, NAME, next);
                var getMethod = function getMethod(kind) {
                    if (!BUGGY && kind in proto) return proto[kind];
                    switch (kind) {
                        case KEYS:
                            return function keys() {
                                return new Constructor(this, kind);
                            };
                        case VALUES:
                            return function values() {
                                return new Constructor(this, kind);
                            };
                    }return function entries() {
                        return new Constructor(this, kind);
                    };
                };
                var TAG = NAME + ' Iterator';
                var DEF_VALUES = DEFAULT == VALUES;
                var VALUES_BUG = false;
                var proto = Base.prototype;
                var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
                var $default = $native || getMethod(DEFAULT);
                var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
                var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
                var methods, key, IteratorPrototype;
                // Fix native
                if ($anyNative) {
                    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
                    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
                        // Set @@toStringTag to native iterators
                        setToStringTag(IteratorPrototype, TAG, true);
                        // fix for some old engines
                        if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
                    }
                }
                // fix Array#{values, @@iterator}.name in V8 / FF
                if (DEF_VALUES && $native && $native.name !== VALUES) {
                    VALUES_BUG = true;
                    $default = function values() {
                        return $native.call(this);
                    };
                }
                // Define iterator
                if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
                    hide(proto, ITERATOR, $default);
                }
                // Plug for library
                Iterators[NAME] = $default;
                Iterators[TAG] = returnThis;
                if (DEFAULT) {
                    methods = {
                        values: DEF_VALUES ? $default : getMethod(VALUES),
                        keys: IS_SET ? $default : getMethod(KEYS),
                        entries: $entries
                    };
                    if (FORCED) for (key in methods) {
                        if (!(key in proto)) redefine(proto, key, methods[key]);
                    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
                }
                return methods;
            };
        }, { "./_export": 31, "./_has": 34, "./_hide": 35, "./_iter-create": 42, "./_iterators": 46, "./_library": 47, "./_object-gpo": 52, "./_redefine": 57, "./_set-to-string-tag": 58, "./_wks": 69 }], 44: [function (require, module, exports) {
            var ITERATOR = require('./_wks')('iterator');
            var SAFE_CLOSING = false;

            try {
                var riter = [7][ITERATOR]();
                riter['return'] = function () {
                    SAFE_CLOSING = true;
                };
                // eslint-disable-next-line no-throw-literal
                Array.from(riter, function () {
                    throw 2;
                });
            } catch (e) {/* empty */}

            module.exports = function (exec, skipClosing) {
                if (!skipClosing && !SAFE_CLOSING) return false;
                var safe = false;
                try {
                    var arr = [7];
                    var iter = arr[ITERATOR]();
                    iter.next = function () {
                        return { done: safe = true };
                    };
                    arr[ITERATOR] = function () {
                        return iter;
                    };
                    exec(arr);
                } catch (e) {/* empty */}
                return safe;
            };
        }, { "./_wks": 69 }], 45: [function (require, module, exports) {
            module.exports = function (done, value) {
                return { value: value, done: !!done };
            };
        }, {}], 46: [function (require, module, exports) {
            module.exports = {};
        }, {}], 47: [function (require, module, exports) {
            module.exports = true;
        }, {}], 48: [function (require, module, exports) {
            var META = require('./_uid')('meta');
            var isObject = require('./_is-object');
            var has = require('./_has');
            var setDesc = require('./_object-dp').f;
            var id = 0;
            var isExtensible = Object.isExtensible || function () {
                return true;
            };
            var FREEZE = !require('./_fails')(function () {
                return isExtensible(Object.preventExtensions({}));
            });
            var setMeta = function setMeta(it) {
                setDesc(it, META, { value: {
                        i: 'O' + ++id, // object ID
                        w: {} // weak collections IDs
                    } });
            };
            var fastKey = function fastKey(it, create) {
                // return primitive with prefix
                if (!isObject(it)) return (typeof it === "undefined" ? "undefined" : _typeof(it)) == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
                if (!has(it, META)) {
                    // can't set metadata to uncaught frozen object
                    if (!isExtensible(it)) return 'F';
                    // not necessary to add metadata
                    if (!create) return 'E';
                    // add missing metadata
                    setMeta(it);
                    // return object ID
                }return it[META].i;
            };
            var getWeak = function getWeak(it, create) {
                if (!has(it, META)) {
                    // can't set metadata to uncaught frozen object
                    if (!isExtensible(it)) return true;
                    // not necessary to add metadata
                    if (!create) return false;
                    // add missing metadata
                    setMeta(it);
                    // return hash weak collections IDs
                }return it[META].w;
            };
            // add metadata on freeze-family methods calling
            var onFreeze = function onFreeze(it) {
                if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
                return it;
            };
            var meta = module.exports = {
                KEY: META,
                NEED: false,
                fastKey: fastKey,
                getWeak: getWeak,
                onFreeze: onFreeze
            };
        }, { "./_fails": 32, "./_has": 34, "./_is-object": 40, "./_object-dp": 50, "./_uid": 68 }], 49: [function (require, module, exports) {
            // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
            var anObject = require('./_an-object');
            var dPs = require('./_object-dps');
            var enumBugKeys = require('./_enum-bug-keys');
            var IE_PROTO = require('./_shared-key')('IE_PROTO');
            var Empty = function Empty() {/* empty */};
            var PROTOTYPE = 'prototype';

            // Create object with fake `null` prototype: use iframe Object with cleared prototype
            var _createDict = function createDict() {
                // Thrash, waste and sodomy: IE GC bug
                var iframe = require('./_dom-create')('iframe');
                var i = enumBugKeys.length;
                var lt = '<';
                var gt = '>';
                var iframeDocument;
                iframe.style.display = 'none';
                require('./_html').appendChild(iframe);
                iframe.src = 'javascript:'; // eslint-disable-line no-script-url
                // createDict = iframe.contentWindow.Object;
                // html.removeChild(iframe);
                iframeDocument = iframe.contentWindow.document;
                iframeDocument.open();
                iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
                iframeDocument.close();
                _createDict = iframeDocument.F;
                while (i--) {
                    delete _createDict[PROTOTYPE][enumBugKeys[i]];
                }return _createDict();
            };

            module.exports = Object.create || function create(O, Properties) {
                var result;
                if (O !== null) {
                    Empty[PROTOTYPE] = anObject(O);
                    result = new Empty();
                    Empty[PROTOTYPE] = null;
                    // add "__proto__" for Object.getPrototypeOf polyfill
                    result[IE_PROTO] = O;
                } else result = _createDict();
                return Properties === undefined ? result : dPs(result, Properties);
            };
        }, { "./_an-object": 20, "./_dom-create": 29, "./_enum-bug-keys": 30, "./_html": 36, "./_object-dps": 51, "./_shared-key": 59 }], 50: [function (require, module, exports) {
            var anObject = require('./_an-object');
            var IE8_DOM_DEFINE = require('./_ie8-dom-define');
            var toPrimitive = require('./_to-primitive');
            var dP = Object.defineProperty;

            exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
                anObject(O);
                P = toPrimitive(P, true);
                anObject(Attributes);
                if (IE8_DOM_DEFINE) try {
                    return dP(O, P, Attributes);
                } catch (e) {/* empty */}
                if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
                if ('value' in Attributes) O[P] = Attributes.value;
                return O;
            };
        }, { "./_an-object": 20, "./_descriptors": 28, "./_ie8-dom-define": 37, "./_to-primitive": 67 }], 51: [function (require, module, exports) {
            var dP = require('./_object-dp');
            var anObject = require('./_an-object');
            var getKeys = require('./_object-keys');

            module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
                anObject(O);
                var keys = getKeys(Properties);
                var length = keys.length;
                var i = 0;
                var P;
                while (length > i) {
                    dP.f(O, P = keys[i++], Properties[P]);
                }return O;
            };
        }, { "./_an-object": 20, "./_descriptors": 28, "./_object-dp": 50, "./_object-keys": 54 }], 52: [function (require, module, exports) {
            // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
            var has = require('./_has');
            var toObject = require('./_to-object');
            var IE_PROTO = require('./_shared-key')('IE_PROTO');
            var ObjectProto = Object.prototype;

            module.exports = Object.getPrototypeOf || function (O) {
                O = toObject(O);
                if (has(O, IE_PROTO)) return O[IE_PROTO];
                if (typeof O.constructor == 'function' && O instanceof O.constructor) {
                    return O.constructor.prototype;
                }return O instanceof Object ? ObjectProto : null;
            };
        }, { "./_has": 34, "./_shared-key": 59, "./_to-object": 66 }], 53: [function (require, module, exports) {
            var has = require('./_has');
            var toIObject = require('./_to-iobject');
            var arrayIndexOf = require('./_array-includes')(false);
            var IE_PROTO = require('./_shared-key')('IE_PROTO');

            module.exports = function (object, names) {
                var O = toIObject(object);
                var i = 0;
                var result = [];
                var key;
                for (key in O) {
                    if (key != IE_PROTO) has(O, key) && result.push(key);
                } // Don't enum bug & hidden keys
                while (names.length > i) {
                    if (has(O, key = names[i++])) {
                        ~arrayIndexOf(result, key) || result.push(key);
                    }
                }return result;
            };
        }, { "./_array-includes": 21, "./_has": 34, "./_shared-key": 59, "./_to-iobject": 64 }], 54: [function (require, module, exports) {
            // 19.1.2.14 / 15.2.3.14 Object.keys(O)
            var $keys = require('./_object-keys-internal');
            var enumBugKeys = require('./_enum-bug-keys');

            module.exports = Object.keys || function keys(O) {
                return $keys(O, enumBugKeys);
            };
        }, { "./_enum-bug-keys": 30, "./_object-keys-internal": 53 }], 55: [function (require, module, exports) {
            // most Object methods by ES6 should accept primitives
            var $export = require('./_export');
            var core = require('./_core');
            var fails = require('./_fails');
            module.exports = function (KEY, exec) {
                var fn = (core.Object || {})[KEY] || Object[KEY];
                var exp = {};
                exp[KEY] = exec(fn);
                $export($export.S + $export.F * fails(function () {
                    fn(1);
                }), 'Object', exp);
            };
        }, { "./_core": 24, "./_export": 31, "./_fails": 32 }], 56: [function (require, module, exports) {
            module.exports = function (bitmap, value) {
                return {
                    enumerable: !(bitmap & 1),
                    configurable: !(bitmap & 2),
                    writable: !(bitmap & 4),
                    value: value
                };
            };
        }, {}], 57: [function (require, module, exports) {
            module.exports = require('./_hide');
        }, { "./_hide": 35 }], 58: [function (require, module, exports) {
            var def = require('./_object-dp').f;
            var has = require('./_has');
            var TAG = require('./_wks')('toStringTag');

            module.exports = function (it, tag, stat) {
                if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
            };
        }, { "./_has": 34, "./_object-dp": 50, "./_wks": 69 }], 59: [function (require, module, exports) {
            var shared = require('./_shared')('keys');
            var uid = require('./_uid');
            module.exports = function (key) {
                return shared[key] || (shared[key] = uid(key));
            };
        }, { "./_shared": 60, "./_uid": 68 }], 60: [function (require, module, exports) {
            var global = require('./_global');
            var SHARED = '__core-js_shared__';
            var store = global[SHARED] || (global[SHARED] = {});
            module.exports = function (key) {
                return store[key] || (store[key] = {});
            };
        }, { "./_global": 33 }], 61: [function (require, module, exports) {
            var toInteger = require('./_to-integer');
            var defined = require('./_defined');
            // true  -> String#at
            // false -> String#codePointAt
            module.exports = function (TO_STRING) {
                return function (that, pos) {
                    var s = String(defined(that));
                    var i = toInteger(pos);
                    var l = s.length;
                    var a, b;
                    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
                    a = s.charCodeAt(i);
                    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
                };
            };
        }, { "./_defined": 27, "./_to-integer": 63 }], 62: [function (require, module, exports) {
            var toInteger = require('./_to-integer');
            var max = Math.max;
            var min = Math.min;
            module.exports = function (index, length) {
                index = toInteger(index);
                return index < 0 ? max(index + length, 0) : min(index, length);
            };
        }, { "./_to-integer": 63 }], 63: [function (require, module, exports) {
            // 7.1.4 ToInteger
            var ceil = Math.ceil;
            var floor = Math.floor;
            module.exports = function (it) {
                return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
            };
        }, {}], 64: [function (require, module, exports) {
            // to indexed object, toObject with fallback for non-array-like ES3 strings
            var IObject = require('./_iobject');
            var defined = require('./_defined');
            module.exports = function (it) {
                return IObject(defined(it));
            };
        }, { "./_defined": 27, "./_iobject": 38 }], 65: [function (require, module, exports) {
            // 7.1.15 ToLength
            var toInteger = require('./_to-integer');
            var min = Math.min;
            module.exports = function (it) {
                return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
            };
        }, { "./_to-integer": 63 }], 66: [function (require, module, exports) {
            // 7.1.13 ToObject(argument)
            var defined = require('./_defined');
            module.exports = function (it) {
                return Object(defined(it));
            };
        }, { "./_defined": 27 }], 67: [function (require, module, exports) {
            // 7.1.1 ToPrimitive(input [, PreferredType])
            var isObject = require('./_is-object');
            // instead of the ES6 spec version, we didn't implement @@toPrimitive case
            // and the second argument - flag - preferred type is a string
            module.exports = function (it, S) {
                if (!isObject(it)) return it;
                var fn, val;
                if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
                if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
                if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
                throw TypeError("Can't convert object to primitive value");
            };
        }, { "./_is-object": 40 }], 68: [function (require, module, exports) {
            var id = 0;
            var px = Math.random();
            module.exports = function (key) {
                return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
            };
        }, {}], 69: [function (require, module, exports) {
            var store = require('./_shared')('wks');
            var uid = require('./_uid');
            var _Symbol = require('./_global').Symbol;
            var USE_SYMBOL = typeof _Symbol == 'function';

            var $exports = module.exports = function (name) {
                return store[name] || (store[name] = USE_SYMBOL && _Symbol[name] || (USE_SYMBOL ? _Symbol : uid)('Symbol.' + name));
            };

            $exports.store = store;
        }, { "./_global": 33, "./_shared": 60, "./_uid": 68 }], 70: [function (require, module, exports) {
            var classof = require('./_classof');
            var ITERATOR = require('./_wks')('iterator');
            var Iterators = require('./_iterators');
            module.exports = require('./_core').getIteratorMethod = function (it) {
                if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
            };
        }, { "./_classof": 22, "./_core": 24, "./_iterators": 46, "./_wks": 69 }], 71: [function (require, module, exports) {
            var anObject = require('./_an-object');
            var get = require('./core.get-iterator-method');
            module.exports = require('./_core').getIterator = function (it) {
                var iterFn = get(it);
                if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
                return anObject(iterFn.call(it));
            };
        }, { "./_an-object": 20, "./_core": 24, "./core.get-iterator-method": 70 }], 72: [function (require, module, exports) {
            var classof = require('./_classof');
            var ITERATOR = require('./_wks')('iterator');
            var Iterators = require('./_iterators');
            module.exports = require('./_core').isIterable = function (it) {
                var O = Object(it);
                return O[ITERATOR] !== undefined || '@@iterator' in O
                // eslint-disable-next-line no-prototype-builtins
                || Iterators.hasOwnProperty(classof(O));
            };
        }, { "./_classof": 22, "./_core": 24, "./_iterators": 46, "./_wks": 69 }], 73: [function (require, module, exports) {
            'use strict';

            var ctx = require('./_ctx');
            var $export = require('./_export');
            var toObject = require('./_to-object');
            var call = require('./_iter-call');
            var isArrayIter = require('./_is-array-iter');
            var toLength = require('./_to-length');
            var createProperty = require('./_create-property');
            var getIterFn = require('./core.get-iterator-method');

            $export($export.S + $export.F * !require('./_iter-detect')(function (iter) {
                Array.from(iter);
            }), 'Array', {
                // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
                from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
                    var O = toObject(arrayLike);
                    var C = typeof this == 'function' ? this : Array;
                    var aLen = arguments.length;
                    var mapfn = aLen > 1 ? arguments[1] : undefined;
                    var mapping = mapfn !== undefined;
                    var index = 0;
                    var iterFn = getIterFn(O);
                    var length, result, step, iterator;
                    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
                    // if object isn't iterable or it's array with default iterator - use simple case
                    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
                        for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
                            createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
                        }
                    } else {
                        length = toLength(O.length);
                        for (result = new C(length); length > index; index++) {
                            createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
                        }
                    }
                    result.length = index;
                    return result;
                }
            });
        }, { "./_create-property": 25, "./_ctx": 26, "./_export": 31, "./_is-array-iter": 39, "./_iter-call": 41, "./_iter-detect": 44, "./_to-length": 65, "./_to-object": 66, "./core.get-iterator-method": 70 }], 74: [function (require, module, exports) {
            'use strict';

            var addToUnscopables = require('./_add-to-unscopables');
            var step = require('./_iter-step');
            var Iterators = require('./_iterators');
            var toIObject = require('./_to-iobject');

            // 22.1.3.4 Array.prototype.entries()
            // 22.1.3.13 Array.prototype.keys()
            // 22.1.3.29 Array.prototype.values()
            // 22.1.3.30 Array.prototype[@@iterator]()
            module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
                this._t = toIObject(iterated); // target
                this._i = 0; // next index
                this._k = kind; // kind
                // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
            }, function () {
                var O = this._t;
                var kind = this._k;
                var index = this._i++;
                if (!O || index >= O.length) {
                    this._t = undefined;
                    return step(1);
                }
                if (kind == 'keys') return step(0, index);
                if (kind == 'values') return step(0, O[index]);
                return step(0, [index, O[index]]);
            }, 'values');

            // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
            Iterators.Arguments = Iterators.Array;

            addToUnscopables('keys');
            addToUnscopables('values');
            addToUnscopables('entries');
        }, { "./_add-to-unscopables": 19, "./_iter-define": 43, "./_iter-step": 45, "./_iterators": 46, "./_to-iobject": 64 }], 75: [function (require, module, exports) {
            var $export = require('./_export');
            // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
            $export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });
        }, { "./_descriptors": 28, "./_export": 31, "./_object-dp": 50 }], 76: [function (require, module, exports) {
            // 19.1.2.5 Object.freeze(O)
            var isObject = require('./_is-object');
            var meta = require('./_meta').onFreeze;

            require('./_object-sap')('freeze', function ($freeze) {
                return function freeze(it) {
                    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
                };
            });
        }, { "./_is-object": 40, "./_meta": 48, "./_object-sap": 55 }], 77: [function (require, module, exports) {
            'use strict';

            var $at = require('./_string-at')(true);

            // 21.1.3.27 String.prototype[@@iterator]()
            require('./_iter-define')(String, 'String', function (iterated) {
                this._t = String(iterated); // target
                this._i = 0; // next index
                // 21.1.5.2.1 %StringIteratorPrototype%.next()
            }, function () {
                var O = this._t;
                var index = this._i;
                var point;
                if (index >= O.length) return { value: undefined, done: true };
                point = $at(O, index);
                this._i += point.length;
                return { value: point, done: false };
            });
        }, { "./_iter-define": 43, "./_string-at": 61 }], 78: [function (require, module, exports) {
            require('./es6.array.iterator');
            var global = require('./_global');
            var hide = require('./_hide');
            var Iterators = require('./_iterators');
            var TO_STRING_TAG = require('./_wks')('toStringTag');

            var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' + 'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' + 'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' + 'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' + 'TextTrackList,TouchList').split(',');

            for (var i = 0; i < DOMIterables.length; i++) {
                var NAME = DOMIterables[i];
                var Collection = global[NAME];
                var proto = Collection && Collection.prototype;
                if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
                Iterators[NAME] = Iterators.Array;
            }
        }, { "./_global": 33, "./_hide": 35, "./_iterators": 46, "./_wks": 69, "./es6.array.iterator": 74 }], 79: [function (require, module, exports) {
            function getRelocatable(re) {
                // In the future, this could use a WeakMap instead of an expando.
                if (!re.__matchAtRelocatable) {
                    // Disjunctions are the lowest-precedence operator, so we can make any
                    // pattern match the empty string by appending `|()` to it:
                    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-patterns
                    var source = re.source + '|()';

                    // We always make the new regex global.
                    var flags = 'g' + (re.ignoreCase ? 'i' : '') + (re.multiline ? 'm' : '') + (re.unicode ? 'u' : '')
                    // sticky (/.../y) doesn't make sense in conjunction with our relocation
                    // logic, so we ignore it here.
                    ;

                    re.__matchAtRelocatable = new RegExp(source, flags);
                }
                return re.__matchAtRelocatable;
            }

            function matchAt(re, str, pos) {
                if (re.global || re.sticky) {
                    throw new Error('matchAt(...): Only non-global regexes are supported');
                }
                var reloc = getRelocatable(re);
                reloc.lastIndex = pos;
                var match = reloc.exec(str);
                // Last capturing group is our sentinel that indicates whether the regex
                // matched at the given location.
                if (match[match.length - 1] == null) {
                    // Original regex matched.
                    match.length = match.length - 1;
                    return match;
                } else {
                    return null;
                }
            }

            module.exports = matchAt;
        }, {}], 80: [function (require, module, exports) {
            /*
            object-assign
            (c) Sindre Sorhus
            @license MIT
            */

            'use strict';
            /* eslint-disable no-unused-vars */

            var getOwnPropertySymbols = Object.getOwnPropertySymbols;
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var propIsEnumerable = Object.prototype.propertyIsEnumerable;

            function toObject(val) {
                if (val === null || val === undefined) {
                    throw new TypeError('Object.assign cannot be called with null or undefined');
                }

                return Object(val);
            }

            function shouldUseNative() {
                try {
                    if (!Object.assign) {
                        return false;
                    }

                    // Detect buggy property enumeration order in older V8 versions.

                    // https://bugs.chromium.org/p/v8/issues/detail?id=4118
                    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
                    test1[5] = 'de';
                    if (Object.getOwnPropertyNames(test1)[0] === '5') {
                        return false;
                    }

                    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
                    var test2 = {};
                    for (var i = 0; i < 10; i++) {
                        test2['_' + String.fromCharCode(i)] = i;
                    }
                    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
                        return test2[n];
                    });
                    if (order2.join('') !== '0123456789') {
                        return false;
                    }

                    // https://bugs.chromium.org/p/v8/issues/detail?id=3056
                    var test3 = {};
                    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
                        test3[letter] = letter;
                    });
                    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
                        return false;
                    }

                    return true;
                } catch (err) {
                    // We don't expect any of the above to throw, but better to be safe.
                    return false;
                }
            }

            module.exports = shouldUseNative() ? Object.assign : function (target, source) {
                var from;
                var to = toObject(target);
                var symbols;

                for (var s = 1; s < arguments.length; s++) {
                    from = Object(arguments[s]);

                    for (var key in from) {
                        if (hasOwnProperty.call(from, key)) {
                            to[key] = from[key];
                        }
                    }

                    if (getOwnPropertySymbols) {
                        symbols = getOwnPropertySymbols(from);
                        for (var i = 0; i < symbols.length; i++) {
                            if (propIsEnumerable.call(from, symbols[i])) {
                                to[symbols[i]] = from[symbols[i]];
                            }
                        }
                    }
                }

                return to;
            };
        }, {}], 81: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = require("babel-runtime/helpers/createClass");

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _matchAt = require("match-at");

            var _matchAt2 = _interopRequireDefault(_matchAt);

            var _ParseError = require("./ParseError");

            var _ParseError2 = _interopRequireDefault(_ParseError);

            var _SourceLocation = require("./SourceLocation");

            var _SourceLocation2 = _interopRequireDefault(_SourceLocation);

            var _Token = require("./Token");

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /* The following tokenRegex
             * - matches typical whitespace (but not NBSP etc.) using its first group
             * - matches comments (must have trailing newlines)
             * - does not match any control character \x00-\x1f except whitespace
             * - does not match a bare backslash
             * - matches any ASCII character except those just mentioned
             * - does not match the BMP private use area \uE000-\uF8FF
             * - does not match bare surrogate code units
             * - matches any BMP character except for those just described
             * - matches any valid Unicode surrogate pair
             * - matches a backslash followed by one or more letters
             * - matches a backslash followed by any BMP character, including newline
             * Just because the Lexer matches something doesn't mean it's valid input:
             * If there is no matching function or symbol definition, the Parser will
             * still reject the input.
             */

            /**
             * The Lexer class handles tokenizing the input in various ways. Since our
             * parser expects us to be able to backtrack, the lexer allows lexing from any
             * given starting point.
             *
             * Its main exposed function is the `lex` function, which takes a position to
             * lex from and a type of token to lex. It defers to the appropriate `_innerLex`
             * function.
             *
             * The various `_innerLex` functions perform the actual lexing of different
             * kinds.
             */

            var commentRegexString = "%[^\n]*[\n]";
            var tokenRegex = new RegExp("([ \r\n\t]+)|" + ( // whitespace
            "(" + commentRegexString + "|") + // comments
            "[!-\\[\\]-\u2027\u202A-\uD7FF\uF900-\uFFFF]" + // single codepoint
            "|[\uD800-\uDBFF][\uDC00-\uDFFF]" + // surrogate pair
            "|\\\\verb\\*([^]).*?\\3" + // \verb*
            "|\\\\verb([^*a-zA-Z]).*?\\4" + // \verb unstarred
            "|\\\\(?:[a-zA-Z@]+|[^\uD800-\uDFFF])" + // function name
            ")");

            var commentRegex = new RegExp(commentRegexString);

            /** Main Lexer class */

            var Lexer = function () {
                function Lexer(input) {
                    (0, _classCallCheck3.default)(this, Lexer);

                    this.input = input;
                    this.pos = 0;
                }

                /**
                 * This function lexes a single token.
                 */

                (0, _createClass3.default)(Lexer, [{
                    key: "lex",
                    value: function lex() {
                        var input = this.input;
                        var pos = this.pos;
                        if (pos === input.length) {
                            return new _Token.Token("EOF", new _SourceLocation2.default(this, pos, pos));
                        }
                        var match = (0, _matchAt2.default)(tokenRegex, input, pos);
                        if (match === null) {
                            throw new _ParseError2.default("Unexpected character: '" + input[pos] + "'", new _Token.Token(input[pos], new _SourceLocation2.default(this, pos, pos + 1)));
                        }
                        var text = match[2] || " ";
                        var start = this.pos;
                        this.pos += match[0].length;
                        var end = this.pos;

                        if (commentRegex.test(text)) {
                            return this.lex();
                        } else {
                            return new _Token.Token(text, new _SourceLocation2.default(this, start, end));
                        }
                    }
                }]);
                return Lexer;
            }();

            exports.default = Lexer;
        }, { "./ParseError": 84, "./SourceLocation": 88, "./Token": 90, "babel-runtime/helpers/classCallCheck": 8, "babel-runtime/helpers/createClass": 9, "match-at": 79 }], 82: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

            var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

            var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = require("babel-runtime/helpers/createClass");

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _Lexer = require("./Lexer");

            var _Lexer2 = _interopRequireDefault(_Lexer);

            var _Token = require("./Token");

            var _macros = require("./macros");

            var _macros2 = _interopRequireDefault(_macros);

            var _ParseError = require("./ParseError");

            var _ParseError2 = _interopRequireDefault(_ParseError);

            var _objectAssign = require("object-assign");

            var _objectAssign2 = _interopRequireDefault(_objectAssign);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            var MacroExpander = function () {
                function MacroExpander(input, macros) {
                    (0, _classCallCheck3.default)(this, MacroExpander);

                    this.lexer = new _Lexer2.default(input);
                    this.macros = (0, _objectAssign2.default)({}, _macros2.default, macros);
                    this.stack = []; // contains tokens in REVERSE order
                    this.discardedWhiteSpace = [];
                }

                /**
                 * Returns the topmost token on the stack, without expanding it.
                 * Similar in behavior to TeX's `\futurelet`.
                 */

                (0, _createClass3.default)(MacroExpander, [{
                    key: "future",
                    value: function future() {
                        if (this.stack.length === 0) {
                            this.stack.push(this.lexer.lex());
                        }
                        return this.stack[this.stack.length - 1];
                    }

                    /**
                     * Remove and return the next unexpanded token.
                     */

                }, {
                    key: "popToken",
                    value: function popToken() {
                        this.future(); // ensure non-empty stack
                        return this.stack.pop();
                    }

                    /**
                     * Consume all following space tokens, without expansion.
                     */

                }, {
                    key: "consumeSpaces",
                    value: function consumeSpaces() {
                        for (;;) {
                            var token = this.future();
                            if (token.text === " ") {
                                this.stack.pop();
                            } else {
                                break;
                            }
                        }
                    }

                    /**
                     * Expand the next token only once if possible.
                     *
                     * If the token is expanded, the resulting tokens will be pushed onto
                     * the stack in reverse order and will be returned as an array,
                     * also in reverse order.
                     *
                     * If not, the next token will be returned without removing it
                     * from the stack.  This case can be detected by a `Token` return value
                     * instead of an `Array` return value.
                     *
                     * In either case, the next token will be on the top of the stack,
                     * or the stack will be empty.
                     *
                     * Used to implement `expandAfterFuture` and `expandNextToken`.
                     *
                     * At the moment, macro expansion doesn't handle delimited macros,
                     * i.e. things like those defined by \def\foo#1\end{…}.
                     * See the TeX book page 202ff. for details on how those should behave.
                     */

                }, {
                    key: "expandOnce",
                    value: function expandOnce() {
                        var _stack;

                        var topToken = this.popToken();
                        var name = topToken.text;
                        var isMacro = name.charAt(0) === "\\";
                        if (isMacro) {
                            // Consume all spaces after \macro
                            this.consumeSpaces();
                        }
                        if (!(isMacro && this.macros.hasOwnProperty(name))) {
                            // Fully expanded
                            this.stack.push(topToken);
                            return topToken;
                        }

                        var _getExpansion2 = this._getExpansion(name),
                            tokens = _getExpansion2.tokens,
                            numArgs = _getExpansion2.numArgs;

                        var expansion = tokens;
                        if (numArgs) {
                            var args = [];
                            // obtain arguments, either single token or balanced {…} group
                            for (var i = 0; i < numArgs; ++i) {
                                this.consumeSpaces(); // ignore spaces before each argument
                                var startOfArg = this.popToken();
                                if (startOfArg.text === "{") {
                                    var arg = [];
                                    var depth = 1;
                                    while (depth !== 0) {
                                        var tok = this.popToken();
                                        arg.push(tok);
                                        if (tok.text === "{") {
                                            ++depth;
                                        } else if (tok.text === "}") {
                                            --depth;
                                        } else if (tok.text === "EOF") {
                                            throw new _ParseError2.default("End of input in macro argument", startOfArg);
                                        }
                                    }
                                    arg.pop(); // remove last }
                                    arg.reverse(); // like above, to fit in with stack order
                                    args[i] = arg;
                                } else if (startOfArg.text === "EOF") {
                                    throw new _ParseError2.default("End of input expecting macro argument", topToken);
                                } else {
                                    args[i] = [startOfArg];
                                }
                            }
                            // paste arguments in place of the placeholders
                            expansion = expansion.slice(); // make a shallow copy
                            for (var _i = expansion.length - 1; _i >= 0; --_i) {
                                var _tok = expansion[_i];
                                if (_tok.text === "#") {
                                    if (_i === 0) {
                                        throw new _ParseError2.default("Incomplete placeholder at end of macro body", _tok);
                                    }
                                    _tok = expansion[--_i]; // next token on stack
                                    if (_tok.text === "#") {
                                        // ## → #
                                        expansion.splice(_i + 1, 1); // drop first #
                                    } else if (/^[1-9]$/.test(_tok.text)) {
                                        var _expansion;

                                        // replace the placeholder with the indicated argument
                                        (_expansion = expansion).splice.apply(_expansion, [_i, 2].concat((0, _toConsumableArray3.default)(args[+_tok.text - 1])));
                                    } else {
                                        throw new _ParseError2.default("Not a valid argument number", _tok);
                                    }
                                }
                            }
                        }
                        // Concatenate expansion onto top of stack.
                        (_stack = this.stack).push.apply(_stack, (0, _toConsumableArray3.default)(expansion));
                        return expansion;
                    }

                    /**
                     * Expand the next token only once (if possible), and return the resulting
                     * top token on the stack (without removing anything from the stack).
                     * Similar in behavior to TeX's `\expandafter\futurelet`.
                     * Equivalent to expandOnce() followed by future().
                     */

                }, {
                    key: "expandAfterFuture",
                    value: function expandAfterFuture() {
                        this.expandOnce();
                        return this.future();
                    }

                    /**
                     * Recursively expand first token, then return first non-expandable token.
                     */

                }, {
                    key: "expandNextToken",
                    value: function expandNextToken() {
                        for (;;) {
                            var expanded = this.expandOnce();
                            // expandOnce returns Token if and only if it's fully expanded.
                            if (expanded instanceof _Token.Token) {
                                // \relax stops the expansion, but shouldn't get returned (a
                                // null return value couldn't get implemented as a function).
                                if (expanded.text === "\\relax") {
                                    this.stack.pop();
                                } else {
                                    return this.stack.pop(); // === expanded
                                }
                            }
                        }

                        // Flow unable to figure out that this pathway is impossible.
                        // https://github.com/facebook/flow/issues/4808
                        throw new Error(); // eslint-disable-line no-unreachable
                    }

                    /**
                     * Returns the expanded macro as a reversed array of tokens and a macro
                     * argument count.
                     * Caches macro expansions for those that were defined simple TeX strings.
                     */

                }, {
                    key: "_getExpansion",
                    value: function _getExpansion(name) {
                        var definition = this.macros[name];
                        var expansion = typeof definition === "function" ? definition(this) : definition;
                        if (typeof expansion === "string") {
                            var numArgs = 0;
                            if (expansion.indexOf("#") !== -1) {
                                var stripped = expansion.replace(/##/g, "");
                                while (stripped.indexOf("#" + (numArgs + 1)) !== -1) {
                                    ++numArgs;
                                }
                            }
                            var bodyLexer = new _Lexer2.default(expansion);
                            var tokens = [];
                            var tok = bodyLexer.lex();
                            while (tok.text !== "EOF") {
                                tokens.push(tok);
                                tok = bodyLexer.lex();
                            }
                            tokens.reverse(); // to fit in with stack using push and pop
                            var expanded = { tokens: tokens, numArgs: numArgs };
                            // Cannot cache a macro defined using a function since it relies on
                            // parser context.
                            if (typeof definition !== "function") {
                                this.macros[name] = expanded;
                            }
                            return expanded;
                        }

                        return expansion;
                    }

                    /**
                     * Recursively expand first token, then return first non-expandable token.
                     * If given a `true` argument, skips over any leading whitespace in
                     * expansion, instead returning the first non-whitespace token
                     * (like TeX's \ignorespaces).
                     * Any skipped whitespace is stored in `this.discardedWhiteSpace`
                     * so that `unget` can correctly undo the effects of `get`.
                     */

                }, {
                    key: "get",
                    value: function get(ignoreSpace) {
                        this.discardedWhiteSpace = [];
                        var token = this.expandNextToken();
                        if (ignoreSpace) {
                            while (token.text === " ") {
                                this.discardedWhiteSpace.push(token);
                                token = this.expandNextToken();
                            }
                        }
                        return token;
                    }

                    /**
                     * Undo the effect of the preceding call to the get method.
                     * A call to this method MUST be immediately preceded and immediately followed
                     * by a call to get.  Only used during mode switching, i.e. after one token
                     * was got in the old mode but should get got again in a new mode
                     * with possibly different whitespace handling.
                     */

                }, {
                    key: "unget",
                    value: function unget(token) {
                        this.stack.push(token);
                        while (this.discardedWhiteSpace.length !== 0) {
                            this.stack.push(this.discardedWhiteSpace.pop());
                        }
                    }
                }]);
                return MacroExpander;
            }();
            /**
             * This file contains the “gullet” where macros are expanded
             * until only non-macro tokens remain.
             */

            exports.default = MacroExpander;
        }, { "./Lexer": 81, "./ParseError": 84, "./Token": 90, "./macros": 107, "babel-runtime/helpers/classCallCheck": 8, "babel-runtime/helpers/createClass": 9, "babel-runtime/helpers/toConsumableArray": 11, "object-assign": 80 }], 83: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = require("babel-runtime/helpers/createClass");

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _fontMetrics2 = require("./fontMetrics");

            var _fontMetrics3 = _interopRequireDefault(_fontMetrics2);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            var sizeStyleMap = [
            // Each element contains [textsize, scriptsize, scriptscriptsize].
            // The size mappings are taken from TeX with \normalsize=10pt.
            [1, 1, 1], // size1: [5, 5, 5]              \tiny
            [2, 1, 1], // size2: [6, 5, 5]
            [3, 1, 1], // size3: [7, 5, 5]              \scriptsize
            [4, 2, 1], // size4: [8, 6, 5]              \footnotesize
            [5, 2, 1], // size5: [9, 6, 5]              \small
            [6, 3, 1], // size6: [10, 7, 5]             \normalsize
            [7, 4, 2], // size7: [12, 8, 6]             \large
            [8, 6, 3], // size8: [14.4, 10, 7]          \Large
            [9, 7, 6], // size9: [17.28, 12, 10]        \LARGE
            [10, 8, 7], // size10: [20.74, 14.4, 12]     \huge
            [11, 10, 9]];
            /**
             * This file contains information about the options that the Parser carries
             * around with it while parsing. Data is held in an `Options` object, and when
             * recursing, a new `Options` object can be created with the `.with*` and
             * `.reset` functions.
             */

            var sizeMultipliers = [
            // fontMetrics.js:getFontMetrics also uses size indexes, so if
            // you change size indexes, change that function.
            0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.2, 1.44, 1.728, 2.074, 2.488];

            var sizeAtStyle = function sizeAtStyle(size, style) {
                return style.size < 2 ? size : sizeStyleMap[size - 1][style.size - 1];
            };

            /**
             * This is the main options class. It contains the current style, size, color,
             * and font.
             *
             * Options objects should not be modified. To create a new Options with
             * different properties, call a `.having*` method.
             */
            var Options = function () {
                function Options(data) {
                    (0, _classCallCheck3.default)(this, Options);

                    this.style = data.style;
                    this.color = data.color;
                    this.size = data.size || Options.BASESIZE;
                    this.textSize = data.textSize || this.size;
                    this.phantom = !!data.phantom;
                    this.font = data.font;
                    this.sizeMultiplier = sizeMultipliers[this.size - 1];
                    this.maxSize = data.maxSize;
                    this._fontMetrics = undefined;
                }

                /**
                 * Returns a new options object with the same properties as "this".  Properties
                 * from "extension" will be copied to the new options object.
                 */

                /**
                 * The base size index.
                 */

                (0, _createClass3.default)(Options, [{
                    key: "extend",
                    value: function extend(extension) {
                        var data = {
                            style: this.style,
                            size: this.size,
                            textSize: this.textSize,
                            color: this.color,
                            phantom: this.phantom,
                            font: this.font,
                            maxSize: this.maxSize
                        };

                        for (var key in extension) {
                            if (extension.hasOwnProperty(key)) {
                                data[key] = extension[key];
                            }
                        }

                        return new Options(data);
                    }

                    /**
                     * Return an options object with the given style. If `this.style === style`,
                     * returns `this`.
                     */

                }, {
                    key: "havingStyle",
                    value: function havingStyle(style) {
                        if (this.style === style) {
                            return this;
                        } else {
                            return this.extend({
                                style: style,
                                size: sizeAtStyle(this.textSize, style)
                            });
                        }
                    }

                    /**
                     * Return an options object with a cramped version of the current style. If
                     * the current style is cramped, returns `this`.
                     */

                }, {
                    key: "havingCrampedStyle",
                    value: function havingCrampedStyle() {
                        return this.havingStyle(this.style.cramp());
                    }

                    /**
                     * Return an options object with the given size and in at least `\textstyle`.
                     * Returns `this` if appropriate.
                     */

                }, {
                    key: "havingSize",
                    value: function havingSize(size) {
                        if (this.size === size && this.textSize === size) {
                            return this;
                        } else {
                            return this.extend({
                                style: this.style.text(),
                                size: size,
                                textSize: size
                            });
                        }
                    }

                    /**
                     * Like `this.havingSize(BASESIZE).havingStyle(style)`. If `style` is omitted,
                     * changes to at least `\textstyle`.
                     */

                }, {
                    key: "havingBaseStyle",
                    value: function havingBaseStyle(style) {
                        style = style || this.style.text();
                        var wantSize = sizeAtStyle(Options.BASESIZE, style);
                        if (this.size === wantSize && this.textSize === Options.BASESIZE && this.style === style) {
                            return this;
                        } else {
                            return this.extend({
                                style: style,
                                size: wantSize
                            });
                        }
                    }

                    /**
                     * Create a new options object with the given color.
                     */

                }, {
                    key: "withColor",
                    value: function withColor(color) {
                        return this.extend({
                            color: color
                        });
                    }

                    /**
                     * Create a new options object with "phantom" set to true.
                     */

                }, {
                    key: "withPhantom",
                    value: function withPhantom() {
                        return this.extend({
                            phantom: true
                        });
                    }

                    /**
                     * Create a new options objects with the give font.
                     */

                }, {
                    key: "withFont",
                    value: function withFont(font) {
                        return this.extend({
                            font: font || this.font
                        });
                    }

                    /**
                     * Return the CSS sizing classes required to switch from enclosing options
                     * `oldOptions` to `this`. Returns an array of classes.
                     */

                }, {
                    key: "sizingClasses",
                    value: function sizingClasses(oldOptions) {
                        if (oldOptions.size !== this.size) {
                            return ["sizing", "reset-size" + oldOptions.size, "size" + this.size];
                        } else {
                            return [];
                        }
                    }

                    /**
                     * Return the CSS sizing classes required to switch to the base size. Like
                     * `this.havingSize(BASESIZE).sizingClasses(this)`.
                     */

                }, {
                    key: "baseSizingClasses",
                    value: function baseSizingClasses() {
                        if (this.size !== Options.BASESIZE) {
                            return ["sizing", "reset-size" + this.size, "size" + Options.BASESIZE];
                        } else {
                            return [];
                        }
                    }

                    /**
                     * Return the font metrics for this size.
                     */

                }, {
                    key: "fontMetrics",
                    value: function fontMetrics() {
                        if (!this._fontMetrics) {
                            this._fontMetrics = _fontMetrics3.default.getFontMetrics(this.size);
                        }
                        return this._fontMetrics;
                    }

                    /**
                     * A map of color names to CSS colors.
                     * TODO(emily): Remove this when we have real macros
                     */

                }, {
                    key: "getColor",

                    /**
                     * Gets the CSS color of the current options object, accounting for the
                     * `colorMap`.
                     */
                    value: function getColor() {
                        if (this.phantom) {
                            return "transparent";
                        } else if (this.color != null && Options.colorMap.hasOwnProperty(this.color)) {
                            return Options.colorMap[this.color];
                        } else {
                            return this.color;
                        }
                    }
                }]);
                return Options;
            }();

            Options.BASESIZE = 6;
            Options.colorMap = {
                "katex-blue": "#6495ed",
                "katex-orange": "#ffa500",
                "katex-pink": "#ff00af",
                "katex-red": "#df0030",
                "katex-green": "#28ae7b",
                "katex-gray": "gray",
                "katex-purple": "#9d38bd",
                "katex-blueA": "#ccfaff",
                "katex-blueB": "#80f6ff",
                "katex-blueC": "#63d9ea",
                "katex-blueD": "#11accd",
                "katex-blueE": "#0c7f99",
                "katex-tealA": "#94fff5",
                "katex-tealB": "#26edd5",
                "katex-tealC": "#01d1c1",
                "katex-tealD": "#01a995",
                "katex-tealE": "#208170",
                "katex-greenA": "#b6ffb0",
                "katex-greenB": "#8af281",
                "katex-greenC": "#74cf70",
                "katex-greenD": "#1fab54",
                "katex-greenE": "#0d923f",
                "katex-goldA": "#ffd0a9",
                "katex-goldB": "#ffbb71",
                "katex-goldC": "#ff9c39",
                "katex-goldD": "#e07d10",
                "katex-goldE": "#a75a05",
                "katex-redA": "#fca9a9",
                "katex-redB": "#ff8482",
                "katex-redC": "#f9685d",
                "katex-redD": "#e84d39",
                "katex-redE": "#bc2612",
                "katex-maroonA": "#ffbde0",
                "katex-maroonB": "#ff92c6",
                "katex-maroonC": "#ed5fa6",
                "katex-maroonD": "#ca337c",
                "katex-maroonE": "#9e034e",
                "katex-purpleA": "#ddd7ff",
                "katex-purpleB": "#c6b9fc",
                "katex-purpleC": "#aa87ff",
                "katex-purpleD": "#7854ab",
                "katex-purpleE": "#543b78",
                "katex-mintA": "#f5f9e8",
                "katex-mintB": "#edf2df",
                "katex-mintC": "#e0e5cc",
                "katex-grayA": "#f6f7f7",
                "katex-grayB": "#f0f1f2",
                "katex-grayC": "#e3e5e6",
                "katex-grayD": "#d6d8da",
                "katex-grayE": "#babec2",
                "katex-grayF": "#888d93",
                "katex-grayG": "#626569",
                "katex-grayH": "#3b3e40",
                "katex-grayI": "#21242c",
                "katex-kaBlue": "#314453",
                "katex-kaGreen": "#71B307"
            };
            exports.default = Options;
        }, { "./fontMetrics": 101, "babel-runtime/helpers/classCallCheck": 8, "babel-runtime/helpers/createClass": 9 }], 84: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _ParseNode = require("./ParseNode");

            var _ParseNode2 = _interopRequireDefault(_ParseNode);

            var _Token = require("./Token");

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * This is the ParseError class, which is the main error thrown by KaTeX
             * functions when something has gone wrong. This is used to distinguish internal
             * errors from errors in the expression that the user provided.
             *
             * If possible, a caller should provide a Token or ParseNode with information
             * about where in the source string the problem occurred.
             */
            var ParseError =
            // Error position based on passed-in Token or ParseNode.

            function ParseError(message, // The error message
            token) // An object providing position information
            {
                (0, _classCallCheck3.default)(this, ParseError);

                var error = "KaTeX parse error: " + message;
                var start = void 0;

                var loc = token && token.loc;
                if (loc && loc.start <= loc.end) {
                    // If we have the input and a position, make the error a bit fancier

                    // Get the input
                    var input = loc.lexer.input;

                    // Prepend some information
                    start = loc.start;
                    var end = loc.end;
                    if (start === input.length) {
                        error += " at end of input: ";
                    } else {
                        error += " at position " + (start + 1) + ": ";
                    }

                    // Underline token in question using combining underscores
                    var underlined = input.slice(start, end).replace(/[^]/g, "$&\u0332");

                    // Extract some context from the input and add it to the error
                    var left = void 0;
                    if (start > 15) {
                        left = "…" + input.slice(start - 15, start);
                    } else {
                        left = input.slice(0, start);
                    }
                    var right = void 0;
                    if (end + 15 < input.length) {
                        right = input.slice(end, end + 15) + "…";
                    } else {
                        right = input.slice(end);
                    }
                    error += left + underlined + right;
                }

                // Some hackery to make ParseError a prototype of Error
                // See http://stackoverflow.com/a/8460753
                var self = new Error(error);
                self.name = "ParseError";
                // $FlowFixMe
                self.__proto__ = ParseError.prototype;
                // $FlowFixMe
                self.position = start;
                return self;
            };

            // $FlowFixMe More hackery


            ParseError.prototype.__proto__ = Error.prototype;

            exports.default = ParseError;
        }, { "./ParseNode": 85, "./Token": 90, "babel-runtime/helpers/classCallCheck": 8 }], 85: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _Token = require("./Token");

            var _SourceLocation = require("./SourceLocation");

            var _SourceLocation2 = _interopRequireDefault(_SourceLocation);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * The resulting parse tree nodes of the parse tree.
             *
             * It is possible to provide position information, so that a `ParseNode` can
             * fulfill a role similar to a `Token` in error reporting.
             * For details on the corresponding properties see `Token` constructor.
             * Providing such information can lead to better error reporting.
             */
            var ParseNode = function ParseNode(type, // type of node, like e.g. "ordgroup"
            value, // type-specific representation of the node
            mode, // parse mode in action for this node, "math" or "text"
            firstToken, // first token of the input for this node,
            lastToken) // last token of the input for this node,
            // will default to firstToken if unset
            {
                (0, _classCallCheck3.default)(this, ParseNode);

                this.type = type;
                this.value = value;
                this.mode = mode;
                this.loc = _SourceLocation2.default.range(firstToken, lastToken);
            };

            exports.default = ParseNode;
        }, { "./SourceLocation": 88, "./Token": 90, "babel-runtime/helpers/classCallCheck": 8 }], 86: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = require("babel-runtime/helpers/createClass");

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _functions = require("./functions");

            var _functions2 = _interopRequireDefault(_functions);

            var _environments = require("./environments");

            var _environments2 = _interopRequireDefault(_environments);

            var _MacroExpander = require("./MacroExpander");

            var _MacroExpander2 = _interopRequireDefault(_MacroExpander);

            var _symbols = require("./symbols");

            var _symbols2 = _interopRequireDefault(_symbols);

            var _utils = require("./utils");

            var _utils2 = _interopRequireDefault(_utils);

            var _units = require("./units");

            var _unicodeRegexes = require("./unicodeRegexes");

            var _ParseNode = require("./ParseNode");

            var _ParseNode2 = _interopRequireDefault(_ParseNode);

            var _ParseError = require("./ParseError");

            var _ParseError2 = _interopRequireDefault(_ParseError);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * This file contains the parser used to parse out a TeX expression from the
             * input. Since TeX isn't context-free, standard parsers don't work particularly
             * well.
             *
             * The strategy of this parser is as such:
             *
             * The main functions (the `.parse...` ones) take a position in the current
             * parse string to parse tokens from. The lexer (found in Lexer.js, stored at
             * this.lexer) also supports pulling out tokens at arbitrary places. When
             * individual tokens are needed at a position, the lexer is called to pull out a
             * token, which is then used.
             *
             * The parser has a property called "mode" indicating the mode that
             * the parser is currently in. Currently it has to be one of "math" or
             * "text", which denotes whether the current environment is a math-y
             * one or a text-y one (e.g. inside \text). Currently, this serves to
             * limit the functions which can be used in text mode.
             *
             * The main functions then return an object which contains the useful data that
             * was parsed at its given point, and a new position at the end of the parsed
             * data. The main functions can call each other and continue the parsing by
             * using the returned position as a new starting point.
             *
             * There are also extra `.handle...` functions, which pull out some reused
             * functionality into self-contained functions.
             *
             * The earlier functions return ParseNodes.
             * The later functions (which are called deeper in the parse) sometimes return
             * ParsedFuncOrArgOrDollar, which contain a ParseNode as well as some data about
             * whether the parsed object is a function which is missing some arguments, or a
             * standalone object which can be used as an argument to another function.
             */

            /* TODO: Uncomment when porting to flow.
            type ParsedType = "fn" | "arg" | "$"
            type ParsedFunc = {|
                type: "fn",
                result: string, // Function name defined via defineFunction (e.g. "\\frac").
                token: Token,
            |};
            type ParsedArg = {|
                type: "arg",
                result: ParseNode,
                token: Token,
            |};
            type ParsedDollar = {|
                // Math mode switch
                type: "$",
                result: "$",
                token: Token,
            |};
            type ParsedFuncOrArgOrDollar = ParsedFunc | ParsedArg | ParsedDollar;
            */

            /**
             * @param {ParseNode} result
             * @param {Token} token
             * @return {ParsedArg}
             */
            function newArgument(result, token) {
                return { type: "arg", result: result, token: token };
            }

            /**
             * @param {Token} token
             * @return {ParsedFunc}
             */
            /* eslint no-constant-condition:0 */
            function newFunction(token) {
                return { type: "fn", result: token.text, token: token };
            }

            /**
             * @param {Token} token
             * @return {ParsedDollar}
             */
            function newDollar(token) {
                return { type: "$", result: "$", token: token };
            }

            /**
             * @param {ParsedFuncOrArgOrDollar} parsed
             * @return {ParsedFuncOrArg}
             */
            function assertFuncOrArg(parsed) {
                if (parsed.type === "$") {
                    throw new _ParseError2.default("Unexpected $", parsed.token);
                }
                return parsed;
            }

            var Parser = function () {
                function Parser(input, settings) {
                    (0, _classCallCheck3.default)(this, Parser);

                    // Create a new macro expander (gullet) and (indirectly via that) also a
                    // new lexer (mouth) for this parser (stomach, in the language of TeX)
                    this.gullet = new _MacroExpander2.default(input, settings.macros);
                    // Use old \color behavior (same as LaTeX's \textcolor) if requested.
                    // We do this after the macros object has been copied by MacroExpander.
                    if (settings.colorIsTextColor) {
                        this.gullet.macros["\\color"] = "\\textcolor";
                    }
                    // Store the settings for use in parsing
                    this.settings = settings;
                    // Count leftright depth (for \middle errors)
                    this.leftrightDepth = 0;
                }

                /**
                 * Checks a result to make sure it has the right type, and throws an
                 * appropriate error otherwise.
                 *
                 * @param {boolean=} consume whether to consume the expected token,
                 *                           defaults to true
                 */

                (0, _createClass3.default)(Parser, [{
                    key: "expect",
                    value: function expect(text, consume) {
                        if (this.nextToken.text !== text) {
                            throw new _ParseError2.default("Expected '" + text + "', got '" + this.nextToken.text + "'", this.nextToken);
                        }
                        if (consume !== false) {
                            this.consume();
                        }
                    }

                    /**
                     * Considers the current look ahead token as consumed,
                     * and fetches the one after that as the new look ahead.
                     */

                }, {
                    key: "consume",
                    value: function consume() {
                        this.nextToken = this.gullet.get(this.mode === "math");
                    }
                }, {
                    key: "switchMode",
                    value: function switchMode(newMode) {
                        this.gullet.unget(this.nextToken);
                        this.mode = newMode;
                        this.consume();
                    }

                    /**
                     * Main parsing function, which parses an entire input.
                     *
                     * @return {Array.<ParseNode>}
                     */

                }, {
                    key: "parse",
                    value: function parse() {
                        // Try to parse the input
                        this.mode = "math";
                        this.consume();
                        var parse = this.parseInput();
                        return parse;
                    }

                    /**
                     * Parses an entire input tree.
                     */

                }, {
                    key: "parseInput",
                    value: function parseInput() {
                        // Parse an expression
                        var expression = this.parseExpression(false);
                        // If we succeeded, make sure there's an EOF at the end
                        this.expect("EOF", false);
                        return expression;
                    }
                }, {
                    key: "parseExpression",

                    /**
                     * Parses an "expression", which is a list of atoms.
                     *
                     * @param {boolean} breakOnInfix  Should the parsing stop when we hit infix
                     *                  nodes? This happens when functions have higher precendence
                     *                  than infix nodes in implicit parses.
                     *
                     * @param {?string} breakOnTokenText  The text of the token that the expression
                     *                  should end with, or `null` if something else should end the
                     *                  expression.
                     *
                     * @return {Array<ParseNode>}
                     */
                    value: function parseExpression(breakOnInfix, breakOnTokenText) {
                        var body = [];
                        // Keep adding atoms to the body until we can't parse any more atoms (either
                        // we reached the end, a }, or a \right)
                        while (true) {
                            var lex = this.nextToken;
                            if (Parser.endOfExpression.indexOf(lex.text) !== -1) {
                                break;
                            }
                            if (breakOnTokenText && lex.text === breakOnTokenText) {
                                break;
                            }
                            if (breakOnInfix && _functions2.default[lex.text] && _functions2.default[lex.text].infix) {
                                break;
                            }
                            var atom = this.parseAtom(breakOnTokenText);
                            if (!atom) {
                                if (!this.settings.throwOnError && lex.text[0] === "\\") {
                                    var errorNode = this.handleUnsupportedCmd();
                                    body.push(errorNode);
                                    continue;
                                }

                                break;
                            }
                            body.push(atom);
                        }
                        return this.handleInfixNodes(body);
                    }

                    /**
                     * Rewrites infix operators such as \over with corresponding commands such
                     * as \frac.
                     *
                     * There can only be one infix operator per group.  If there's more than one
                     * then the expression is ambiguous.  This can be resolved by adding {}.
                     *
                     * @param {Array<ParseNode>} body
                     * @return {Array<ParseNode>}
                     */

                }, {
                    key: "handleInfixNodes",
                    value: function handleInfixNodes(body) {
                        var overIndex = -1;
                        var funcName = void 0;

                        for (var i = 0; i < body.length; i++) {
                            var node = body[i];
                            if (node.type === "infix") {
                                if (overIndex !== -1) {
                                    throw new _ParseError2.default("only one infix operator per group", node.value.token);
                                }
                                overIndex = i;
                                funcName = node.value.replaceWith;
                            }
                        }

                        if (overIndex !== -1) {
                            var numerNode = void 0;
                            var denomNode = void 0;

                            var numerBody = body.slice(0, overIndex);
                            var denomBody = body.slice(overIndex + 1);

                            if (numerBody.length === 1 && numerBody[0].type === "ordgroup") {
                                numerNode = numerBody[0];
                            } else {
                                numerNode = new _ParseNode2.default("ordgroup", numerBody, this.mode);
                            }

                            if (denomBody.length === 1 && denomBody[0].type === "ordgroup") {
                                denomNode = denomBody[0];
                            } else {
                                denomNode = new _ParseNode2.default("ordgroup", denomBody, this.mode);
                            }

                            var value = this.callFunction(funcName, [numerNode, denomNode], []);
                            return [new _ParseNode2.default(value.type, value, this.mode)];
                        } else {
                            return body;
                        }
                    }

                    // The greediness of a superscript or subscript

                }, {
                    key: "handleSupSubscript",

                    /**
                     * Handle a subscript or superscript with nice errors.
                     * @param {string} name For error reporting.
                     * @return {ParsedNode}
                     */
                    value: function handleSupSubscript(name) {
                        var symbolToken = this.nextToken;
                        var symbol = symbolToken.text;
                        this.consume();
                        var group = this.parseGroup();

                        if (!group) {
                            if (!this.settings.throwOnError && this.nextToken.text[0] === "\\") {
                                return this.handleUnsupportedCmd();
                            } else {
                                throw new _ParseError2.default("Expected group after '" + symbol + "'", symbolToken);
                            }
                        }

                        var arg = assertFuncOrArg(group);
                        if (arg.type === "fn") {
                            // ^ and _ have a greediness, so handle interactions with functions'
                            // greediness
                            var funcGreediness = _functions2.default[group.result].greediness;
                            if (funcGreediness > Parser.SUPSUB_GREEDINESS) {
                                return this.parseGivenFunction(group);
                            } else {
                                throw new _ParseError2.default("Got function '" + group.result + "' with no arguments " + "as " + name, symbolToken);
                            }
                        } else {
                            return group.result;
                        }
                    }

                    /**
                     * Converts the textual input of an unsupported command into a text node
                     * contained within a color node whose color is determined by errorColor
                     */

                }, {
                    key: "handleUnsupportedCmd",
                    value: function handleUnsupportedCmd() {
                        var text = this.nextToken.text;
                        var textordArray = [];

                        for (var i = 0; i < text.length; i++) {
                            textordArray.push(new _ParseNode2.default("textord", text[i], "text"));
                        }

                        var textNode = new _ParseNode2.default("text", {
                            body: textordArray,
                            type: "text"
                        }, this.mode);

                        var colorNode = new _ParseNode2.default("color", {
                            color: this.settings.errorColor,
                            value: [textNode],
                            type: "color"
                        }, this.mode);

                        this.consume();
                        return colorNode;
                    }

                    /**
                     * Parses a group with optional super/subscripts.
                     *
                     * @param {"]" | "}"} breakOnTokenText - character to stop parsing the group on.
                     * @return {?ParseNode}
                     */

                }, {
                    key: "parseAtom",
                    value: function parseAtom(breakOnTokenText) {
                        // The body of an atom is an implicit group, so that things like
                        // \left(x\right)^2 work correctly.
                        var base = this.parseImplicitGroup(breakOnTokenText);

                        // In text mode, we don't have superscripts or subscripts
                        if (this.mode === "text") {
                            return base;
                        }

                        // Note that base may be empty (i.e. null) at this point.

                        var superscript = void 0;
                        var subscript = void 0;
                        while (true) {
                            // Lex the first token
                            var lex = this.nextToken;

                            if (lex.text === "\\limits" || lex.text === "\\nolimits") {
                                // We got a limit control
                                if (!base || base.type !== "op") {
                                    throw new _ParseError2.default("Limit controls must follow a math operator", lex);
                                } else {
                                    var limits = lex.text === "\\limits";
                                    base.value.limits = limits;
                                    base.value.alwaysHandleSupSub = true;
                                }
                                this.consume();
                            } else if (lex.text === "^") {
                                // We got a superscript start
                                if (superscript) {
                                    throw new _ParseError2.default("Double superscript", lex);
                                }
                                superscript = this.handleSupSubscript("superscript");
                            } else if (lex.text === "_") {
                                // We got a subscript start
                                if (subscript) {
                                    throw new _ParseError2.default("Double subscript", lex);
                                }
                                subscript = this.handleSupSubscript("subscript");
                            } else if (lex.text === "'") {
                                // We got a prime
                                if (superscript) {
                                    throw new _ParseError2.default("Double superscript", lex);
                                }
                                var prime = new _ParseNode2.default("textord", "\\prime", this.mode);

                                // Many primes can be grouped together, so we handle this here
                                var primes = [prime];
                                this.consume();
                                // Keep lexing tokens until we get something that's not a prime
                                while (this.nextToken.text === "'") {
                                    // For each one, add another prime to the list
                                    primes.push(prime);
                                    this.consume();
                                }
                                // If there's a superscript following the primes, combine that
                                // superscript in with the primes.
                                if (this.nextToken.text === "^") {
                                    primes.push(this.handleSupSubscript("superscript"));
                                }
                                // Put everything into an ordgroup as the superscript
                                superscript = new _ParseNode2.default("ordgroup", primes, this.mode);
                            } else {
                                // If it wasn't ^, _, or ', stop parsing super/subscripts
                                break;
                            }
                        }

                        if (superscript || subscript) {
                            // If we got either a superscript or subscript, create a supsub
                            return new _ParseNode2.default("supsub", {
                                base: base,
                                sup: superscript,
                                sub: subscript
                            }, this.mode);
                        } else {
                            // Otherwise return the original body
                            return base;
                        }
                    }

                    // A list of the size-changing functions, for use in parseImplicitGroup


                    // A list of the style-changing functions, for use in parseImplicitGroup


                    // Old font functions

                }, {
                    key: "parseImplicitGroup",

                    /**
                     * Parses an implicit group, which is a group that starts at the end of a
                     * specified, and ends right before a higher explicit group ends, or at EOL. It
                     * is used for functions that appear to affect the current style, like \Large or
                     * \textrm, where instead of keeping a style we just pretend that there is an
                     * implicit grouping after it until the end of the group. E.g.
                     *   small text {\Large large text} small text again
                     * It is also used for \left and \right to get the correct grouping.
                     *
                     * @param {"]" | "}"} breakOnTokenText - character to stop parsing the group on.
                     * @return {?ParseNode}
                     */
                    value: function parseImplicitGroup(breakOnTokenText) {
                        var start = this.parseSymbol();

                        if (start == null) {
                            // If we didn't get anything we handle, fall back to parseFunction
                            return this.parseFunction();
                        }

                        var func = start.result;

                        if (func === "\\left") {
                            // If we see a left:
                            // Parse the entire left function (including the delimiter)
                            var left = this.parseGivenFunction(start);
                            // Parse out the implicit body
                            ++this.leftrightDepth;
                            var body = this.parseExpression(false);
                            --this.leftrightDepth;
                            // Check the next token
                            this.expect("\\right", false);
                            var right = this.parseFunction();
                            return new _ParseNode2.default("leftright", {
                                body: body,
                                left: left.value.value,
                                right: right.value.value
                            }, this.mode);
                        } else if (func === "\\begin") {
                            // begin...end is similar to left...right
                            var begin = this.parseGivenFunction(start);
                            var envName = begin.value.name;
                            if (!_environments2.default.has(envName)) {
                                throw new _ParseError2.default("No such environment: " + envName, begin.value.nameGroup);
                            }
                            // Build the environment object. Arguments and other information will
                            // be made available to the begin and end methods using properties.
                            var env = _environments2.default.get(envName);

                            var _parseArguments = this.parseArguments("\\begin{" + envName + "}", env),
                                args = _parseArguments.args,
                                optArgs = _parseArguments.optArgs;

                            var context = {
                                mode: this.mode,
                                envName: envName,
                                parser: this
                            };
                            var result = env.handler(context, args, optArgs);
                            this.expect("\\end", false);
                            var endNameToken = this.nextToken;
                            var end = this.parseFunction();
                            if (end.value.name !== envName) {
                                throw new _ParseError2.default("Mismatch: \\begin{" + envName + "} matched " + "by \\end{" + end.value.name + "}", endNameToken);
                            }
                            result.position = end.position;
                            return result;
                        } else if (_utils2.default.contains(Parser.sizeFuncs, func)) {
                            // If we see a sizing function, parse out the implicit body
                            this.consumeSpaces();
                            var _body = this.parseExpression(false, breakOnTokenText);
                            return new _ParseNode2.default("sizing", {
                                // Figure out what size to use based on the list of functions above
                                size: _utils2.default.indexOf(Parser.sizeFuncs, func) + 1,
                                value: _body
                            }, this.mode);
                        } else if (_utils2.default.contains(Parser.styleFuncs, func)) {
                            // If we see a styling function, parse out the implicit body
                            this.consumeSpaces();
                            var _body2 = this.parseExpression(true, breakOnTokenText);
                            return new _ParseNode2.default("styling", {
                                // Figure out what style to use by pulling out the style from
                                // the function name
                                style: func.slice(1, func.length - 5),
                                value: _body2
                            }, this.mode);
                        } else if (func in Parser.oldFontFuncs) {
                            var style = Parser.oldFontFuncs[func];
                            // If we see an old font function, parse out the implicit body
                            this.consumeSpaces();
                            var _body3 = this.parseExpression(true, breakOnTokenText);
                            if (style.slice(0, 4) === 'text') {
                                return new _ParseNode2.default("text", {
                                    style: style,
                                    body: new _ParseNode2.default("ordgroup", _body3, this.mode)
                                }, this.mode);
                            } else {
                                return new _ParseNode2.default("font", {
                                    font: style,
                                    body: new _ParseNode2.default("ordgroup", _body3, this.mode)
                                }, this.mode);
                            }
                        } else if (func === "\\color") {
                            // If we see a styling function, parse out the implicit body
                            var color = this.parseColorGroup(false);
                            if (!color) {
                                throw new _ParseError2.default("\\color not followed by color");
                            }
                            var _body4 = this.parseExpression(true, breakOnTokenText);
                            return new _ParseNode2.default("color", {
                                type: "color",
                                color: color.result.value,
                                value: _body4
                            }, this.mode);
                        } else if (func === "$") {
                            if (this.mode === "math") {
                                throw new _ParseError2.default("$ within math mode");
                            }
                            this.consume();
                            var outerMode = this.mode;
                            this.switchMode("math");
                            var _body5 = this.parseExpression(false, "$");
                            this.expect("$", true);
                            this.switchMode(outerMode);
                            return new _ParseNode2.default("styling", {
                                style: "text",
                                value: _body5
                            }, "math");
                        } else {
                            // Defer to parseGivenFunction if it's not a function we handle
                            return this.parseGivenFunction(start);
                        }
                    }

                    /**
                     * Parses an entire function, including its base and all of its arguments.
                     * It also handles the case where the parsed node is not a function.
                     *
                     * @return {?ParseNode}
                     */

                }, {
                    key: "parseFunction",
                    value: function parseFunction() {
                        var baseGroup = this.parseGroup();
                        return baseGroup ? this.parseGivenFunction(baseGroup) : null;
                    }

                    /**
                     * Same as parseFunction(), except that the base is provided, guaranteeing a
                     * non-nullable result.
                     *
                     * @param {ParsedFuncOrArgOrDollar} baseGroup
                     * @return {ParseNode}
                     */

                }, {
                    key: "parseGivenFunction",
                    value: function parseGivenFunction(baseGroup) {
                        baseGroup = assertFuncOrArg(baseGroup);
                        if (baseGroup.type === "fn") {
                            var func = baseGroup.result;
                            var funcData = _functions2.default[func];
                            if (this.mode === "text" && !funcData.allowedInText) {
                                throw new _ParseError2.default("Can't use function '" + func + "' in text mode", baseGroup.token);
                            } else if (this.mode === "math" && funcData.allowedInMath === false) {
                                throw new _ParseError2.default("Can't use function '" + func + "' in math mode", baseGroup.token);
                            }

                            var _parseArguments2 = this.parseArguments(func, funcData),
                                args = _parseArguments2.args,
                                optArgs = _parseArguments2.optArgs;

                            var token = baseGroup.token;
                            var result = this.callFunction(func, args, optArgs, token);
                            return new _ParseNode2.default(result.type, result, this.mode);
                        } else {
                            return baseGroup.result;
                        }
                    }

                    /**
                     * Call a function handler with a suitable context and arguments.
                     * @param {string} name
                     * @param {Array<ParseNode>} args
                     * @param {Array<?ParseNode>} optArgs
                     * @param {Token=} token
                     */

                }, {
                    key: "callFunction",
                    value: function callFunction(name, args, optArgs, token) {
                        var context = {
                            funcName: name,
                            parser: this,
                            token: token
                        };
                        return _functions2.default[name].handler(context, args, optArgs);
                    }

                    /**
                     * Parses the arguments of a function or environment
                     *
                     * @param {string} func  "\name" or "\begin{name}"
                     * @param {{
                     *   numArgs: number,
                     *   numOptionalArgs: (number|undefined),
                     * }} funcData
                     * @return {{
                     *   args: Array<ParseNode>,
                     *   optArgs: Array<?ParseNode>,
                     * }}
                     */

                }, {
                    key: "parseArguments",
                    value: function parseArguments(func, funcData) {
                        var totalArgs = funcData.numArgs + funcData.numOptionalArgs;
                        if (totalArgs === 0) {
                            return { args: [], optArgs: [] };
                        }

                        var baseGreediness = funcData.greediness;
                        var args = [];
                        var optArgs = [];

                        for (var i = 0; i < totalArgs; i++) {
                            var nextToken = this.nextToken;
                            var argType = funcData.argTypes && funcData.argTypes[i];
                            var isOptional = i < funcData.numOptionalArgs;
                            var arg = argType ? this.parseGroupOfType(argType, isOptional) : this.parseGroup(isOptional);
                            if (!arg) {
                                if (isOptional) {
                                    optArgs.push(null);
                                    continue;
                                }
                                if (!this.settings.throwOnError && this.nextToken.text[0] === "\\") {
                                    arg = newArgument(this.handleUnsupportedCmd(), nextToken);
                                } else {
                                    throw new _ParseError2.default("Expected group after '" + func + "'", nextToken);
                                }
                            }
                            var argNode = void 0;
                            arg = assertFuncOrArg(arg);
                            if (arg.type === "fn") {
                                var argGreediness = _functions2.default[arg.result].greediness;
                                if (argGreediness > baseGreediness) {
                                    argNode = this.parseGivenFunction(arg);
                                } else {
                                    throw new _ParseError2.default("Got function '" + arg.result + "' as " + "argument to '" + func + "'", nextToken);
                                }
                            } else {
                                argNode = arg.result;
                            }
                            (isOptional ? optArgs : args).push(argNode);
                        }

                        return { args: args, optArgs: optArgs };
                    }

                    /**
                     * Parses a group when the mode is changing.
                     *
                     * @return {?ParsedFuncOrArgOrDollar}
                     */

                }, {
                    key: "parseGroupOfType",
                    value: function parseGroupOfType(innerMode, optional) {
                        var outerMode = this.mode;
                        // Handle `original` argTypes
                        if (innerMode === "original") {
                            innerMode = outerMode;
                        }

                        if (innerMode === "color") {
                            return this.parseColorGroup(optional);
                        }
                        if (innerMode === "size") {
                            return this.parseSizeGroup(optional);
                        }

                        this.switchMode(innerMode);
                        if (innerMode === "text") {
                            // text mode is special because it should ignore the whitespace before
                            // it
                            this.consumeSpaces();
                        }
                        // By the time we get here, innerMode is one of "text" or "math".
                        // We switch the mode of the parser, recurse, then restore the old mode.
                        var res = this.parseGroup(optional);
                        this.switchMode(outerMode);
                        return res;
                    }
                }, {
                    key: "consumeSpaces",
                    value: function consumeSpaces() {
                        while (this.nextToken.text === " ") {
                            this.consume();
                        }
                    }

                    /**
                     * Parses a group, essentially returning the string formed by the
                     * brace-enclosed tokens plus some position information.
                     *
                     * @param {string} modeName  Used to describe the mode in error messages
                     * @param {boolean=} optional  Whether the group is optional or required
                     * @return {?Token}
                     */

                }, {
                    key: "parseStringGroup",
                    value: function parseStringGroup(modeName, optional) {
                        if (optional && this.nextToken.text !== "[") {
                            return null;
                        }
                        var outerMode = this.mode;
                        this.mode = "text";
                        this.expect(optional ? "[" : "{");
                        var str = "";
                        var firstToken = this.nextToken;
                        var lastToken = firstToken;
                        while (this.nextToken.text !== (optional ? "]" : "}")) {
                            if (this.nextToken.text === "EOF") {
                                throw new _ParseError2.default("Unexpected end of input in " + modeName, firstToken.range(this.nextToken, str));
                            }
                            lastToken = this.nextToken;
                            str += lastToken.text;
                            this.consume();
                        }
                        this.mode = outerMode;
                        this.expect(optional ? "]" : "}");
                        return firstToken.range(lastToken, str);
                    }

                    /**
                     * Parses a regex-delimited group: the largest sequence of tokens
                     * whose concatenated strings match `regex`. Returns the string
                     * formed by the tokens plus some position information.
                     *
                     * @param {RegExp} regex
                     * @param {string} modeName  Used to describe the mode in error messages
                     * @return {Token}
                     */

                }, {
                    key: "parseRegexGroup",
                    value: function parseRegexGroup(regex, modeName) {
                        var outerMode = this.mode;
                        this.mode = "text";
                        var firstToken = this.nextToken;
                        var lastToken = firstToken;
                        var str = "";
                        while (this.nextToken.text !== "EOF" && regex.test(str + this.nextToken.text)) {
                            lastToken = this.nextToken;
                            str += lastToken.text;
                            this.consume();
                        }
                        if (str === "") {
                            throw new _ParseError2.default("Invalid " + modeName + ": '" + firstToken.text + "'", firstToken);
                        }
                        this.mode = outerMode;
                        return firstToken.range(lastToken, str);
                    }

                    /**
                     * Parses a color description.
                     */

                }, {
                    key: "parseColorGroup",
                    value: function parseColorGroup(optional) {
                        var res = this.parseStringGroup("color", optional);
                        if (!res) {
                            return null;
                        }
                        var match = /^(#[a-f0-9]{3}|#[a-f0-9]{6}|[a-z]+)$/i.exec(res.text);
                        if (!match) {
                            throw new _ParseError2.default("Invalid color: '" + res.text + "'", res);
                        }
                        return newArgument(new _ParseNode2.default("color", match[0], this.mode), res);
                    }

                    /**
                     * Parses a size specification, consisting of magnitude and unit.
                     */

                }, {
                    key: "parseSizeGroup",
                    value: function parseSizeGroup(optional) {
                        var res = void 0;
                        if (!optional && this.nextToken.text !== "{") {
                            res = this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/, "size");
                        } else {
                            res = this.parseStringGroup("size", optional);
                        }
                        if (!res) {
                            return null;
                        }
                        var match = /([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(res.text);
                        if (!match) {
                            throw new _ParseError2.default("Invalid size: '" + res.text + "'", res);
                        }
                        var data = {
                            number: +(match[1] + match[2]), // sign + magnitude, cast to number
                            unit: match[3]
                        };
                        if (!(0, _units.validUnit)(data)) {
                            throw new _ParseError2.default("Invalid unit: '" + data.unit + "'", res);
                        }
                        return newArgument(new _ParseNode2.default("size", data, this.mode), res);
                    }

                    /**
                     * If the argument is false or absent, this parses an ordinary group,
                     * which is either a single nucleus (like "x") or an expression
                     * in braces (like "{x+y}").
                     * If the argument is true, it parses either a bracket-delimited expression
                     * (like "[x+y]") or returns null to indicate the absence of a
                     * bracket-enclosed group.
                     *
                     * @param {boolean=} optional  Whether the group is optional or required
                     * @return {?ParsedFuncOrArgOrDollar}
                     */

                }, {
                    key: "parseGroup",
                    value: function parseGroup(optional) {
                        var firstToken = this.nextToken;
                        // Try to parse an open brace
                        if (this.nextToken.text === (optional ? "[" : "{")) {
                            // If we get a brace, parse an expression
                            this.consume();
                            var expression = this.parseExpression(false, optional ? "]" : "}");
                            var lastToken = this.nextToken;
                            // Make sure we get a close brace
                            this.expect(optional ? "]" : "}");
                            if (this.mode === "text") {
                                this.formLigatures(expression);
                            }
                            return newArgument(new _ParseNode2.default("ordgroup", expression, this.mode, firstToken, lastToken), firstToken.range(lastToken, firstToken.text));
                        } else {
                            // Otherwise, just return a nucleus, or nothing for an optional group
                            return optional ? null : this.parseSymbol();
                        }
                    }

                    /**
                     * Form ligature-like combinations of characters for text mode.
                     * This includes inputs like "--", "---", "``" and "''".
                     * The result will simply replace multiple textord nodes with a single
                     * character in each value by a single textord node having multiple
                     * characters in its value.  The representation is still ASCII source.
                     *
                     * @param {Array.<ParseNode>} group  the nodes of this group,
                     *                                   list will be moified in place
                     */

                }, {
                    key: "formLigatures",
                    value: function formLigatures(group) {
                        var n = group.length - 1;
                        for (var i = 0; i < n; ++i) {
                            var a = group[i];
                            var v = a.value;
                            if (v === "-" && group[i + 1].value === "-") {
                                if (i + 1 < n && group[i + 2].value === "-") {
                                    group.splice(i, 3, new _ParseNode2.default("textord", "---", "text", a, group[i + 2]));
                                    n -= 2;
                                } else {
                                    group.splice(i, 2, new _ParseNode2.default("textord", "--", "text", a, group[i + 1]));
                                    n -= 1;
                                }
                            }
                            if ((v === "'" || v === "`") && group[i + 1].value === v) {
                                group.splice(i, 2, new _ParseNode2.default("textord", v + v, "text", a, group[i + 1]));
                                n -= 1;
                            }
                        }
                    }

                    /**
                     * Parse a single symbol out of the string. Here, we handle both the functions
                     * we have defined, as well as the single character symbols
                     *
                     * @return {?ParsedFuncOrArgOrDollar}
                     */

                }, {
                    key: "parseSymbol",
                    value: function parseSymbol() {
                        var nucleus = this.nextToken;

                        if (_functions2.default[nucleus.text]) {
                            this.consume();
                            // If there exists a function with this name, we return the function and
                            // say that it is a function.
                            return newFunction(nucleus);
                        } else if (_symbols2.default[this.mode][nucleus.text]) {
                            this.consume();
                            // Otherwise if this is a no-argument function, find the type it
                            // corresponds to in the symbols map
                            return newArgument(new _ParseNode2.default(_symbols2.default[this.mode][nucleus.text].group, nucleus.text, this.mode, nucleus), nucleus);
                        } else if (this.mode === "text" && _unicodeRegexes.cjkRegex.test(nucleus.text)) {
                            this.consume();
                            return newArgument(new _ParseNode2.default("textord", nucleus.text, this.mode, nucleus), nucleus);
                        } else if (nucleus.text === "$") {
                            return newDollar(nucleus);
                        } else if (/^\\verb[^a-zA-Z]/.test(nucleus.text)) {
                            this.consume();
                            var arg = nucleus.text.slice(5);
                            var star = arg.charAt(0) === "*";
                            if (star) {
                                arg = arg.slice(1);
                            }
                            // Lexer's tokenRegex is constructed to always have matching
                            // first/last characters.
                            if (arg.length < 2 || arg.charAt(0) !== arg.slice(-1)) {
                                throw new _ParseError2.default("\\verb assertion failed --\n                    please report what input caused this bug");
                            }
                            arg = arg.slice(1, -1); // remove first and last char
                            return newArgument(new _ParseNode2.default("verb", {
                                body: arg,
                                star: star
                            }, "text"), nucleus);
                        } else {
                            return null;
                        }
                    }
                }]);
                return Parser;
            }();

            Parser.endOfExpression = ["}", "\\end", "\\right", "&", "\\\\", "\\cr"];
            Parser.SUPSUB_GREEDINESS = 1;
            Parser.sizeFuncs = ["\\tiny", "\\sixptsize", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"];
            Parser.styleFuncs = ["\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"];
            Parser.oldFontFuncs = {
                "\\rm": "mathrm",
                "\\sf": "mathsf",
                "\\tt": "mathtt",
                "\\bf": "mathbf",
                "\\it": "mathit"
                //"\\sl": "textsl",
                //"\\sc": "textsc",
            };
            exports.default = Parser;
        }, { "./MacroExpander": 82, "./ParseError": 84, "./ParseNode": 85, "./environments": 99, "./functions": 103, "./symbols": 112, "./unicodeRegexes": 113, "./units": 114, "./utils": 115, "babel-runtime/helpers/classCallCheck": 8, "babel-runtime/helpers/createClass": 9 }], 87: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _utils = require("./utils");

            var _utils2 = _interopRequireDefault(_utils);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * The main Settings object
             *
             * The current options stored are:
             *  - displayMode: Whether the expression should be typeset as inline math
             *                 (false, the default), meaning that the math starts in
             *                 \textstyle and is placed in an inline-block); or as display
             *                 math (true), meaning that the math starts in \displaystyle
             *                 and is placed in a block with vertical margin.
             */
            var Settings = function Settings(options) {
                (0, _classCallCheck3.default)(this, Settings);

                // allow null options
                options = options || {};
                this.displayMode = _utils2.default.deflt(options.displayMode, false);
                this.throwOnError = _utils2.default.deflt(options.throwOnError, true);
                this.errorColor = _utils2.default.deflt(options.errorColor, "#cc0000");
                this.macros = options.macros || {};
                this.colorIsTextColor = _utils2.default.deflt(options.colorIsTextColor, false);
                this.maxSize = Math.max(0, _utils2.default.deflt(options.maxSize, Infinity));
            };
            /**
             * This is a module for storing settings passed into KaTeX. It correctly handles
             * default settings.
             */

            exports.default = Settings;
        }, { "./utils": 115, "babel-runtime/helpers/classCallCheck": 8 }], 88: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _freeze = require("babel-runtime/core-js/object/freeze");

            var _freeze2 = _interopRequireDefault(_freeze);

            var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = require("babel-runtime/helpers/createClass");

            var _createClass3 = _interopRequireDefault(_createClass2);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * Lexing or parsing positional information for error reporting.
             * This object is immutable.
             */
            var SourceLocation = function () {
                // End offset, zero-based exclusive.

                // Lexer holding the input string.
                function SourceLocation(lexer, start, end) {
                    (0, _classCallCheck3.default)(this, SourceLocation);

                    this.lexer = lexer;
                    this.start = start;
                    this.end = end;
                    (0, _freeze2.default)(this); // Immutable to allow sharing in range().
                }

                /**
                 * Merges two `SourceLocation`s from location providers, given they are
                 * provided in order of appearance.
                 * - Returns the first one's location if only the first is provided.
                 * - Returns a merged range of the first and the last if both are provided
                 *   and their lexers match.
                 * - Otherwise, returns null.
                 */
                // Start offset, zero-based inclusive.


                (0, _createClass3.default)(SourceLocation, null, [{
                    key: "range",
                    value: function range(first, second) {
                        if (!second) {
                            return first && first.loc;
                        } else if (!first || !first.loc || !second.loc || first.loc.lexer !== second.loc.lexer) {
                            return null;
                        } else {
                            return new SourceLocation(first.loc.lexer, first.loc.start, second.loc.end);
                        }
                    }
                }]);
                return SourceLocation;
            }();

            exports.default = SourceLocation;
        }, { "babel-runtime/core-js/object/freeze": 7, "babel-runtime/helpers/classCallCheck": 8, "babel-runtime/helpers/createClass": 9 }], 89: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = require("babel-runtime/helpers/createClass");

            var _createClass3 = _interopRequireDefault(_createClass2);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * This file contains information and classes for the various kinds of styles
             * used in TeX. It provides a generic `Style` class, which holds information
             * about a specific style. It then provides instances of all the different kinds
             * of styles possible, and provides functions to move between them and get
             * information about them.
             */

            /**
             * The main style class. Contains a unique id for the style, a size (which is
             * the same for cramped and uncramped version of a style), and a cramped flag.
             */
            var Style = function () {
                function Style(id, size, cramped) {
                    (0, _classCallCheck3.default)(this, Style);

                    this.id = id;
                    this.size = size;
                    this.cramped = cramped;
                }

                /**
                 * Get the style of a superscript given a base in the current style.
                 */

                (0, _createClass3.default)(Style, [{
                    key: "sup",
                    value: function sup() {
                        return styles[_sup[this.id]];
                    }

                    /**
                     * Get the style of a subscript given a base in the current style.
                     */

                }, {
                    key: "sub",
                    value: function sub() {
                        return styles[_sub[this.id]];
                    }

                    /**
                     * Get the style of a fraction numerator given the fraction in the current
                     * style.
                     */

                }, {
                    key: "fracNum",
                    value: function fracNum() {
                        return styles[_fracNum[this.id]];
                    }

                    /**
                     * Get the style of a fraction denominator given the fraction in the current
                     * style.
                     */

                }, {
                    key: "fracDen",
                    value: function fracDen() {
                        return styles[_fracDen[this.id]];
                    }

                    /**
                     * Get the cramped version of a style (in particular, cramping a cramped style
                     * doesn't change the style).
                     */

                }, {
                    key: "cramp",
                    value: function cramp() {
                        return styles[_cramp[this.id]];
                    }

                    /**
                     * Get a text or display version of this style.
                     */

                }, {
                    key: "text",
                    value: function text() {
                        return styles[_text[this.id]];
                    }

                    /**
                     * Return true if this style is tightly spaced (scriptstyle/scriptscriptstyle)
                     */

                }, {
                    key: "isTight",
                    value: function isTight() {
                        return this.size >= 2;
                    }
                }]);
                return Style;
            }();

            // Export an interface for type checking, but don't expose the implementation.
            // This way, no more styles can be generated.


            // IDs of the different styles
            var D = 0;
            var Dc = 1;
            var T = 2;
            var Tc = 3;
            var S = 4;
            var Sc = 5;
            var SS = 6;
            var SSc = 7;

            // Instances of the different styles
            var styles = [new Style(D, 0, false), new Style(Dc, 0, true), new Style(T, 1, false), new Style(Tc, 1, true), new Style(S, 2, false), new Style(Sc, 2, true), new Style(SS, 3, false), new Style(SSc, 3, true)];

            // Lookup tables for switching from one style to another
            var _sup = [S, Sc, S, Sc, SS, SSc, SS, SSc];
            var _sub = [Sc, Sc, Sc, Sc, SSc, SSc, SSc, SSc];
            var _fracNum = [T, Tc, S, Sc, SS, SSc, SS, SSc];
            var _fracDen = [Tc, Tc, Sc, Sc, SSc, SSc, SSc, SSc];
            var _cramp = [Dc, Dc, Tc, Tc, Sc, Sc, SSc, SSc];
            var _text = [D, Dc, T, Tc, T, Tc, T, Tc];

            // We only export some of the styles.
            exports.default = {
                DISPLAY: styles[D],
                TEXT: styles[T],
                SCRIPT: styles[S],
                SCRIPTSCRIPT: styles[SS]
            };
        }, { "babel-runtime/helpers/classCallCheck": 8, "babel-runtime/helpers/createClass": 9 }], 90: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.Token = undefined;

            var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = require("babel-runtime/helpers/createClass");

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _SourceLocation = require("./SourceLocation");

            var _SourceLocation2 = _interopRequireDefault(_SourceLocation);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * The resulting token returned from `lex`.
             *
             * It consists of the token text plus some position information.
             * The position information is essentially a range in an input string,
             * but instead of referencing the bare input string, we refer to the lexer.
             * That way it is possible to attach extra metadata to the input string,
             * like for example a file name or similar.
             *
             * The position information is optional, so it is OK to construct synthetic
             * tokens if appropriate. Not providing available position information may
             * lead to degraded error reporting, though.
             */

            /**
             * Interface required to break circular dependency between Token, Lexer, and
             * ParseError.
             */
            var Token = exports.Token = function () {
                function Token(text, // the text of this token
                loc) {
                    (0, _classCallCheck3.default)(this, Token);

                    this.text = text;
                    this.loc = loc;
                }

                /**
                 * Given a pair of tokens (this and endToken), compute a `Token` encompassing
                 * the whole input range enclosed by these two.
                 */

                (0, _createClass3.default)(Token, [{
                    key: "range",
                    value: function range(endToken, // last token of the range, inclusive
                    text) // the text of the newly constructed token
                    {
                        return new Token(text, _SourceLocation2.default.range(this, endToken));
                    }
                }]);
                return Token;
            }();
        }, { "./SourceLocation": 88, "babel-runtime/helpers/classCallCheck": 8, "babel-runtime/helpers/createClass": 9 }], 91: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _domTree = require("./domTree");

            var _domTree2 = _interopRequireDefault(_domTree);

            var _fontMetrics = require("./fontMetrics");

            var _fontMetrics2 = _interopRequireDefault(_fontMetrics);

            var _symbols = require("./symbols");

            var _symbols2 = _interopRequireDefault(_symbols);

            var _utils = require("./utils");

            var _utils2 = _interopRequireDefault(_utils);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            // The following have to be loaded from Main-Italic font, using class mainit
            /* eslint no-console:0 */
            /**
             * This module contains general functions that can be used for building
             * different kinds of domTree nodes in a consistent manner.
             */

            var mainitLetters = ["\\imath", // dotless i
            "\\jmath", // dotless j
            "\\pounds"];

            /**
             * Looks up the given symbol in fontMetrics, after applying any symbol
             * replacements defined in symbol.js
             */
            var lookupSymbol = function lookupSymbol(value, fontFamily, mode) {
                // Replace the value with its replaced value from symbol.js
                if (_symbols2.default[mode][value] && _symbols2.default[mode][value].replace) {
                    value = _symbols2.default[mode][value].replace;
                }
                return {
                    value: value,
                    metrics: _fontMetrics2.default.getCharacterMetrics(value, fontFamily)
                };
            };

            /**
             * Makes a symbolNode after translation via the list of symbols in symbols.js.
             * Correctly pulls out metrics for the character, and optionally takes a list of
             * classes to be attached to the node.
             *
             * TODO: make argument order closer to makeSpan
             * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
             * should if present come first in `classes`.
             */
            var makeSymbol = function makeSymbol(value, fontFamily, mode, options, classes) {
                var lookup = lookupSymbol(value, fontFamily, mode);
                var metrics = lookup.metrics;
                value = lookup.value;

                var symbolNode = void 0;
                if (metrics) {
                    var italic = metrics.italic;
                    if (mode === "text") {
                        italic = 0;
                    }
                    symbolNode = new _domTree2.default.symbolNode(value, metrics.height, metrics.depth, italic, metrics.skew, classes);
                } else {
                    // TODO(emily): Figure out a good way to only print this in development
                    typeof console !== "undefined" && console.warn("No character metrics for '" + value + "' in style '" + fontFamily + "'");
                    symbolNode = new _domTree2.default.symbolNode(value, 0, 0, 0, 0, classes);
                }

                if (options) {
                    symbolNode.maxFontSize = options.sizeMultiplier;
                    if (options.style.isTight()) {
                        symbolNode.classes.push("mtight");
                    }
                    if (options.getColor()) {
                        symbolNode.style.color = options.getColor();
                    }
                }

                return symbolNode;
            };

            /**
             * Makes a symbol in Main-Regular or AMS-Regular.
             * Used for rel, bin, open, close, inner, and punct.
             */
            var mathsym = function mathsym(value, mode, options, classes) {
                // Decide what font to render the symbol in by its entry in the symbols
                // table.
                // Have a special case for when the value = \ because the \ is used as a
                // textord in unsupported command errors but cannot be parsed as a regular
                // text ordinal and is therefore not present as a symbol in the symbols
                // table for text
                if (value === "\\" || _symbols2.default[mode][value].font === "main") {
                    return makeSymbol(value, "Main-Regular", mode, options, classes);
                } else {
                    return makeSymbol(value, "AMS-Regular", mode, options, classes.concat(["amsrm"]));
                }
            };

            /**
             * Makes a symbol in the default font for mathords and textords.
             */
            var mathDefault = function mathDefault(value, mode, options, classes, type) {
                if (type === "mathord") {
                    var fontLookup = mathit(value, mode, options, classes);
                    return makeSymbol(value, fontLookup.fontName, mode, options, classes.concat([fontLookup.fontClass]));
                } else if (type === "textord") {
                    var font = _symbols2.default[mode][value] && _symbols2.default[mode][value].font;
                    if (font === "ams") {
                        return makeSymbol(value, "AMS-Regular", mode, options, classes.concat(["amsrm"]));
                    } else {
                        // if (font === "main") {
                        return makeSymbol(value, "Main-Regular", mode, options, classes.concat(["mathrm"]));
                    }
                } else {
                    throw new Error("unexpected type: " + type + " in mathDefault");
                }
            };

            /**
             * Determines which of the two font names (Main-Italic and Math-Italic) and
             * corresponding style tags (mainit or mathit) to use for font "mathit",
             * depending on the symbol.  Use this function instead of fontMap for font
             * "mathit".
             */
            var mathit = function mathit(value, mode, options, classes) {
                if (/[0-9]/.test(value.charAt(0)) ||
                // glyphs for \imath and \jmath do not exist in Math-Italic so we
                // need to use Main-Italic instead
                _utils2.default.contains(mainitLetters, value)) {
                    return {
                        fontName: "Main-Italic",
                        fontClass: "mainit"
                    };
                } else {
                    return {
                        fontName: "Math-Italic",
                        fontClass: "mathit"
                    };
                }
            };

            /**
             * Makes either a mathord or textord in the correct font and color.
             */
            var makeOrd = function makeOrd(group, options, type) {
                var mode = group.mode;
                var value = group.value;

                var classes = ["mord"];

                var font = options.font;
                if (font) {
                    var fontLookup = void 0;
                    if (font === "mathit" || _utils2.default.contains(mainitLetters, value)) {
                        fontLookup = mathit(value, mode, options, classes);
                    } else {
                        fontLookup = fontMap[font];
                    }
                    if (lookupSymbol(value, fontLookup.fontName, mode).metrics) {
                        return makeSymbol(value, fontLookup.fontName, mode, options, classes.concat([fontLookup.fontClass || font]));
                    } else {
                        return mathDefault(value, mode, options, classes, type);
                    }
                } else {
                    return mathDefault(value, mode, options, classes, type);
                }
            };

            /**
             * Combine as many characters as possible in the given array of characters
             * via their tryCombine method.
             */
            var tryCombineChars = function tryCombineChars(chars) {
                for (var i = 0; i < chars.length - 1; i++) {
                    if (chars[i].tryCombine(chars[i + 1])) {
                        chars.splice(i + 1, 1);
                        i--;
                    }
                }
                return chars;
            };

            /**
             * Calculate the height, depth, and maxFontSize of an element based on its
             * children.
             */
            var sizeElementFromChildren = function sizeElementFromChildren(elem) {
                var height = 0;
                var depth = 0;
                var maxFontSize = 0;

                if (elem.children) {
                    for (var i = 0; i < elem.children.length; i++) {
                        if (elem.children[i].height > height) {
                            height = elem.children[i].height;
                        }
                        if (elem.children[i].depth > depth) {
                            depth = elem.children[i].depth;
                        }
                        if (elem.children[i].maxFontSize > maxFontSize) {
                            maxFontSize = elem.children[i].maxFontSize;
                        }
                    }
                }

                elem.height = height;
                elem.depth = depth;
                elem.maxFontSize = maxFontSize;
            };

            /**
             * Makes a span with the given list of classes, list of children, and options.
             *
             * TODO: Ensure that `options` is always provided (currently some call sites
             * don't pass it).
             * TODO: add a separate argument for math class (e.g. `mop`, `mbin`), which
             * should if present come first in `classes`.
             */
            var makeSpan = function makeSpan(classes, children, options) {
                var span = new _domTree2.default.span(classes, children, options);

                sizeElementFromChildren(span);

                return span;
            };

            /**
             * Prepends the given children to the given span, updating height, depth, and
             * maxFontSize.
             */
            var prependChildren = function prependChildren(span, children) {
                span.children = children.concat(span.children);

                sizeElementFromChildren(span);
            };

            /**
             * Makes a document fragment with the given list of children.
             */
            var makeFragment = function makeFragment(children) {
                var fragment = new _domTree2.default.documentFragment(children);

                sizeElementFromChildren(fragment);

                return fragment;
            };

            /**
             * Makes a vertical list by stacking elements and kerns on top of each other.
             * Allows for many different ways of specifying the positioning method.
             *
             * Arguments:
             *  - children: A list of child or kern nodes to be stacked on top of each other
             *              (i.e. the first element will be at the bottom, and the last at
             *              the top). Element nodes are specified as
             *                {type: "elem", elem: node}
             *              while kern nodes are specified as
             *                {type: "kern", size: size}
             *  - positionType: The method by which the vlist should be positioned. Valid
             *                  values are:
             *                   - "individualShift": The children list only contains elem
             *                                        nodes, and each node contains an extra
             *                                        "shift" value of how much it should be
             *                                        shifted (note that shifting is always
             *                                        moving downwards). positionData is
             *                                        ignored.
             *                   - "top": The positionData specifies the topmost point of
             *                            the vlist (note this is expected to be a height,
             *                            so positive values move up)
             *                   - "bottom": The positionData specifies the bottommost point
             *                               of the vlist (note this is expected to be a
             *                               depth, so positive values move down
             *                   - "shift": The vlist will be positioned such that its
             *                              baseline is positionData away from the baseline
             *                              of the first child. Positive values move
             *                              downwards.
             *                   - "firstBaseline": The vlist will be positioned such that
             *                                      its baseline is aligned with the
             *                                      baseline of the first child.
             *                                      positionData is ignored. (this is
             *                                      equivalent to "shift" with
             *                                      positionData=0)
             *  - positionData: Data used in different ways depending on positionType
             *  - options: An Options object
             *
             */
            var makeVList = function makeVList(children, positionType, positionData, options) {
                var depth = void 0;
                var currPos = void 0;
                var i = void 0;
                if (positionType === "individualShift") {
                    var oldChildren = children;
                    children = [oldChildren[0]];

                    // Add in kerns to the list of children to get each element to be
                    // shifted to the correct specified shift
                    depth = -oldChildren[0].shift - oldChildren[0].elem.depth;
                    currPos = depth;
                    for (i = 1; i < oldChildren.length; i++) {
                        var diff = -oldChildren[i].shift - currPos - oldChildren[i].elem.depth;
                        var size = diff - (oldChildren[i - 1].elem.height + oldChildren[i - 1].elem.depth);

                        currPos = currPos + diff;

                        children.push({ type: "kern", size: size });
                        children.push(oldChildren[i]);
                    }
                } else if (positionType === "top") {
                    // We always start at the bottom, so calculate the bottom by adding up
                    // all the sizes
                    var bottom = positionData;
                    for (i = 0; i < children.length; i++) {
                        if (children[i].type === "kern") {
                            bottom -= children[i].size;
                        } else {
                            bottom -= children[i].elem.height + children[i].elem.depth;
                        }
                    }
                    depth = bottom;
                } else if (positionType === "bottom") {
                    depth = -positionData;
                } else if (positionType === "shift") {
                    depth = -children[0].elem.depth - positionData;
                } else if (positionType === "firstBaseline") {
                    depth = -children[0].elem.depth;
                } else {
                    depth = 0;
                }

                // Create a strut that is taller than any list item. The strut is added to
                // each item, where it will determine the item's baseline. Since it has
                // `overflow:hidden`, the strut's top edge will sit on the item's line box's
                // top edge and the strut's bottom edge will sit on the item's baseline,
                // with no additional line-height spacing. This allows the item baseline to
                // be positioned precisely without worrying about font ascent and
                // line-height.
                var pstrutSize = 0;
                for (i = 0; i < children.length; i++) {
                    if (children[i].type === "elem") {
                        var child = children[i].elem;
                        pstrutSize = Math.max(pstrutSize, child.maxFontSize, child.height);
                    }
                }
                pstrutSize += 2;
                var pstrut = makeSpan(["pstrut"], []);
                pstrut.style.height = pstrutSize + "em";

                // Create a new list of actual children at the correct offsets
                var realChildren = [];
                var minPos = depth;
                var maxPos = depth;
                currPos = depth;
                for (i = 0; i < children.length; i++) {
                    if (children[i].type === "kern") {
                        currPos += children[i].size;
                    } else {
                        var _child = children[i].elem;

                        var childWrap = makeSpan([], [pstrut, _child]);
                        childWrap.style.top = -pstrutSize - currPos - _child.depth + "em";
                        if (children[i].marginLeft) {
                            childWrap.style.marginLeft = children[i].marginLeft;
                        }
                        if (children[i].marginRight) {
                            childWrap.style.marginRight = children[i].marginRight;
                        }

                        realChildren.push(childWrap);
                        currPos += _child.height + _child.depth;
                    }
                    minPos = Math.min(minPos, currPos);
                    maxPos = Math.max(maxPos, currPos);
                }

                // The vlist contents go in a table-cell with `vertical-align:bottom`.
                // This cell's bottom edge will determine the containing table's baseline
                // without overly expanding the containing line-box.
                var vlist = makeSpan(["vlist"], realChildren);
                vlist.style.height = maxPos + "em";

                // A second row is used if necessary to represent the vlist's depth.
                var rows = void 0;
                if (minPos < 0) {
                    var depthStrut = makeSpan(["vlist"], []);
                    depthStrut.style.height = -minPos + "em";

                    // Safari wants the first row to have inline content; otherwise it
                    // puts the bottom of the *second* row on the baseline.
                    var topStrut = makeSpan(["vlist-s"], [new _domTree2.default.symbolNode("\u200B")]);

                    rows = [makeSpan(["vlist-r"], [vlist, topStrut]), makeSpan(["vlist-r"], [depthStrut])];
                } else {
                    rows = [makeSpan(["vlist-r"], [vlist])];
                }

                var vtable = makeSpan(["vlist-t"], rows);
                if (rows.length === 2) {
                    vtable.classes.push("vlist-t2");
                }
                vtable.height = maxPos;
                vtable.depth = -minPos;
                return vtable;
            };

            // Converts verb group into body string, dealing with \verb* form
            var makeVerb = function makeVerb(group, options) {
                var text = group.value.body;
                if (group.value.star) {
                    text = text.replace(/ /g, "\u2423"); // Open Box
                } else {
                    text = text.replace(/ /g, '\xA0'); // No-Break Space
                    // (so that, in particular, spaces don't coalesce)
                }
                return text;
            };

            // A map of spacing functions to their attributes, like size and corresponding
            // CSS class
            var spacingFunctions = {
                "\\qquad": {
                    size: "2em",
                    className: "qquad"
                },
                "\\quad": {
                    size: "1em",
                    className: "quad"
                },
                "\\enspace": {
                    size: "0.5em",
                    className: "enspace"
                },
                "\\;": {
                    size: "0.277778em",
                    className: "thickspace"
                },
                "\\:": {
                    size: "0.22222em",
                    className: "mediumspace"
                },
                "\\,": {
                    size: "0.16667em",
                    className: "thinspace"
                },
                "\\!": {
                    size: "-0.16667em",
                    className: "negativethinspace"
                }
            };

            /**
             * Maps TeX font commands to objects containing:
             * - variant: string used for "mathvariant" attribute in buildMathML.js
             * - fontName: the "style" parameter to fontMetrics.getCharacterMetrics
             */
            // A map between tex font commands an MathML mathvariant attribute values
            var fontMap = {
                // styles
                "mathbf": {
                    variant: "bold",
                    fontName: "Main-Bold"
                },
                "mathrm": {
                    variant: "normal",
                    fontName: "Main-Regular"
                },
                "textit": {
                    variant: "italic",
                    fontName: "Main-Italic"
                },

                // "mathit" is missing because it requires the use of two fonts: Main-Italic
                // and Math-Italic.  This is handled by a special case in makeOrd which ends
                // up calling mathit.

                // families
                "mathbb": {
                    variant: "double-struck",
                    fontName: "AMS-Regular"
                },
                "mathcal": {
                    variant: "script",
                    fontName: "Caligraphic-Regular"
                },
                "mathfrak": {
                    variant: "fraktur",
                    fontName: "Fraktur-Regular"
                },
                "mathscr": {
                    variant: "script",
                    fontName: "Script-Regular"
                },
                "mathsf": {
                    variant: "sans-serif",
                    fontName: "SansSerif-Regular"
                },
                "mathtt": {
                    variant: "monospace",
                    fontName: "Typewriter-Regular"
                }
            };

            exports.default = {
                fontMap: fontMap,
                makeSymbol: makeSymbol,
                mathsym: mathsym,
                makeSpan: makeSpan,
                makeFragment: makeFragment,
                makeVList: makeVList,
                makeOrd: makeOrd,
                makeVerb: makeVerb,
                tryCombineChars: tryCombineChars,
                prependChildren: prependChildren,
                spacingFunctions: spacingFunctions
            };
        }, { "./domTree": 98, "./fontMetrics": 101, "./symbols": 112, "./utils": 115 }], 92: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.buildGroup = exports.groupTypes = exports.makeNullDelimiter = exports.buildExpression = exports.spliceSpaces = undefined;

            var _stringify = require("babel-runtime/core-js/json/stringify");

            var _stringify2 = _interopRequireDefault(_stringify);

            exports.default = buildHTML;

            var _ParseError = require("./ParseError");

            var _ParseError2 = _interopRequireDefault(_ParseError);

            var _Style = require("./Style");

            var _Style2 = _interopRequireDefault(_Style);

            var _buildCommon = require("./buildCommon");

            var _buildCommon2 = _interopRequireDefault(_buildCommon);

            var _delimiter = require("./delimiter");

            var _delimiter2 = _interopRequireDefault(_delimiter);

            var _domTree = require("./domTree");

            var _domTree2 = _interopRequireDefault(_domTree);

            var _units = require("./units");

            var _utils = require("./utils");

            var _utils2 = _interopRequireDefault(_utils);

            var _stretchy = require("./stretchy");

            var _stretchy2 = _interopRequireDefault(_stretchy);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * WARNING: New methods on groupTypes should be added to src/functions.
             *
             * This file does the main work of building a domTree structure from a parse
             * tree. The entry point is the `buildHTML` function, which takes a parse tree.
             * Then, the buildExpression, buildGroup, and various groupTypes functions are
             * called, to produce a final HTML tree.
             */

            var makeSpan = _buildCommon2.default.makeSpan;

            var isSpace = function isSpace(node) {
                return node instanceof _domTree2.default.span && node.classes[0] === "mspace";
            };

            // Binary atoms (first class `mbin`) change into ordinary atoms (`mord`)
            // depending on their surroundings. See TeXbook pg. 442-446, Rules 5 and 6,
            // and the text before Rule 19.
            var isBin = function isBin(node) {
                return node && node.classes[0] === "mbin";
            };

            var isBinLeftCanceller = function isBinLeftCanceller(node, isRealGroup) {
                // TODO: This code assumes that a node's math class is the first element
                // of its `classes` array. A later cleanup should ensure this, for
                // instance by changing the signature of `makeSpan`.
                if (node) {
                    return _utils2.default.contains(["mbin", "mopen", "mrel", "mop", "mpunct"], node.classes[0]);
                } else {
                    return isRealGroup;
                }
            };

            var isBinRightCanceller = function isBinRightCanceller(node, isRealGroup) {
                if (node) {
                    return _utils2.default.contains(["mrel", "mclose", "mpunct"], node.classes[0]);
                } else {
                    return isRealGroup;
                }
            };

            /**
             * Splice out any spaces from `children` starting at position `i`, and return
             * the spliced-out array. Returns null if `children[i]` does not exist or is not
             * a space.
             */
            var spliceSpaces = exports.spliceSpaces = function spliceSpaces(children, i) {
                var j = i;
                while (j < children.length && isSpace(children[j])) {
                    j++;
                }
                if (j === i) {
                    return null;
                } else {
                    return children.splice(i, j - i);
                }
            };

            /**
             * Take a list of nodes, build them in order, and return a list of the built
             * nodes. documentFragments are flattened into their contents, so the
             * returned list contains no fragments. `isRealGroup` is true if `expression`
             * is a real group (no atoms will be added on either side), as opposed to
             * a partial group (e.g. one created by \color).
             */
            var buildExpression = exports.buildExpression = function buildExpression(expression, options, isRealGroup) {
                // Parse expressions into `groups`.
                var groups = [];
                for (var i = 0; i < expression.length; i++) {
                    var group = expression[i];
                    var output = buildGroup(group, options);
                    if (output instanceof _domTree2.default.documentFragment) {
                        Array.prototype.push.apply(groups, output.children);
                    } else {
                        groups.push(output);
                    }
                }
                // At this point `groups` consists entirely of `symbolNode`s and `span`s.

                // Explicit spaces (e.g., \;, \,) should be ignored with respect to atom
                // spacing (e.g., "add thick space between mord and mrel"). Since CSS
                // adjacency rules implement atom spacing, spaces should be invisible to
                // CSS. So we splice them out of `groups` and into the atoms themselves.
                for (var _i = 0; _i < groups.length; _i++) {
                    var spaces = spliceSpaces(groups, _i);
                    if (spaces) {
                        // Splicing of spaces may have removed all remaining groups.
                        if (_i < groups.length) {
                            // If there is a following group, move space within it.
                            if (groups[_i] instanceof _domTree2.default.symbolNode) {
                                groups[_i] = makeSpan([].concat(groups[_i].classes), [groups[_i]]);
                            }
                            _buildCommon2.default.prependChildren(groups[_i], spaces);
                        } else {
                            // Otherwise, put any spaces back at the end of the groups.
                            Array.prototype.push.apply(groups, spaces);
                            break;
                        }
                    }
                }

                // Binary operators change to ordinary symbols in some contexts.
                for (var _i2 = 0; _i2 < groups.length; _i2++) {
                    if (isBin(groups[_i2]) && (isBinLeftCanceller(groups[_i2 - 1], isRealGroup) || isBinRightCanceller(groups[_i2 + 1], isRealGroup))) {
                        groups[_i2].classes[0] = "mord";
                    }
                }

                // Process \\not commands within the group.
                // TODO(kevinb): Handle multiple \\not commands in a row.
                // TODO(kevinb): Handle \\not{abc} correctly.  The \\not should appear over
                // the 'a' instead of the 'c'.
                for (var _i3 = 0; _i3 < groups.length; _i3++) {
                    if (groups[_i3].value === "\u0338" && _i3 + 1 < groups.length) {
                        var children = groups.slice(_i3, _i3 + 2);

                        children[0].classes = ["mainrm"];
                        // \u0338 is a combining glyph so we could reorder the children so
                        // that it comes after the other glyph.  This works correctly on
                        // most browsers except for Safari.  Instead we absolutely position
                        // the glyph and set its right side to match that of the other
                        // glyph which is visually equivalent.
                        children[0].style.position = "absolute";
                        children[0].style.right = "0";

                        // Copy the classes from the second glyph to the new container.
                        // This is so it behaves the same as though there was no \\not.
                        var classes = groups[_i3 + 1].classes;
                        var container = makeSpan(classes, children);

                        // LaTeX adds a space between ords separated by a \\not.
                        if (classes.indexOf("mord") !== -1) {
                            // \glue(\thickmuskip) 2.77771 plus 2.77771
                            container.style.paddingLeft = "0.277771em";
                        }

                        // Ensure that the \u0338 is positioned relative to the container.
                        container.style.position = "relative";
                        groups.splice(_i3, 2, container);
                    }
                }

                return groups;
            };

            // Return math atom class (mclass) of a domTree.
            var getTypeOfDomTree = function getTypeOfDomTree(node) {
                if (node instanceof _domTree2.default.documentFragment) {
                    if (node.children.length) {
                        return getTypeOfDomTree(node.children[node.children.length - 1]);
                    }
                } else {
                    if (_utils2.default.contains(["mord", "mop", "mbin", "mrel", "mopen", "mclose", "mpunct", "minner"], node.classes[0])) {
                        return node.classes[0];
                    }
                }
                return null;
            };

            /**
             * Sometimes, groups perform special rules when they have superscripts or
             * subscripts attached to them. This function lets the `supsub` group know that
             * its inner element should handle the superscripts and subscripts instead of
             * handling them itself.
             */
            var shouldHandleSupSub = function shouldHandleSupSub(group, options) {
                if (!group.value.base) {
                    return false;
                } else {
                    var base = group.value.base;
                    if (base.type === "op") {
                        // Operators handle supsubs differently when they have limits
                        // (e.g. `\displaystyle\sum_2^3`)
                        return base.value.limits && (options.style.size === _Style2.default.DISPLAY.size || base.value.alwaysHandleSupSub);
                    } else if (base.type === "accent") {
                        return isCharacterBox(base.value.base);
                    } else if (base.type === "horizBrace") {
                        var isSup = group.value.sub ? false : true;
                        return isSup === base.value.isOver;
                    } else {
                        return null;
                    }
                }
            };

            /**
             * Sometimes we want to pull out the innermost element of a group. In most
             * cases, this will just be the group itself, but when ordgroups and colors have
             * a single element, we want to pull that out.
             */
            var getBaseElem = function getBaseElem(group) {
                if (!group) {
                    return false;
                } else if (group.type === "ordgroup") {
                    if (group.value.length === 1) {
                        return getBaseElem(group.value[0]);
                    } else {
                        return group;
                    }
                } else if (group.type === "color") {
                    if (group.value.value.length === 1) {
                        return getBaseElem(group.value.value[0]);
                    } else {
                        return group;
                    }
                } else if (group.type === "font") {
                    return getBaseElem(group.value.body);
                } else {
                    return group;
                }
            };

            /**
             * TeXbook algorithms often reference "character boxes", which are simply groups
             * with a single character in them. To decide if something is a character box,
             * we find its innermost group, and see if it is a single character.
             */
            var isCharacterBox = function isCharacterBox(group) {
                var baseElem = getBaseElem(group);

                // These are all they types of groups which hold single characters
                return baseElem.type === "mathord" || baseElem.type === "textord" || baseElem.type === "bin" || baseElem.type === "rel" || baseElem.type === "inner" || baseElem.type === "open" || baseElem.type === "close" || baseElem.type === "punct";
            };

            var makeNullDelimiter = exports.makeNullDelimiter = function makeNullDelimiter(options, classes) {
                var moreClasses = ["nulldelimiter"].concat(options.baseSizingClasses());
                return makeSpan(classes.concat(moreClasses));
            };

            /**
             * This is a map of group types to the function used to handle that type.
             * Simpler types come at the beginning, while complicated types come afterwards.
             */
            var groupTypes = exports.groupTypes = {};

            groupTypes.mathord = function (group, options) {
                return _buildCommon2.default.makeOrd(group, options, "mathord");
            };

            groupTypes.textord = function (group, options) {
                return _buildCommon2.default.makeOrd(group, options, "textord");
            };

            groupTypes.bin = function (group, options) {
                return _buildCommon2.default.mathsym(group.value, group.mode, options, ["mbin"]);
            };

            groupTypes.rel = function (group, options) {
                return _buildCommon2.default.mathsym(group.value, group.mode, options, ["mrel"]);
            };

            groupTypes.open = function (group, options) {
                return _buildCommon2.default.mathsym(group.value, group.mode, options, ["mopen"]);
            };

            groupTypes.close = function (group, options) {
                return _buildCommon2.default.mathsym(group.value, group.mode, options, ["mclose"]);
            };

            groupTypes.inner = function (group, options) {
                return _buildCommon2.default.mathsym(group.value, group.mode, options, ["minner"]);
            };

            groupTypes.punct = function (group, options) {
                return _buildCommon2.default.mathsym(group.value, group.mode, options, ["mpunct"]);
            };

            groupTypes.ordgroup = function (group, options) {
                return makeSpan(["mord"], buildExpression(group.value, options, true), options);
            };

            groupTypes.text = function (group, options) {
                var newOptions = options.withFont(group.value.font);
                var inner = buildExpression(group.value.body, newOptions, true);
                _buildCommon2.default.tryCombineChars(inner);
                return makeSpan(["mord", "text"], inner, newOptions);
            };

            groupTypes.color = function (group, options) {
                var elements = buildExpression(group.value.value, options.withColor(group.value.color), false);

                // \color isn't supposed to affect the type of the elements it contains.
                // To accomplish this, we wrap the results in a fragment, so the inner
                // elements will be able to directly interact with their neighbors. For
                // example, `\color{red}{2 +} 3` has the same spacing as `2 + 3`
                return new _buildCommon2.default.makeFragment(elements);
            };

            groupTypes.supsub = function (group, options) {
                // Superscript and subscripts are handled in the TeXbook on page
                // 445-446, rules 18(a-f).

                // Here is where we defer to the inner group if it should handle
                // superscripts and subscripts itself.
                if (shouldHandleSupSub(group, options)) {
                    return groupTypes[group.value.base.type](group, options);
                }

                var base = buildGroup(group.value.base, options);
                var supm = void 0;
                var subm = void 0;

                var metrics = options.fontMetrics();
                var newOptions = void 0;

                // Rule 18a
                var supShift = 0;
                var subShift = 0;

                if (group.value.sup) {
                    newOptions = options.havingStyle(options.style.sup());
                    supm = buildGroup(group.value.sup, newOptions, options);
                    if (!isCharacterBox(group.value.base)) {
                        supShift = base.height - newOptions.fontMetrics().supDrop * newOptions.sizeMultiplier / options.sizeMultiplier;
                    }
                }

                if (group.value.sub) {
                    newOptions = options.havingStyle(options.style.sub());
                    subm = buildGroup(group.value.sub, newOptions, options);
                    if (!isCharacterBox(group.value.base)) {
                        subShift = base.depth + newOptions.fontMetrics().subDrop * newOptions.sizeMultiplier / options.sizeMultiplier;
                    }
                }

                // Rule 18c
                var minSupShift = void 0;
                if (options.style === _Style2.default.DISPLAY) {
                    minSupShift = metrics.sup1;
                } else if (options.style.cramped) {
                    minSupShift = metrics.sup3;
                } else {
                    minSupShift = metrics.sup2;
                }

                // scriptspace is a font-size-independent size, so scale it
                // appropriately
                var multiplier = options.sizeMultiplier;
                var scriptspace = 0.5 / metrics.ptPerEm / multiplier + "em";

                var supsub = void 0;
                if (!group.value.sup) {
                    // Rule 18b
                    subShift = Math.max(subShift, metrics.sub1, subm.height - 0.8 * metrics.xHeight);

                    var vlistElem = [{ type: "elem", elem: subm, marginRight: scriptspace }];
                    // Subscripts shouldn't be shifted by the base's italic correction.
                    // Account for that by shifting the subscript back the appropriate
                    // amount. Note we only do this when the base is a single symbol.
                    if (base instanceof _domTree2.default.symbolNode) {
                        vlistElem[0].marginLeft = -base.italic + "em";
                    }

                    supsub = _buildCommon2.default.makeVList(vlistElem, "shift", subShift, options);
                } else if (!group.value.sub) {
                    // Rule 18c, d
                    supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);

                    supsub = _buildCommon2.default.makeVList([{ type: "elem", elem: supm, marginRight: scriptspace }], "shift", -supShift, options);
                } else {
                    supShift = Math.max(supShift, minSupShift, supm.depth + 0.25 * metrics.xHeight);
                    subShift = Math.max(subShift, metrics.sub2);

                    var ruleWidth = metrics.defaultRuleThickness;

                    // Rule 18e
                    if (supShift - supm.depth - (subm.height - subShift) < 4 * ruleWidth) {
                        subShift = 4 * ruleWidth - (supShift - supm.depth) + subm.height;
                        var psi = 0.8 * metrics.xHeight - (supShift - supm.depth);
                        if (psi > 0) {
                            supShift += psi;
                            subShift -= psi;
                        }
                    }

                    var _vlistElem = [{ type: "elem", elem: subm, shift: subShift, marginRight: scriptspace }, { type: "elem", elem: supm, shift: -supShift, marginRight: scriptspace }];
                    // See comment above about subscripts not being shifted
                    if (base instanceof _domTree2.default.symbolNode) {
                        _vlistElem[0].marginLeft = -base.italic + "em";
                    }

                    supsub = _buildCommon2.default.makeVList(_vlistElem, "individualShift", null, options);
                }

                // We ensure to wrap the supsub vlist in a span.msupsub to reset text-align
                var mclass = getTypeOfDomTree(base) || "mord";
                return makeSpan([mclass], [base, makeSpan(["msupsub"], [supsub])], options);
            };

            groupTypes.genfrac = function (group, options) {
                // Fractions are handled in the TeXbook on pages 444-445, rules 15(a-e).
                // Figure out what style this fraction should be in based on the
                // function used
                var style = options.style;
                if (group.value.size === "display") {
                    style = _Style2.default.DISPLAY;
                } else if (group.value.size === "text") {
                    style = _Style2.default.TEXT;
                }

                var nstyle = style.fracNum();
                var dstyle = style.fracDen();
                var newOptions = void 0;

                newOptions = options.havingStyle(nstyle);
                var numerm = buildGroup(group.value.numer, newOptions, options);

                newOptions = options.havingStyle(dstyle);
                var denomm = buildGroup(group.value.denom, newOptions, options);

                var rule = void 0;
                var ruleWidth = void 0;
                var ruleSpacing = void 0;
                if (group.value.hasBarLine) {
                    rule = makeLineSpan("frac-line", options);
                    ruleWidth = rule.height;
                    ruleSpacing = rule.height;
                } else {
                    rule = null;
                    ruleWidth = 0;
                    ruleSpacing = options.fontMetrics().defaultRuleThickness;
                }

                // Rule 15b
                var numShift = void 0;
                var clearance = void 0;
                var denomShift = void 0;
                if (style.size === _Style2.default.DISPLAY.size) {
                    numShift = options.fontMetrics().num1;
                    if (ruleWidth > 0) {
                        clearance = 3 * ruleSpacing;
                    } else {
                        clearance = 7 * ruleSpacing;
                    }
                    denomShift = options.fontMetrics().denom1;
                } else {
                    if (ruleWidth > 0) {
                        numShift = options.fontMetrics().num2;
                        clearance = ruleSpacing;
                    } else {
                        numShift = options.fontMetrics().num3;
                        clearance = 3 * ruleSpacing;
                    }
                    denomShift = options.fontMetrics().denom2;
                }

                var frac = void 0;
                if (ruleWidth === 0) {
                    // Rule 15c
                    var candidateClearance = numShift - numerm.depth - (denomm.height - denomShift);
                    if (candidateClearance < clearance) {
                        numShift += 0.5 * (clearance - candidateClearance);
                        denomShift += 0.5 * (clearance - candidateClearance);
                    }

                    frac = _buildCommon2.default.makeVList([{ type: "elem", elem: denomm, shift: denomShift }, { type: "elem", elem: numerm, shift: -numShift }], "individualShift", null, options);
                } else {
                    // Rule 15d
                    var axisHeight = options.fontMetrics().axisHeight;

                    if (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth) < clearance) {
                        numShift += clearance - (numShift - numerm.depth - (axisHeight + 0.5 * ruleWidth));
                    }

                    if (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift) < clearance) {
                        denomShift += clearance - (axisHeight - 0.5 * ruleWidth - (denomm.height - denomShift));
                    }

                    var midShift = -(axisHeight - 0.5 * ruleWidth);

                    frac = _buildCommon2.default.makeVList([{ type: "elem", elem: denomm, shift: denomShift }, { type: "elem", elem: rule, shift: midShift }, { type: "elem", elem: numerm, shift: -numShift }], "individualShift", null, options);
                }

                // Since we manually change the style sometimes (with \dfrac or \tfrac),
                // account for the possible size change here.
                newOptions = options.havingStyle(style);
                frac.height *= newOptions.sizeMultiplier / options.sizeMultiplier;
                frac.depth *= newOptions.sizeMultiplier / options.sizeMultiplier;

                // Rule 15e
                var delimSize = void 0;
                if (style.size === _Style2.default.DISPLAY.size) {
                    delimSize = options.fontMetrics().delim1;
                } else {
                    delimSize = options.fontMetrics().delim2;
                }

                var leftDelim = void 0;
                var rightDelim = void 0;
                if (group.value.leftDelim == null) {
                    leftDelim = makeNullDelimiter(options, ["mopen"]);
                } else {
                    leftDelim = _delimiter2.default.customSizedDelim(group.value.leftDelim, delimSize, true, options.havingStyle(style), group.mode, ["mopen"]);
                }
                if (group.value.rightDelim == null) {
                    rightDelim = makeNullDelimiter(options, ["mclose"]);
                } else {
                    rightDelim = _delimiter2.default.customSizedDelim(group.value.rightDelim, delimSize, true, options.havingStyle(style), group.mode, ["mclose"]);
                }

                return makeSpan(["mord"].concat(newOptions.sizingClasses(options)), [leftDelim, makeSpan(["mfrac"], [frac]), rightDelim], options);
            };

            groupTypes.spacing = function (group, options) {
                if (group.value === "\\ " || group.value === "\\space" || group.value === " " || group.value === "~") {
                    // Spaces are generated by adding an actual space. Each of these
                    // things has an entry in the symbols table, so these will be turned
                    // into appropriate outputs.
                    if (group.mode === "text") {
                        return _buildCommon2.default.makeOrd(group, options, "textord");
                    } else {
                        return makeSpan(["mspace"], [_buildCommon2.default.mathsym(group.value, group.mode, options)], options);
                    }
                } else {
                    // Other kinds of spaces are of arbitrary width. We use CSS to
                    // generate these.
                    return makeSpan(["mspace", _buildCommon2.default.spacingFunctions[group.value].className], [], options);
                }
            };

            groupTypes.lap = function (group, options) {
                // mathllap, mathrlap, mathclap
                var inner = void 0;
                if (group.value.alignment === "clap") {
                    // ref: https://www.math.lsu.edu/~aperlis/publications/mathclap/
                    inner = makeSpan([], [buildGroup(group.value.body, options)]);
                    // wrap, since CSS will center a .clap > .inner > span
                    inner = makeSpan(["inner"], [inner], options);
                } else {
                    inner = makeSpan(["inner"], [buildGroup(group.value.body, options)]);
                }
                var fix = makeSpan(["fix"], []);
                return makeSpan(["mord", group.value.alignment], [inner, fix], options);
            };

            groupTypes.smash = function (group, options) {
                var node = makeSpan(["mord"], [buildGroup(group.value.body, options)]);

                if (!group.value.smashHeight && !group.value.smashDepth) {
                    return node;
                }

                if (group.value.smashHeight) {
                    node.height = 0;
                    // In order to influence makeVList, we have to reset the children.
                    if (node.children) {
                        for (var i = 0; i < node.children.length; i++) {
                            node.children[i].height = 0;
                        }
                    }
                }

                if (group.value.smashDepth) {
                    node.depth = 0;
                    if (node.children) {
                        for (var _i4 = 0; _i4 < node.children.length; _i4++) {
                            node.children[_i4].depth = 0;
                        }
                    }
                }

                // At this point, we've reset the TeX-like height and depth values.
                // But the span still has an HTML line height.
                // makeVList applies "display: table-cell", which prevents the browser
                // from acting on that line height. So we'll call makeVList now.

                return _buildCommon2.default.makeVList([{ type: "elem", elem: node }], "firstBaseline", null, options);
            };

            groupTypes.op = function (group, options) {
                // Operators are handled in the TeXbook pg. 443-444, rule 13(a).
                var supGroup = void 0;
                var subGroup = void 0;
                var hasLimits = false;
                if (group.type === "supsub") {
                    // If we have limits, supsub will pass us its group to handle. Pull
                    // out the superscript and subscript and set the group to the op in
                    // its base.
                    supGroup = group.value.sup;
                    subGroup = group.value.sub;
                    group = group.value.base;
                    hasLimits = true;
                }

                var style = options.style;

                // Most operators have a large successor symbol, but these don't.
                var noSuccessor = ["\\smallint"];

                var large = false;
                if (style.size === _Style2.default.DISPLAY.size && group.value.symbol && !_utils2.default.contains(noSuccessor, group.value.body)) {

                    // Most symbol operators get larger in displaystyle (rule 13)
                    large = true;
                }

                var base = void 0;
                if (group.value.symbol) {
                    // If this is a symbol, create the symbol.
                    var fontName = large ? "Size2-Regular" : "Size1-Regular";
                    base = _buildCommon2.default.makeSymbol(group.value.body, fontName, "math", options, ["mop", "op-symbol", large ? "large-op" : "small-op"]);
                } else if (group.value.value) {
                    // If this is a list, compose that list.
                    var inner = buildExpression(group.value.value, options, true);
                    if (inner.length === 1 && inner[0] instanceof _domTree2.default.symbolNode) {
                        base = inner[0];
                        base.classes[0] = "mop"; // replace old mclass
                    } else {
                        base = makeSpan(["mop"], inner, options);
                    }
                } else {
                    // Otherwise, this is a text operator. Build the text from the
                    // operator's name.
                    // TODO(emily): Add a space in the middle of some of these
                    // operators, like \limsup
                    var output = [];
                    for (var i = 1; i < group.value.body.length; i++) {
                        output.push(_buildCommon2.default.mathsym(group.value.body[i], group.mode));
                    }
                    base = makeSpan(["mop"], output, options);
                }

                // If content of op is a single symbol, shift it vertically.
                var baseShift = 0;
                var slant = 0;
                if (base instanceof _domTree2.default.symbolNode) {
                    // Shift the symbol so its center lies on the axis (rule 13). It
                    // appears that our fonts have the centers of the symbols already
                    // almost on the axis, so these numbers are very small. Note we
                    // don't actually apply this here, but instead it is used either in
                    // the vlist creation or separately when there are no limits.
                    baseShift = (base.height - base.depth) / 2 - options.fontMetrics().axisHeight;

                    // The slant of the symbol is just its italic correction.
                    slant = base.italic;
                }

                if (hasLimits) {
                    // IE 8 clips \int if it is in a display: inline-block. We wrap it
                    // in a new span so it is an inline, and works.
                    base = makeSpan([], [base]);

                    var supm = void 0;
                    var supKern = void 0;
                    var subm = void 0;
                    var subKern = void 0;
                    var newOptions = void 0;
                    // We manually have to handle the superscripts and subscripts. This,
                    // aside from the kern calculations, is copied from supsub.
                    if (supGroup) {
                        newOptions = options.havingStyle(style.sup());
                        supm = buildGroup(supGroup, newOptions, options);

                        supKern = Math.max(options.fontMetrics().bigOpSpacing1, options.fontMetrics().bigOpSpacing3 - supm.depth);
                    }

                    if (subGroup) {
                        newOptions = options.havingStyle(style.sub());
                        subm = buildGroup(subGroup, newOptions, options);

                        subKern = Math.max(options.fontMetrics().bigOpSpacing2, options.fontMetrics().bigOpSpacing4 - subm.height);
                    }

                    // Build the final group as a vlist of the possible subscript, base,
                    // and possible superscript.
                    var finalGroup = void 0;
                    var top = void 0;
                    var bottom = void 0;
                    if (!supGroup) {
                        top = base.height - baseShift;

                        // Shift the limits by the slant of the symbol. Note
                        // that we are supposed to shift the limits by 1/2 of the slant,
                        // but since we are centering the limits adding a full slant of
                        // margin will shift by 1/2 that.
                        finalGroup = _buildCommon2.default.makeVList([{ type: "kern", size: options.fontMetrics().bigOpSpacing5 }, { type: "elem", elem: subm, marginLeft: -slant + "em" }, { type: "kern", size: subKern }, { type: "elem", elem: base }], "top", top, options);
                    } else if (!subGroup) {
                        bottom = base.depth + baseShift;

                        finalGroup = _buildCommon2.default.makeVList([{ type: "elem", elem: base }, { type: "kern", size: supKern }, { type: "elem", elem: supm, marginLeft: slant + "em" }, { type: "kern", size: options.fontMetrics().bigOpSpacing5 }], "bottom", bottom, options);
                    } else if (!supGroup && !subGroup) {
                        // This case probably shouldn't occur (this would mean the
                        // supsub was sending us a group with no superscript or
                        // subscript) but be safe.
                        return base;
                    } else {
                        bottom = options.fontMetrics().bigOpSpacing5 + subm.height + subm.depth + subKern + base.depth + baseShift;

                        finalGroup = _buildCommon2.default.makeVList([{ type: "kern", size: options.fontMetrics().bigOpSpacing5 }, { type: "elem", elem: subm, marginLeft: -slant + "em" }, { type: "kern", size: subKern }, { type: "elem", elem: base }, { type: "kern", size: supKern }, { type: "elem", elem: supm, marginLeft: slant + "em" }, { type: "kern", size: options.fontMetrics().bigOpSpacing5 }], "bottom", bottom, options);
                    }

                    return makeSpan(["mop", "op-limits"], [finalGroup], options);
                } else {
                    if (baseShift) {
                        base.style.position = "relative";
                        base.style.top = baseShift + "em";
                    }

                    return base;
                }
            };

            groupTypes.mod = function (group, options) {
                var inner = [];

                if (group.value.modType === "bmod") {
                    // “\nonscript\mskip-\medmuskip\mkern5mu”
                    if (!options.style.isTight()) {
                        inner.push(makeSpan(["mspace", "negativemediumspace"], [], options));
                    }
                    inner.push(makeSpan(["mspace", "thickspace"], [], options));
                } else if (options.style.size === _Style2.default.DISPLAY.size) {
                    inner.push(makeSpan(["mspace", "quad"], [], options));
                } else if (group.value.modType === "mod") {
                    inner.push(makeSpan(["mspace", "twelvemuspace"], [], options));
                } else {
                    inner.push(makeSpan(["mspace", "eightmuspace"], [], options));
                }

                if (group.value.modType === "pod" || group.value.modType === "pmod") {
                    inner.push(_buildCommon2.default.mathsym("(", group.mode));
                }

                if (group.value.modType !== "pod") {
                    var modInner = [_buildCommon2.default.mathsym("m", group.mode), _buildCommon2.default.mathsym("o", group.mode), _buildCommon2.default.mathsym("d", group.mode)];
                    if (group.value.modType === "bmod") {
                        inner.push(makeSpan(["mbin"], modInner, options));
                        // “\mkern5mu\nonscript\mskip-\medmuskip”
                        inner.push(makeSpan(["mspace", "thickspace"], [], options));
                        if (!options.style.isTight()) {
                            inner.push(makeSpan(["mspace", "negativemediumspace"], [], options));
                        }
                    } else {
                        Array.prototype.push.apply(inner, modInner);
                        inner.push(makeSpan(["mspace", "sixmuspace"], [], options));
                    }
                }

                if (group.value.value) {
                    Array.prototype.push.apply(inner, buildExpression(group.value.value, options, false));
                }

                if (group.value.modType === "pod" || group.value.modType === "pmod") {
                    inner.push(_buildCommon2.default.mathsym(")", group.mode));
                }

                return _buildCommon2.default.makeFragment(inner);
            };

            groupTypes.katex = function (group, options) {
                // The KaTeX logo. The offsets for the K and a were chosen to look
                // good, but the offsets for the T, E, and X were taken from the
                // definition of \TeX in TeX (see TeXbook pg. 356)
                var k = makeSpan(["k"], [_buildCommon2.default.mathsym("K", group.mode)], options);
                var a = makeSpan(["a"], [_buildCommon2.default.mathsym("A", group.mode)], options);

                a.height = (a.height + 0.2) * 0.75;
                a.depth = (a.height - 0.2) * 0.75;

                var t = makeSpan(["t"], [_buildCommon2.default.mathsym("T", group.mode)], options);
                var e = makeSpan(["e"], [_buildCommon2.default.mathsym("E", group.mode)], options);

                e.height = e.height - 0.2155;
                e.depth = e.depth + 0.2155;

                var x = makeSpan(["x"], [_buildCommon2.default.mathsym("X", group.mode)], options);

                return makeSpan(["mord", "katex-logo"], [k, a, t, e, x], options);
            };

            var makeLineSpan = function makeLineSpan(className, options, thickness) {
                var line = makeSpan([className], [], options);
                line.height = thickness || options.fontMetrics().defaultRuleThickness;
                line.style.borderBottomWidth = line.height + "em";
                line.maxFontSize = 1.0;
                return line;
            };

            groupTypes.overline = function (group, options) {
                // Overlines are handled in the TeXbook pg 443, Rule 9.

                // Build the inner group in the cramped style.
                var innerGroup = buildGroup(group.value.body, options.havingCrampedStyle());

                // Create the line above the body
                var line = makeLineSpan("overline-line", options);

                // Generate the vlist, with the appropriate kerns
                var vlist = _buildCommon2.default.makeVList([{ type: "elem", elem: innerGroup }, { type: "kern", size: 3 * line.height }, { type: "elem", elem: line }, { type: "kern", size: line.height }], "firstBaseline", null, options);

                return makeSpan(["mord", "overline"], [vlist], options);
            };

            groupTypes.underline = function (group, options) {
                // Underlines are handled in the TeXbook pg 443, Rule 10.
                // Build the inner group.
                var innerGroup = buildGroup(group.value.body, options);

                // Create the line above the body
                var line = makeLineSpan("underline-line", options);

                // Generate the vlist, with the appropriate kerns
                var vlist = _buildCommon2.default.makeVList([{ type: "kern", size: line.height }, { type: "elem", elem: line }, { type: "kern", size: 3 * line.height }, { type: "elem", elem: innerGroup }], "top", innerGroup.height, options);

                return makeSpan(["mord", "underline"], [vlist], options);
            };

            groupTypes.sqrt = function (group, options) {
                // Square roots are handled in the TeXbook pg. 443, Rule 11.

                // First, we do the same steps as in overline to build the inner group
                // and line
                var inner = buildGroup(group.value.body, options.havingCrampedStyle());
                if (inner.height === 0) {
                    // Render a small surd.
                    inner.height = options.fontMetrics().xHeight;
                }

                // Some groups can return document fragments.  Handle those by wrapping
                // them in a span.
                if (inner instanceof _domTree2.default.documentFragment) {
                    inner = makeSpan([], [inner], options);
                }

                // Calculate the minimum size for the \surd delimiter
                var metrics = options.fontMetrics();
                var theta = metrics.defaultRuleThickness;

                var phi = theta;
                if (options.style.id < _Style2.default.TEXT.id) {
                    phi = options.fontMetrics().xHeight;
                }

                // Calculate the clearance between the body and line
                var lineClearance = theta + phi / 4;

                var minDelimiterHeight = (inner.height + inner.depth + lineClearance + theta) * options.sizeMultiplier;

                // Create a sqrt SVG of the required minimum size
                var img = _delimiter2.default.customSizedDelim("\\surd", minDelimiterHeight, false, options, group.mode);

                // Calculate the actual line width.
                // This actually should depend on the chosen font -- e.g. \boldmath
                // should use the thicker surd symbols from e.g. KaTeX_Main-Bold, and
                // have thicker rules.
                var ruleWidth = options.fontMetrics().sqrtRuleThickness * img.sizeMultiplier;

                var delimDepth = img.height - ruleWidth;

                // Adjust the clearance based on the delimiter size
                if (delimDepth > inner.height + inner.depth + lineClearance) {
                    lineClearance = (lineClearance + delimDepth - inner.height - inner.depth) / 2;
                }

                // Shift the sqrt image
                var imgShift = img.height - inner.height - lineClearance - ruleWidth;

                inner.style.paddingLeft = img.advanceWidth + "em";

                // Overlay the image and the argument.
                var body = _buildCommon2.default.makeVList([{ type: "elem", elem: inner }, { type: "kern", size: -(inner.height + imgShift) }, { type: "elem", elem: img }, { type: "kern", size: ruleWidth }], "firstBaseline", null, options);
                body.children[0].children[0].classes.push("svg-align");

                if (!group.value.index) {
                    return makeSpan(["mord", "sqrt"], [body], options);
                } else {
                    // Handle the optional root index

                    // The index is always in scriptscript style
                    var newOptions = options.havingStyle(_Style2.default.SCRIPTSCRIPT);
                    var rootm = buildGroup(group.value.index, newOptions, options);

                    // The amount the index is shifted by. This is taken from the TeX
                    // source, in the definition of `\r@@t`.
                    var toShift = 0.6 * (body.height - body.depth);

                    // Build a VList with the superscript shifted up correctly
                    var rootVList = _buildCommon2.default.makeVList([{ type: "elem", elem: rootm }], "shift", -toShift, options);
                    // Add a class surrounding it so we can add on the appropriate
                    // kerning
                    var rootVListWrap = makeSpan(["root"], [rootVList]);

                    return makeSpan(["mord", "sqrt"], [rootVListWrap, body], options);
                }
            };

            function sizingGroup(value, options, baseOptions) {
                var inner = buildExpression(value, options, false);
                var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier;

                // Add size-resetting classes to the inner list and set maxFontSize
                // manually. Handle nested size changes.
                for (var i = 0; i < inner.length; i++) {
                    var pos = _utils2.default.indexOf(inner[i].classes, "sizing");
                    if (pos < 0) {
                        Array.prototype.push.apply(inner[i].classes, options.sizingClasses(baseOptions));
                    } else if (inner[i].classes[pos + 1] === "reset-size" + options.size) {
                        // This is a nested size change: e.g., inner[i] is the "b" in
                        // `\Huge a \small b`. Override the old size (the `reset-` class)
                        // but not the new size.
                        inner[i].classes[pos + 1] = "reset-size" + baseOptions.size;
                    }

                    inner[i].height *= multiplier;
                    inner[i].depth *= multiplier;
                }

                return _buildCommon2.default.makeFragment(inner);
            }

            groupTypes.sizing = function (group, options) {
                // Handle sizing operators like \Huge. Real TeX doesn't actually allow
                // these functions inside of math expressions, so we do some special
                // handling.
                var newOptions = options.havingSize(group.value.size);
                return sizingGroup(group.value.value, newOptions, options);
            };

            groupTypes.styling = function (group, options) {
                // Style changes are handled in the TeXbook on pg. 442, Rule 3.

                // Figure out what style we're changing to.
                var styleMap = {
                    "display": _Style2.default.DISPLAY,
                    "text": _Style2.default.TEXT,
                    "script": _Style2.default.SCRIPT,
                    "scriptscript": _Style2.default.SCRIPTSCRIPT
                };

                var newStyle = styleMap[group.value.style];
                var newOptions = options.havingStyle(newStyle);
                return sizingGroup(group.value.value, newOptions, options);
            };

            groupTypes.font = function (group, options) {
                var font = group.value.font;
                return buildGroup(group.value.body, options.withFont(font));
            };

            groupTypes.verb = function (group, options) {
                var text = _buildCommon2.default.makeVerb(group, options);
                var body = [];
                // \verb enters text mode and therefore is sized like \textstyle
                var newOptions = options.havingStyle(options.style.text());
                for (var i = 0; i < text.length; i++) {
                    if (text[i] === '\xA0') {
                        // spaces appear as nonbreaking space
                        // The space character isn't in the Typewriter-Regular font,
                        // so we implement it as a kern of the same size as a character.
                        // 0.525 is the width of a texttt character in LaTeX.
                        // It automatically gets scaled by the font size.
                        var rule = makeSpan(["mord", "rule"], [], newOptions);
                        rule.style.marginLeft = "0.525em";
                        body.push(rule);
                    } else {
                        body.push(_buildCommon2.default.makeSymbol(text[i], "Typewriter-Regular", group.mode, newOptions, ["mathtt"]));
                    }
                }
                _buildCommon2.default.tryCombineChars(body);
                return makeSpan(["mord", "text"].concat(newOptions.sizingClasses(options)), body, newOptions);
            };

            groupTypes.rule = function (group, options) {
                // Make an empty span for the rule
                var rule = makeSpan(["mord", "rule"], [], options);

                // Calculate the shift, width, and height of the rule, and account for units
                var shift = 0;
                if (group.value.shift) {
                    shift = (0, _units.calculateSize)(group.value.shift, options);
                }

                var width = (0, _units.calculateSize)(group.value.width, options);
                var height = (0, _units.calculateSize)(group.value.height, options);

                // Style the rule to the right size
                rule.style.borderRightWidth = width + "em";
                rule.style.borderTopWidth = height + "em";
                rule.style.bottom = shift + "em";

                // Record the height and width
                rule.width = width;
                rule.height = height + shift;
                rule.depth = -shift;
                // Font size is the number large enough that the browser will
                // reserve at least `absHeight` space above the baseline.
                // The 1.125 factor was empirically determined
                rule.maxFontSize = height * 1.125 * options.sizeMultiplier;

                return rule;
            };

            groupTypes.kern = function (group, options) {
                // Make an empty span for the rule
                var rule = makeSpan(["mord", "rule"], [], options);

                if (group.value.dimension) {
                    var dimension = (0, _units.calculateSize)(group.value.dimension, options);
                    rule.style.marginLeft = dimension + "em";
                }

                return rule;
            };

            groupTypes.accent = function (group, options) {
                // Accents are handled in the TeXbook pg. 443, rule 12.
                var base = group.value.base;

                var supsubGroup = void 0;
                if (group.type === "supsub") {
                    // If our base is a character box, and we have superscripts and
                    // subscripts, the supsub will defer to us. In particular, we want
                    // to attach the superscripts and subscripts to the inner body (so
                    // that the position of the superscripts and subscripts won't be
                    // affected by the height of the accent). We accomplish this by
                    // sticking the base of the accent into the base of the supsub, and
                    // rendering that, while keeping track of where the accent is.

                    // The supsub group is the group that was passed in
                    var supsub = group;
                    // The real accent group is the base of the supsub group
                    group = supsub.value.base;
                    // The character box is the base of the accent group
                    base = group.value.base;
                    // Stick the character box into the base of the supsub group
                    supsub.value.base = base;

                    // Rerender the supsub group with its new base, and store that
                    // result.
                    supsubGroup = buildGroup(supsub, options);
                }

                // Build the base group
                var body = buildGroup(base, options.havingCrampedStyle());

                // Does the accent need to shift for the skew of a character?
                var mustShift = group.value.isShifty && isCharacterBox(base);

                // Calculate the skew of the accent. This is based on the line "If the
                // nucleus is not a single character, let s = 0; otherwise set s to the
                // kern amount for the nucleus followed by the \skewchar of its font."
                // Note that our skew metrics are just the kern between each character
                // and the skewchar.
                var skew = 0;
                if (mustShift) {
                    // If the base is a character box, then we want the skew of the
                    // innermost character. To do that, we find the innermost character:
                    var baseChar = getBaseElem(base);
                    // Then, we render its group to get the symbol inside it
                    var baseGroup = buildGroup(baseChar, options.havingCrampedStyle());
                    // Finally, we pull the skew off of the symbol.
                    skew = baseGroup.skew;
                    // Note that we now throw away baseGroup, because the layers we
                    // removed with getBaseElem might contain things like \color which
                    // we can't get rid of.
                    // TODO(emily): Find a better way to get the skew
                }

                // calculate the amount of space between the body and the accent
                var clearance = Math.min(body.height, options.fontMetrics().xHeight);

                // Build the accent
                var accentBody = void 0;
                if (!group.value.isStretchy) {
                    var accent = _buildCommon2.default.makeSymbol(group.value.label, "Main-Regular", group.mode, options);
                    // Remove the italic correction of the accent, because it only serves to
                    // shift the accent over to a place we don't want.
                    accent.italic = 0;

                    // The \vec character that the fonts use is a combining character, and
                    // thus shows up much too far to the left. To account for this, we add a
                    // specific class which shifts the accent over to where we want it.
                    // TODO(emily): Fix this in a better way, like by changing the font
                    // Similarly, text accent \H is a combining character and
                    // requires a different adjustment.
                    var accentClass = null;
                    if (group.value.label === "\\vec") {
                        accentClass = "accent-vec";
                    } else if (group.value.label === '\\H') {
                        accentClass = "accent-hungarian";
                    }

                    accentBody = makeSpan([], [accent]);
                    accentBody = makeSpan(["accent-body", accentClass], [accentBody]);

                    // Shift the accent over by the skew. Note we shift by twice the skew
                    // because we are centering the accent, so by adding 2*skew to the left,
                    // we shift it to the right by 1*skew.
                    accentBody.style.marginLeft = 2 * skew + "em";

                    accentBody = _buildCommon2.default.makeVList([{ type: "elem", elem: body }, { type: "kern", size: -clearance }, { type: "elem", elem: accentBody }], "firstBaseline", null, options);
                } else {
                    accentBody = _stretchy2.default.svgSpan(group, options);

                    accentBody = _buildCommon2.default.makeVList([{ type: "elem", elem: body }, { type: "elem", elem: accentBody }], "firstBaseline", null, options);

                    var styleSpan = accentBody.children[0].children[0].children[1];
                    styleSpan.classes.push("svg-align"); // text-align: left;
                    if (skew > 0) {
                        // Shorten the accent and nudge it to the right.
                        styleSpan.style.width = "calc(100% - " + 2 * skew + "em)";
                        styleSpan.style.marginLeft = 2 * skew + "em";
                    }
                }

                var accentWrap = makeSpan(["mord", "accent"], [accentBody], options);

                if (supsubGroup) {
                    // Here, we replace the "base" child of the supsub with our newly
                    // generated accent.
                    supsubGroup.children[0] = accentWrap;

                    // Since we don't rerun the height calculation after replacing the
                    // accent, we manually recalculate height.
                    supsubGroup.height = Math.max(accentWrap.height, supsubGroup.height);

                    // Accents should always be ords, even when their innards are not.
                    supsubGroup.classes[0] = "mord";

                    return supsubGroup;
                } else {
                    return accentWrap;
                }
            };

            groupTypes.horizBrace = function (group, options) {
                var style = options.style;

                var hasSupSub = group.type === "supsub";
                var supSubGroup = void 0;
                var newOptions = void 0;
                if (hasSupSub) {
                    // Ref: LaTeX source2e: }}}}\limits}
                    // i.e. LaTeX treats the brace similar to an op and passes it
                    // with \limits, so we need to assign supsub style.
                    if (group.value.sup) {
                        newOptions = options.havingStyle(style.sup());
                        supSubGroup = buildGroup(group.value.sup, newOptions, options);
                    } else {
                        newOptions = options.havingStyle(style.sub());
                        supSubGroup = buildGroup(group.value.sub, newOptions, options);
                    }
                    group = group.value.base;
                }

                // Build the base group
                var body = buildGroup(group.value.base, options.havingBaseStyle(_Style2.default.DISPLAY));

                // Create the stretchy element
                var braceBody = _stretchy2.default.svgSpan(group, options);

                // Generate the vlist, with the appropriate kerns               ┏━━━━━━━━┓
                // This first vlist contains the subject matter and the brace:   equation
                var vlist = void 0;
                if (group.value.isOver) {
                    vlist = _buildCommon2.default.makeVList([{ type: "elem", elem: body }, { type: "kern", size: 0.1 }, { type: "elem", elem: braceBody }], "firstBaseline", null, options);
                    vlist.children[0].children[0].children[1].classes.push("svg-align");
                } else {
                    vlist = _buildCommon2.default.makeVList([{ type: "elem", elem: braceBody }, { type: "kern", size: 0.1 }, { type: "elem", elem: body }], "bottom", body.depth + 0.1 + braceBody.height, options);
                    vlist.children[0].children[0].children[0].classes.push("svg-align");
                }

                if (hasSupSub) {
                    // In order to write the supsub, wrap the first vlist in another vlist:
                    // They can't all go in the same vlist, because the note might be wider
                    // than the equation. We want the equation to control the brace width.

                    //      note          long note           long note
                    //   ┏━━━━━━━━┓   or    ┏━━━┓     not    ┏━━━━━━━━━┓
                    //    equation           eqn                 eqn

                    var vSpan = makeSpan(["mord", group.value.isOver ? "mover" : "munder"], [vlist], options);

                    if (group.value.isOver) {
                        vlist = _buildCommon2.default.makeVList([{ type: "elem", elem: vSpan }, { type: "kern", size: 0.2 }, { type: "elem", elem: supSubGroup }], "firstBaseline", null, options);
                    } else {
                        vlist = _buildCommon2.default.makeVList([{ type: "elem", elem: supSubGroup }, { type: "kern", size: 0.2 }, { type: "elem", elem: vSpan }], "bottom", vSpan.depth + 0.2 + supSubGroup.height, options);
                    }
                }

                return makeSpan(["mord", group.value.isOver ? "mover" : "munder"], [vlist], options);
            };

            groupTypes.accentUnder = function (group, options) {
                // Treat under accents much like underlines.
                var innerGroup = buildGroup(group.value.base, options);

                var accentBody = _stretchy2.default.svgSpan(group, options);
                var kern = /tilde/.test(group.value.label) ? 0.12 : 0;

                // Generate the vlist, with the appropriate kerns
                var vlist = _buildCommon2.default.makeVList([{ type: "elem", elem: accentBody }, { type: "kern", size: kern }, { type: "elem", elem: innerGroup }], "bottom", accentBody.height + kern, options);

                vlist.children[0].children[0].children[0].classes.push("svg-align");

                return makeSpan(["mord", "accentunder"], [vlist], options);
            };

            groupTypes.enclose = function (group, options) {
                // \cancel, \bcancel, \xcancel, \sout, \fbox, \colorbox, \fcolorbox
                var inner = buildGroup(group.value.body, options);

                var label = group.value.label.substr(1);
                var scale = options.sizeMultiplier;
                var img = void 0;
                var imgShift = 0;
                var isColorbox = /color/.test(label);

                if (label === "sout") {
                    img = makeSpan(["stretchy", "sout"]);
                    img.height = options.fontMetrics().defaultRuleThickness / scale;
                    imgShift = -0.5 * options.fontMetrics().xHeight;
                } else {
                    // Add horizontal padding
                    inner.classes.push(/cancel/.test(label) ? "cancel-pad" : "boxpad");

                    // Add vertical padding
                    var vertPad = 0;
                    // ref: LaTeX source2e: \fboxsep = 3pt;  \fboxrule = .4pt
                    // ref: cancel package: \advance\totalheight2\p@ % "+2"
                    if (/box/.test(label)) {
                        vertPad = label === "colorbox" ? 0.3 : 0.34;
                    } else {
                        vertPad = isCharacterBox(group.value.body) ? 0.2 : 0;
                    }

                    img = _stretchy2.default.encloseSpan(inner, label, vertPad, options);
                    imgShift = inner.depth + vertPad;

                    if (isColorbox) {
                        img.style.backgroundColor = group.value.backgroundColor.value;
                        if (label === "fcolorbox") {
                            img.style.borderColor = group.value.borderColor.value;
                        }
                    }
                }

                var vlist = void 0;
                if (isColorbox) {
                    vlist = _buildCommon2.default.makeVList([
                    // Put the color background behind inner;
                    { type: "elem", elem: img, shift: imgShift }, { type: "elem", elem: inner, shift: 0 }], "individualShift", null, options);
                } else {
                    vlist = _buildCommon2.default.makeVList([
                    // Write the \cancel stroke on top of inner.
                    { type: "elem", elem: inner, shift: 0 }, { type: "elem", elem: img, shift: imgShift }], "individualShift", null, options);
                }

                if (/cancel/.test(label)) {
                    vlist.children[0].children[0].children[1].classes.push("svg-align");

                    // cancel does not create horiz space for its line extension.
                    // That is, not when adjacent to a mord.
                    return makeSpan(["mord", "cancel-lap"], [vlist], options);
                } else {
                    return makeSpan(["mord"], [vlist], options);
                }
            };

            groupTypes.xArrow = function (group, options) {
                var style = options.style;

                // Build the argument groups in the appropriate style.
                // Ref: amsmath.dtx:   \hbox{$\scriptstyle\mkern#3mu{#6}\mkern#4mu$}%

                var newOptions = options.havingStyle(style.sup());
                var upperGroup = buildGroup(group.value.body, newOptions, options);
                upperGroup.classes.push("x-arrow-pad");

                var lowerGroup = void 0;
                if (group.value.below) {
                    // Build the lower group
                    newOptions = options.havingStyle(style.sub());
                    lowerGroup = buildGroup(group.value.below, newOptions, options);
                    lowerGroup.classes.push("x-arrow-pad");
                }

                var arrowBody = _stretchy2.default.svgSpan(group, options);

                // Re shift: Note that stretchy.svgSpan returned arrowBody.depth = 0.
                // The point we want on the math axis is at 0.5 * arrowBody.height.
                var arrowShift = -options.fontMetrics().axisHeight + 0.5 * arrowBody.height;
                // 2 mu kern. Ref: amsmath.dtx: #7\if0#2\else\mkern#2mu\fi
                var upperShift = -options.fontMetrics().axisHeight - 0.5 * arrowBody.height - 0.111;

                // Generate the vlist
                var vlist = void 0;
                if (group.value.below) {
                    var lowerShift = -options.fontMetrics().axisHeight + lowerGroup.height + 0.5 * arrowBody.height + 0.111;
                    vlist = _buildCommon2.default.makeVList([{ type: "elem", elem: upperGroup, shift: upperShift }, { type: "elem", elem: arrowBody, shift: arrowShift }, { type: "elem", elem: lowerGroup, shift: lowerShift }], "individualShift", null, options);
                } else {
                    vlist = _buildCommon2.default.makeVList([{ type: "elem", elem: upperGroup, shift: upperShift }, { type: "elem", elem: arrowBody, shift: arrowShift }], "individualShift", null, options);
                }

                vlist.children[0].children[0].children[1].classes.push("svg-align");

                return makeSpan(["mrel", "x-arrow"], [vlist], options);
            };

            groupTypes.mclass = function (group, options) {
                var elements = buildExpression(group.value.value, options, true);

                return makeSpan([group.value.mclass], elements, options);
            };

            groupTypes.raisebox = function (group, options) {
                var body = groupTypes.sizing({ value: {
                        value: [{
                            type: "text",
                            value: {
                                body: group.value.value,
                                font: "mathrm" // simulate \textrm
                            }
                        }],
                        size: 6 // simulate \normalsize
                    } }, options);
                var dy = (0, _units.calculateSize)(group.value.dy.value, options);
                return _buildCommon2.default.makeVList([{
                    type: "elem",
                    elem: body
                }], "shift", -dy, options);
            };

            /**
             * buildGroup is the function that takes a group and calls the correct groupType
             * function for it. It also handles the interaction of size and style changes
             * between parents and children.
             */
            var buildGroup = exports.buildGroup = function buildGroup(group, options, baseOptions) {
                if (!group) {
                    return makeSpan();
                }

                if (groupTypes[group.type]) {
                    // Call the groupTypes function
                    var groupNode = groupTypes[group.type](group, options);

                    // If the size changed between the parent and the current group, account
                    // for that size difference.
                    if (baseOptions && options.size !== baseOptions.size) {
                        groupNode = makeSpan(options.sizingClasses(baseOptions), [groupNode], options);

                        var multiplier = options.sizeMultiplier / baseOptions.sizeMultiplier;

                        groupNode.height *= multiplier;
                        groupNode.depth *= multiplier;
                    }

                    return groupNode;
                } else {
                    throw new _ParseError2.default("Got group of unknown type: '" + group.type + "'");
                }
            };

            /**
             * Take an entire parse tree, and build it into an appropriate set of HTML
             * nodes.
             */
            function buildHTML(tree, options) {
                // buildExpression is destructive, so we need to make a clone
                // of the incoming tree so that it isn't accidentally changed
                tree = JSON.parse((0, _stringify2.default)(tree));

                // Build the expression contained in the tree
                var expression = buildExpression(tree, options, true);
                var body = makeSpan(["base"], expression, options);

                // Add struts, which ensure that the top of the HTML element falls at the
                // height of the expression, and the bottom of the HTML element falls at the
                // depth of the expression.
                var topStrut = makeSpan(["strut"]);
                var bottomStrut = makeSpan(["strut", "bottom"]);

                topStrut.style.height = body.height + "em";
                bottomStrut.style.height = body.height + body.depth + "em";
                // We'd like to use `vertical-align: top` but in IE 9 this lowers the
                // baseline of the box to the bottom of this strut (instead staying in the
                // normal place) so we use an absolute value for vertical-align instead
                bottomStrut.style.verticalAlign = -body.depth + "em";

                // Wrap the struts and body together
                var htmlNode = makeSpan(["katex-html"], [topStrut, bottomStrut, body]);

                htmlNode.setAttribute("aria-hidden", "true");

                return htmlNode;
            }
        }, { "./ParseError": 84, "./Style": 89, "./buildCommon": 91, "./delimiter": 97, "./domTree": 98, "./stretchy": 110, "./units": 114, "./utils": 115, "babel-runtime/core-js/json/stringify": 5 }], 93: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.buildGroup = exports.buildExpression = exports.groupTypes = exports.makeText = undefined;
            exports.default = buildMathML;

            var _buildCommon = require("./buildCommon");

            var _buildCommon2 = _interopRequireDefault(_buildCommon);

            var _fontMetrics = require("./fontMetrics");

            var _fontMetrics2 = _interopRequireDefault(_fontMetrics);

            var _mathMLTree = require("./mathMLTree");

            var _mathMLTree2 = _interopRequireDefault(_mathMLTree);

            var _ParseError = require("./ParseError");

            var _ParseError2 = _interopRequireDefault(_ParseError);

            var _Style = require("./Style");

            var _Style2 = _interopRequireDefault(_Style);

            var _symbols = require("./symbols");

            var _symbols2 = _interopRequireDefault(_symbols);

            var _utils = require("./utils");

            var _utils2 = _interopRequireDefault(_utils);

            var _stretchy = require("./stretchy");

            var _stretchy2 = _interopRequireDefault(_stretchy);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * Takes a symbol and converts it into a MathML text node after performing
             * optional replacement from symbols.js.
             */
            /**
             * WARNING: New methods on groupTypes should be added to src/functions.
             *
             * This file converts a parse tree into a cooresponding MathML tree. The main
             * entry point is the `buildMathML` function, which takes a parse tree from the
             * parser.
             */

            var makeText = exports.makeText = function makeText(text, mode) {
                if (_symbols2.default[mode][text] && _symbols2.default[mode][text].replace) {
                    text = _symbols2.default[mode][text].replace;
                }

                return new _mathMLTree2.default.TextNode(text);
            };

            /**
             * Returns the math variant as a string or null if none is required.
             */
            var getVariant = function getVariant(group, options) {
                var font = options.font;
                if (!font) {
                    return null;
                }

                var mode = group.mode;
                if (font === "mathit") {
                    return "italic";
                }

                var value = group.value;
                if (_utils2.default.contains(["\\imath", "\\jmath"], value)) {
                    return null;
                }

                if (_symbols2.default[mode][value] && _symbols2.default[mode][value].replace) {
                    value = _symbols2.default[mode][value].replace;
                }

                var fontName = _buildCommon2.default.fontMap[font].fontName;
                if (_fontMetrics2.default.getCharacterMetrics(value, fontName)) {
                    return _buildCommon2.default.fontMap[options.font].variant;
                }

                return null;
            };

            /**
             * Functions for handling the different types of groups found in the parse
             * tree. Each function should take a parse group and return a MathML node.
             */
            var groupTypes = exports.groupTypes = {};

            var defaultVariant = {
                "mi": "italic",
                "mn": "normal",
                "mtext": "normal"
            };

            groupTypes.mathord = function (group, options) {
                var node = new _mathMLTree2.default.MathNode("mi", [makeText(group.value, group.mode)]);

                var variant = getVariant(group, options) || "italic";
                if (variant !== defaultVariant[node.type]) {
                    node.setAttribute("mathvariant", variant);
                }
                return node;
            };

            groupTypes.textord = function (group, options) {
                var text = makeText(group.value, group.mode);

                var variant = getVariant(group, options) || "normal";

                var node = void 0;
                if (group.mode === 'text') {
                    node = new _mathMLTree2.default.MathNode("mtext", [text]);
                } else if (/[0-9]/.test(group.value)) {
                    // TODO(kevinb) merge adjacent <mn> nodes
                    // do it as a post processing step
                    node = new _mathMLTree2.default.MathNode("mn", [text]);
                } else if (group.value === "\\prime") {
                    node = new _mathMLTree2.default.MathNode("mo", [text]);
                } else {
                    node = new _mathMLTree2.default.MathNode("mi", [text]);
                }
                if (variant !== defaultVariant[node.type]) {
                    node.setAttribute("mathvariant", variant);
                }

                return node;
            };

            groupTypes.bin = function (group) {
                var node = new _mathMLTree2.default.MathNode("mo", [makeText(group.value, group.mode)]);

                return node;
            };

            groupTypes.rel = function (group) {
                var node = new _mathMLTree2.default.MathNode("mo", [makeText(group.value, group.mode)]);

                return node;
            };

            groupTypes.open = function (group) {
                var node = new _mathMLTree2.default.MathNode("mo", [makeText(group.value, group.mode)]);

                return node;
            };

            groupTypes.close = function (group) {
                var node = new _mathMLTree2.default.MathNode("mo", [makeText(group.value, group.mode)]);

                return node;
            };

            groupTypes.inner = function (group) {
                var node = new _mathMLTree2.default.MathNode("mo", [makeText(group.value, group.mode)]);

                return node;
            };

            groupTypes.punct = function (group) {
                var node = new _mathMLTree2.default.MathNode("mo", [makeText(group.value, group.mode)]);

                node.setAttribute("separator", "true");

                return node;
            };

            groupTypes.ordgroup = function (group, options) {
                var inner = buildExpression(group.value, options);

                var node = new _mathMLTree2.default.MathNode("mrow", inner);

                return node;
            };

            groupTypes.text = function (group, options) {
                var body = group.value.body;

                // Convert each element of the body into MathML, and combine consecutive
                // <mtext> outputs into a single <mtext> tag.  In this way, we don't
                // nest non-text items (e.g., $nested-math$) within an <mtext>.
                var inner = [];
                var currentText = null;
                for (var i = 0; i < body.length; i++) {
                    var _group = buildGroup(body[i], options);
                    if (_group.type === 'mtext' && currentText != null) {
                        Array.prototype.push.apply(currentText.children, _group.children);
                    } else {
                        inner.push(_group);
                        if (_group.type === 'mtext') {
                            currentText = _group;
                        }
                    }
                }

                // If there is a single tag in the end (presumably <mtext>),
                // just return it.  Otherwise, wrap them in an <mrow>.
                if (inner.length === 1) {
                    return inner[0];
                } else {
                    return new _mathMLTree2.default.MathNode("mrow", inner);
                }
            };

            groupTypes.color = function (group, options) {
                var inner = buildExpression(group.value.value, options);

                var node = new _mathMLTree2.default.MathNode("mstyle", inner);

                node.setAttribute("mathcolor", group.value.color);

                return node;
            };

            groupTypes.supsub = function (group, options) {
                // Is the inner group a relevant horizonal brace?
                var isBrace = false;
                var isOver = void 0;
                var isSup = void 0;
                if (group.value.base) {
                    if (group.value.base.value.type === "horizBrace") {
                        isSup = group.value.sup ? true : false;
                        if (isSup === group.value.base.value.isOver) {
                            isBrace = true;
                            isOver = group.value.base.value.isOver;
                        }
                    }
                }

                var removeUnnecessaryRow = true;
                var children = [buildGroup(group.value.base, options, removeUnnecessaryRow)];

                if (group.value.sub) {
                    children.push(buildGroup(group.value.sub, options, removeUnnecessaryRow));
                }

                if (group.value.sup) {
                    children.push(buildGroup(group.value.sup, options, removeUnnecessaryRow));
                }

                var nodeType = void 0;
                if (isBrace) {
                    nodeType = isOver ? "mover" : "munder";
                } else if (!group.value.sub) {
                    nodeType = "msup";
                } else if (!group.value.sup) {
                    nodeType = "msub";
                } else {
                    var base = group.value.base;
                    if (base && base.value.limits && options.style === _Style2.default.DISPLAY) {
                        nodeType = "munderover";
                    } else {
                        nodeType = "msubsup";
                    }
                }

                var node = new _mathMLTree2.default.MathNode(nodeType, children);

                return node;
            };

            groupTypes.genfrac = function (group, options) {
                var node = new _mathMLTree2.default.MathNode("mfrac", [buildGroup(group.value.numer, options), buildGroup(group.value.denom, options)]);

                if (!group.value.hasBarLine) {
                    node.setAttribute("linethickness", "0px");
                }

                if (group.value.leftDelim != null || group.value.rightDelim != null) {
                    var withDelims = [];

                    if (group.value.leftDelim != null) {
                        var leftOp = new _mathMLTree2.default.MathNode("mo", [new _mathMLTree2.default.TextNode(group.value.leftDelim)]);

                        leftOp.setAttribute("fence", "true");

                        withDelims.push(leftOp);
                    }

                    withDelims.push(node);

                    if (group.value.rightDelim != null) {
                        var rightOp = new _mathMLTree2.default.MathNode("mo", [new _mathMLTree2.default.TextNode(group.value.rightDelim)]);

                        rightOp.setAttribute("fence", "true");

                        withDelims.push(rightOp);
                    }

                    var outerNode = new _mathMLTree2.default.MathNode("mrow", withDelims);

                    return outerNode;
                }

                return node;
            };

            groupTypes.sqrt = function (group, options) {
                var node = void 0;
                if (group.value.index) {
                    node = new _mathMLTree2.default.MathNode("mroot", [buildGroup(group.value.body, options), buildGroup(group.value.index, options)]);
                } else {
                    node = new _mathMLTree2.default.MathNode("msqrt", [buildGroup(group.value.body, options)]);
                }

                return node;
            };

            groupTypes.accent = function (group, options) {
                var accentNode = void 0;
                if (group.value.isStretchy) {
                    accentNode = _stretchy2.default.mathMLnode(group.value.label);
                } else {
                    accentNode = new _mathMLTree2.default.MathNode("mo", [makeText(group.value.label, group.mode)]);
                }

                var node = new _mathMLTree2.default.MathNode("mover", [buildGroup(group.value.base, options), accentNode]);

                node.setAttribute("accent", "true");

                return node;
            };

            groupTypes.spacing = function (group) {
                var node = void 0;

                if (group.value === "\\ " || group.value === "\\space" || group.value === " " || group.value === "~") {
                    node = new _mathMLTree2.default.MathNode("mtext", [new _mathMLTree2.default.TextNode("\xA0")]);
                } else {
                    node = new _mathMLTree2.default.MathNode("mspace");

                    node.setAttribute("width", _buildCommon2.default.spacingFunctions[group.value].size);
                }

                return node;
            };

            groupTypes.op = function (group, options) {
                var node = void 0;

                // TODO(emily): handle big operators using the `largeop` attribute

                if (group.value.symbol) {
                    // This is a symbol. Just add the symbol.
                    node = new _mathMLTree2.default.MathNode("mo", [makeText(group.value.body, group.mode)]);
                } else if (group.value.value) {
                    // This is an operator with children. Add them.
                    node = new _mathMLTree2.default.MathNode("mo", buildExpression(group.value.value, options));
                } else {
                    // This is a text operator. Add all of the characters from the
                    // operator's name.
                    // TODO(emily): Add a space in the middle of some of these
                    // operators, like \limsup.
                    node = new _mathMLTree2.default.MathNode("mi", [new _mathMLTree2.default.TextNode(group.value.body.slice(1))]);

                    // TODO(ron): Append an <mo>&ApplyFunction;</mo> as in \operatorname
                    // ref: https://www.w3.org/TR/REC-MathML/chap3_2.html#sec3.2.2
                }

                return node;
            };

            groupTypes.mod = function (group, options) {
                var inner = [];

                if (group.value.modType === "pod" || group.value.modType === "pmod") {
                    inner.push(new _mathMLTree2.default.MathNode("mo", [makeText("(", group.mode)]));
                }
                if (group.value.modType !== "pod") {
                    inner.push(new _mathMLTree2.default.MathNode("mo", [makeText("mod", group.mode)]));
                }
                if (group.value.value) {
                    var space = new _mathMLTree2.default.MathNode("mspace");
                    space.setAttribute("width", "0.333333em");
                    inner.push(space);
                    inner = inner.concat(buildExpression(group.value.value, options));
                }
                if (group.value.modType === "pod" || group.value.modType === "pmod") {
                    inner.push(new _mathMLTree2.default.MathNode("mo", [makeText(")", group.mode)]));
                }

                return new _mathMLTree2.default.MathNode("mo", inner);
            };

            groupTypes.katex = function (group) {
                var node = new _mathMLTree2.default.MathNode("mtext", [new _mathMLTree2.default.TextNode("KaTeX")]);

                return node;
            };

            groupTypes.font = function (group, options) {
                var font = group.value.font;
                return buildGroup(group.value.body, options.withFont(font));
            };

            groupTypes.styling = function (group, options) {
                // Figure out what style we're changing to.
                // TODO(kevinb): dedupe this with buildHTML.js
                // This will be easier of handling of styling nodes is in the same file.
                var styleMap = {
                    "display": _Style2.default.DISPLAY,
                    "text": _Style2.default.TEXT,
                    "script": _Style2.default.SCRIPT,
                    "scriptscript": _Style2.default.SCRIPTSCRIPT
                };

                var newStyle = styleMap[group.value.style];
                var newOptions = options.havingStyle(newStyle);

                var inner = buildExpression(group.value.value, newOptions);

                var node = new _mathMLTree2.default.MathNode("mstyle", inner);

                var styleAttributes = {
                    "display": ["0", "true"],
                    "text": ["0", "false"],
                    "script": ["1", "false"],
                    "scriptscript": ["2", "false"]
                };

                var attr = styleAttributes[group.value.style];

                node.setAttribute("scriptlevel", attr[0]);
                node.setAttribute("displaystyle", attr[1]);

                return node;
            };

            groupTypes.sizing = function (group, options) {
                var newOptions = options.havingSize(group.value.size);
                var inner = buildExpression(group.value.value, newOptions);

                var node = new _mathMLTree2.default.MathNode("mstyle", inner);

                // TODO(emily): This doesn't produce the correct size for nested size
                // changes, because we don't keep state of what style we're currently
                // in, so we can't reset the size to normal before changing it.  Now
                // that we're passing an options parameter we should be able to fix
                // this.
                node.setAttribute("mathsize", newOptions.sizeMultiplier + "em");

                return node;
            };

            groupTypes.verb = function (group, options) {
                var text = new _mathMLTree2.default.TextNode(_buildCommon2.default.makeVerb(group, options));
                var node = new _mathMLTree2.default.MathNode("mtext", [text]);
                node.setAttribute("mathvariant", _buildCommon2.default.fontMap["mathtt"].variant);
                return node;
            };

            groupTypes.overline = function (group, options) {
                var operator = new _mathMLTree2.default.MathNode("mo", [new _mathMLTree2.default.TextNode("\u203E")]);
                operator.setAttribute("stretchy", "true");

                var node = new _mathMLTree2.default.MathNode("mover", [buildGroup(group.value.body, options), operator]);
                node.setAttribute("accent", "true");

                return node;
            };

            groupTypes.underline = function (group, options) {
                var operator = new _mathMLTree2.default.MathNode("mo", [new _mathMLTree2.default.TextNode("\u203E")]);
                operator.setAttribute("stretchy", "true");

                var node = new _mathMLTree2.default.MathNode("munder", [buildGroup(group.value.body, options), operator]);
                node.setAttribute("accentunder", "true");

                return node;
            };

            groupTypes.accentUnder = function (group, options) {
                var accentNode = _stretchy2.default.mathMLnode(group.value.label);
                var node = new _mathMLTree2.default.MathNode("munder", [buildGroup(group.value.body, options), accentNode]);
                node.setAttribute("accentunder", "true");
                return node;
            };

            groupTypes.enclose = function (group, options) {
                var node = new _mathMLTree2.default.MathNode("menclose", [buildGroup(group.value.body, options)]);
                switch (group.value.label) {
                    case "\\cancel":
                        node.setAttribute("notation", "updiagonalstrike");
                        break;
                    case "\\bcancel":
                        node.setAttribute("notation", "downdiagonalstrike");
                        break;
                    case "\\sout":
                        node.setAttribute("notation", "horizontalstrike");
                        break;
                    case "\\fbox":
                        node.setAttribute("notation", "box");
                        break;
                    case "\\colorbox":
                        node.setAttribute("mathbackground", group.value.backgroundColor.value);
                        break;
                    case "\\fcolorbox":
                        node.setAttribute("mathbackground", group.value.backgroundColor.value);
                        // TODO(ron): I don't know any way to set the border color.
                        node.setAttribute("notation", "box");
                        break;
                    default:
                        // xcancel
                        node.setAttribute("notation", "updiagonalstrike downdiagonalstrike");
                }
                return node;
            };

            groupTypes.horizBrace = function (group, options) {
                var accentNode = _stretchy2.default.mathMLnode(group.value.label);
                return new _mathMLTree2.default.MathNode(group.value.isOver ? "mover" : "munder", [buildGroup(group.value.base, options), accentNode]);
            };

            groupTypes.xArrow = function (group, options) {
                var arrowNode = _stretchy2.default.mathMLnode(group.value.label);
                var node = void 0;
                var lowerNode = void 0;

                if (group.value.body) {
                    var upperNode = buildGroup(group.value.body, options);
                    if (group.value.below) {
                        lowerNode = buildGroup(group.value.below, options);
                        node = new _mathMLTree2.default.MathNode("munderover", [arrowNode, lowerNode, upperNode]);
                    } else {
                        node = new _mathMLTree2.default.MathNode("mover", [arrowNode, upperNode]);
                    }
                } else if (group.value.below) {
                    lowerNode = buildGroup(group.value.below, options);
                    node = new _mathMLTree2.default.MathNode("munder", [arrowNode, lowerNode]);
                } else {
                    node = new _mathMLTree2.default.MathNode("mover", [arrowNode]);
                }
                return node;
            };

            groupTypes.rule = function (group) {
                // TODO(emily): Figure out if there's an actual way to draw black boxes
                // in MathML.
                var node = new _mathMLTree2.default.MathNode("mrow");

                return node;
            };

            groupTypes.kern = function (group) {
                // TODO(kevin): Figure out if there's a way to add space in MathML
                var node = new _mathMLTree2.default.MathNode("mrow");

                return node;
            };

            groupTypes.lap = function (group, options) {
                // mathllap, mathrlap, mathclap
                var node = new _mathMLTree2.default.MathNode("mpadded", [buildGroup(group.value.body, options)]);

                if (group.value.alignment !== "rlap") {
                    var offset = group.value.alignment === "llap" ? "-1" : "-0.5";
                    node.setAttribute("lspace", offset + "width");
                }
                node.setAttribute("width", "0px");

                return node;
            };

            groupTypes.smash = function (group, options) {
                var node = new _mathMLTree2.default.MathNode("mpadded", [buildGroup(group.value.body, options)]);

                if (group.value.smashHeight) {
                    node.setAttribute("height", "0px");
                }

                if (group.value.smashDepth) {
                    node.setAttribute("depth", "0px");
                }

                return node;
            };

            groupTypes.mclass = function (group, options) {
                var inner = buildExpression(group.value.value, options);
                return new _mathMLTree2.default.MathNode("mstyle", inner);
            };

            groupTypes.raisebox = function (group, options) {
                var node = new _mathMLTree2.default.MathNode("mpadded", [buildGroup(group.value.body, options)]);
                var dy = group.value.dy.value.number + group.value.dy.value.unit;
                node.setAttribute("voffset", dy);
                return node;
            };

            /**
             * Takes a list of nodes, builds them, and returns a list of the generated
             * MathML nodes. A little simpler than the HTML version because we don't do any
             * previous-node handling.
             */
            var buildExpression = exports.buildExpression = function buildExpression(expression, options) {
                var groups = [];
                for (var i = 0; i < expression.length; i++) {
                    var group = expression[i];
                    groups.push(buildGroup(group, options));
                }

                // TODO(kevinb): combine \\not with mrels and mords

                return groups;
            };

            /**
             * Takes a group from the parser and calls the appropriate groupTypes function
             * on it to produce a MathML node.
             */
            var buildGroup = exports.buildGroup = function buildGroup(group, options) {
                var removeUnnecessaryRow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

                if (!group) {
                    return new _mathMLTree2.default.MathNode("mrow");
                }

                if (groupTypes[group.type]) {
                    // Call the groupTypes function
                    var result = groupTypes[group.type](group, options);
                    if (removeUnnecessaryRow) {
                        if (result.type === "mrow" && result.children.length === 1) {
                            return result.children[0];
                        }
                    }
                    return result;
                } else {
                    throw new _ParseError2.default("Got group of unknown type: '" + group.type + "'");
                }
            };

            /**
             * Takes a full parse tree and settings and builds a MathML representation of
             * it. In particular, we put the elements from building the parse tree into a
             * <semantics> tag so we can also include that TeX source as an annotation.
             *
             * Note that we actually return a domTree element with a `<math>` inside it so
             * we can do appropriate styling.
             */
            function buildMathML(tree, texExpression, options) {
                var expression = buildExpression(tree, options);

                // Wrap up the expression in an mrow so it is presented in the semantics
                // tag correctly.
                var wrapper = new _mathMLTree2.default.MathNode("mrow", expression);

                // Build a TeX annotation of the source
                var annotation = new _mathMLTree2.default.MathNode("annotation", [new _mathMLTree2.default.TextNode(texExpression)]);

                annotation.setAttribute("encoding", "application/x-tex");

                var semantics = new _mathMLTree2.default.MathNode("semantics", [wrapper, annotation]);

                var math = new _mathMLTree2.default.MathNode("math", [semantics]);

                // You can't style <math> nodes, so we wrap the node in a span.
                return _buildCommon2.default.makeSpan(["katex-mathml"], [math]);
            }
        }, { "./ParseError": 84, "./Style": 89, "./buildCommon": 91, "./fontMetrics": 101, "./mathMLTree": 108, "./stretchy": 110, "./symbols": 112, "./utils": 115 }], 94: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _buildHTML = require("./buildHTML");

            var _buildHTML2 = _interopRequireDefault(_buildHTML);

            var _buildMathML = require("./buildMathML");

            var _buildMathML2 = _interopRequireDefault(_buildMathML);

            var _buildCommon = require("./buildCommon");

            var _buildCommon2 = _interopRequireDefault(_buildCommon);

            var _Options = require("./Options");

            var _Options2 = _interopRequireDefault(_Options);

            var _Settings = require("./Settings");

            var _Settings2 = _interopRequireDefault(_Settings);

            var _Style = require("./Style");

            var _Style2 = _interopRequireDefault(_Style);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            var buildTree = function buildTree(tree, expression, settings) {
                settings = settings || new _Settings2.default({});

                var startStyle = _Style2.default.TEXT;
                if (settings.displayMode) {
                    startStyle = _Style2.default.DISPLAY;
                }

                // Setup the default options
                var options = new _Options2.default({
                    style: startStyle,
                    maxSize: settings.maxSize
                });

                // `buildHTML` sometimes messes with the parse tree (like turning bins ->
                // ords), so we build the MathML version first.
                var mathMLNode = (0, _buildMathML2.default)(tree, expression, options);
                var htmlNode = (0, _buildHTML2.default)(tree, options);

                var katexNode = _buildCommon2.default.makeSpan(["katex"], [mathMLNode, htmlNode]);

                if (settings.displayMode) {
                    return _buildCommon2.default.makeSpan(["katex-display"], [katexNode]);
                } else {
                    return katexNode;
                }
            };

            exports.default = buildTree;
        }, { "./Options": 83, "./Settings": 87, "./Style": 89, "./buildCommon": 91, "./buildHTML": 92, "./buildMathML": 93 }], 95: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports._environments = undefined;
            exports.default = defineEnvironment;

            var _buildHTML = require("./buildHTML");

            var _buildMathML = require("./buildMathML");

            var _Options = require("./Options");

            var _Options2 = _interopRequireDefault(_Options);

            var _ParseNode = require("./ParseNode");

            var _ParseNode2 = _interopRequireDefault(_ParseNode);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * All registered environments.
             * `environments.js` exports this same dictionary again and makes it public.
             * `Parser.js` requires this dictionary via `environments.js`.
             */

            /**
             * The context contains the following properties:
             *  - mode: current parsing mode.
             *  - envName: the name of the environment, one of the listed names.
             *  - parser: the parser object.
             */

            /**
             *  - context: information and references provided by the parser
             *  - args: an array of arguments passed to \begin{name}
             *  - optArgs: an array of optional arguments passed to \begin{name}
             */

            /**
             *  - numArgs: (default 0) The number of arguments after the \begin{name} function.
             *  - argTypes: (optional) Just like for a function
             *  - allowedInText: (default false) Whether or not the environment is allowed
             *                   inside text mode (not enforced yet).
             *  - numOptionalArgs: (default 0) Just like for a function
             */

            /**
             * Final enviornment spec for use at parse time.
             * This is almost identical to `EnvDefSpec`, except it
             * 1. includes the function handler
             * 2. requires all arguments except argType
             * It is generated by `defineEnvironment()` below.
             */
            var _environments = exports._environments = {};

            function defineEnvironment(_ref) {
                var type = _ref.type,
                    names = _ref.names,
                    props = _ref.props,
                    handler = _ref.handler,
                    htmlBuilder = _ref.htmlBuilder,
                    mathmlBuilder = _ref.mathmlBuilder;

                // Set default values of environments
                var data = {
                    numArgs: props.numArgs || 0,
                    greediness: 1,
                    allowedInText: false,
                    numOptionalArgs: 0,
                    handler: handler
                };
                for (var i = 0; i < names.length; ++i) {
                    _environments[names[i]] = data;
                }
                if (htmlBuilder) {
                    _buildHTML.groupTypes[type] = htmlBuilder;
                }
                if (mathmlBuilder) {
                    _buildMathML.groupTypes[type] = mathmlBuilder;
                }
            }
        }, { "./Options": 83, "./ParseNode": 85, "./buildHTML": 92, "./buildMathML": 93 }], 96: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.ordargument = exports._functions = undefined;
            exports.default = defineFunction;

            var _buildHTML = require("./buildHTML");

            var _buildMathML = require("./buildMathML");

            /**
             * All registered functions.
             * `functions.js` just exports this same dictionary again and makes it public.
             * `Parser.js` requires this dictionary.
             */

            /** Context provided to function handlers for error messages. */

            // TODO: Enumerate all allowed output types.


            /**
             * Final function spec for use at parse time.
             * This is almost identical to `FunctionPropSpec`, except it
             * 1. includes the function handler, and
             * 2. requires all arguments except argTypes.
             * It is generated by `defineFunction()` below.
             */
            var _functions = exports._functions = {};

            function defineFunction(_ref) {
                var type = _ref.type,
                    names = _ref.names,
                    props = _ref.props,
                    handler = _ref.handler,
                    htmlBuilder = _ref.htmlBuilder,
                    mathmlBuilder = _ref.mathmlBuilder;

                // Set default values of functions
                var data = {
                    numArgs: props.numArgs,
                    argTypes: props.argTypes,
                    greediness: props.greediness === undefined ? 1 : props.greediness,
                    allowedInText: !!props.allowedInText,
                    allowedInMath: props.allowedInMath === undefined ? true : props.allowedInMath,
                    numOptionalArgs: props.numOptionalArgs || 0,
                    infix: !!props.infix,
                    handler: handler
                };
                for (var i = 0; i < names.length; ++i) {
                    _functions[names[i]] = data;
                }
                if (type) {
                    if (htmlBuilder) {
                        _buildHTML.groupTypes[type] = htmlBuilder;
                    }
                    if (mathmlBuilder) {
                        _buildMathML.groupTypes[type] = mathmlBuilder;
                    }
                }
            }

            // Since the corresponding buildHTML/buildMathML function expects a
            // list of elements, we normalize for different kinds of arguments
            var ordargument = exports.ordargument = function ordargument(arg) {
                if (arg.type === "ordgroup") {
                    return arg.value;
                } else {
                    return [arg];
                }
            };
        }, { "./buildHTML": 92, "./buildMathML": 93 }], 97: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _ParseError = require("./ParseError");

            var _ParseError2 = _interopRequireDefault(_ParseError);

            var _Style = require("./Style");

            var _Style2 = _interopRequireDefault(_Style);

            var _domTree = require("./domTree");

            var _domTree2 = _interopRequireDefault(_domTree);

            var _buildCommon = require("./buildCommon");

            var _buildCommon2 = _interopRequireDefault(_buildCommon);

            var _fontMetrics = require("./fontMetrics");

            var _fontMetrics2 = _interopRequireDefault(_fontMetrics);

            var _symbols = require("./symbols");

            var _symbols2 = _interopRequireDefault(_symbols);

            var _utils = require("./utils");

            var _utils2 = _interopRequireDefault(_utils);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * Get the metrics for a given symbol and font, after transformation (i.e.
             * after following replacement from symbols.js)
             */
            var getMetrics = function getMetrics(symbol, font) {
                if (_symbols2.default.math[symbol] && _symbols2.default.math[symbol].replace) {
                    return _fontMetrics2.default.getCharacterMetrics(_symbols2.default.math[symbol].replace, font);
                } else {
                    return _fontMetrics2.default.getCharacterMetrics(symbol, font);
                }
            };

            /**
             * Puts a delimiter span in a given style, and adds appropriate height, depth,
             * and maxFontSizes.
             */
            /**
             * This file deals with creating delimiters of various sizes. The TeXbook
             * discusses these routines on page 441-442, in the "Another subroutine sets box
             * x to a specified variable delimiter" paragraph.
             *
             * There are three main routines here. `makeSmallDelim` makes a delimiter in the
             * normal font, but in either text, script, or scriptscript style.
             * `makeLargeDelim` makes a delimiter in textstyle, but in one of the Size1,
             * Size2, Size3, or Size4 fonts. `makeStackedDelim` makes a delimiter out of
             * smaller pieces that are stacked on top of one another.
             *
             * The functions take a parameter `center`, which determines if the delimiter
             * should be centered around the axis.
             *
             * Then, there are three exposed functions. `sizedDelim` makes a delimiter in
             * one of the given sizes. This is used for things like `\bigl`.
             * `customSizedDelim` makes a delimiter with a given total height+depth. It is
             * called in places like `\sqrt`. `leftRightDelim` makes an appropriate
             * delimiter which surrounds an expression of a given height an depth. It is
             * used in `\left` and `\right`.
             */

            var styleWrap = function styleWrap(delim, toStyle, options, classes) {
                var newOptions = options.havingBaseStyle(toStyle);

                var span = _buildCommon2.default.makeSpan((classes || []).concat(newOptions.sizingClasses(options)), [delim], options);

                span.delimSizeMultiplier = newOptions.sizeMultiplier / options.sizeMultiplier;
                span.height *= span.delimSizeMultiplier;
                span.depth *= span.delimSizeMultiplier;
                span.maxFontSize = newOptions.sizeMultiplier;

                return span;
            };

            var centerSpan = function centerSpan(span, options, style) {
                var newOptions = options.havingBaseStyle(style);
                var shift = (1 - options.sizeMultiplier / newOptions.sizeMultiplier) * options.fontMetrics().axisHeight;

                span.classes.push("delimcenter");
                span.style.top = shift + "em";
                span.height -= shift;
                span.depth += shift;
            };

            /**
             * Makes a small delimiter. This is a delimiter that comes in the Main-Regular
             * font, but is restyled to either be in textstyle, scriptstyle, or
             * scriptscriptstyle.
             */
            var makeSmallDelim = function makeSmallDelim(delim, style, center, options, mode, classes) {
                var text = _buildCommon2.default.makeSymbol(delim, "Main-Regular", mode, options);
                var span = styleWrap(text, style, options, classes);
                if (center) {
                    centerSpan(span, options, style);
                }
                return span;
            };

            /**
             * Builds a symbol in the given font size (note size is an integer)
             */
            var mathrmSize = function mathrmSize(value, size, mode, options) {
                return _buildCommon2.default.makeSymbol(value, "Size" + size + "-Regular", mode, options);
            };

            /**
             * Makes a large delimiter. This is a delimiter that comes in the Size1, Size2,
             * Size3, or Size4 fonts. It is always rendered in textstyle.
             */
            var makeLargeDelim = function makeLargeDelim(delim, size, center, options, mode, classes) {
                var inner = mathrmSize(delim, size, mode, options);
                var span = styleWrap(_buildCommon2.default.makeSpan(["delimsizing", "size" + size], [inner], options), _Style2.default.TEXT, options, classes);
                if (center) {
                    centerSpan(span, options, _Style2.default.TEXT);
                }
                return span;
            };

            /**
             * Make an inner span with the given offset and in the given font. This is used
             * in `makeStackedDelim` to make the stacking pieces for the delimiter.
             */
            var makeInner = function makeInner(symbol, font, mode) {
                var sizeClass = void 0;
                // Apply the correct CSS class to choose the right font.
                if (font === "Size1-Regular") {
                    sizeClass = "delim-size1";
                } else if (font === "Size4-Regular") {
                    sizeClass = "delim-size4";
                }

                var inner = _buildCommon2.default.makeSpan(["delimsizinginner", sizeClass], [_buildCommon2.default.makeSpan([], [_buildCommon2.default.makeSymbol(symbol, font, mode)])]);

                // Since this will be passed into `makeVList` in the end, wrap the element
                // in the appropriate tag that VList uses.
                return { type: "elem", elem: inner };
            };

            /**
             * Make a stacked delimiter out of a given delimiter, with the total height at
             * least `heightTotal`. This routine is mentioned on page 442 of the TeXbook.
             */
            var makeStackedDelim = function makeStackedDelim(delim, heightTotal, center, options, mode, classes) {
                // There are four parts, the top, an optional middle, a repeated part, and a
                // bottom.
                var top = void 0;
                var middle = void 0;
                var repeat = void 0;
                var bottom = void 0;
                top = repeat = bottom = delim;
                middle = null;
                // Also keep track of what font the delimiters are in
                var font = "Size1-Regular";

                // We set the parts and font based on the symbol. Note that we use
                // '\u23d0' instead of '|' and '\u2016' instead of '\\|' for the
                // repeats of the arrows
                if (delim === "\\uparrow") {
                    repeat = bottom = "\u23D0";
                } else if (delim === "\\Uparrow") {
                    repeat = bottom = "\u2016";
                } else if (delim === "\\downarrow") {
                    top = repeat = "\u23D0";
                } else if (delim === "\\Downarrow") {
                    top = repeat = "\u2016";
                } else if (delim === "\\updownarrow") {
                    top = "\\uparrow";
                    repeat = "\u23D0";
                    bottom = "\\downarrow";
                } else if (delim === "\\Updownarrow") {
                    top = "\\Uparrow";
                    repeat = "\u2016";
                    bottom = "\\Downarrow";
                } else if (delim === "[" || delim === "\\lbrack") {
                    top = "\u23A1";
                    repeat = "\u23A2";
                    bottom = "\u23A3";
                    font = "Size4-Regular";
                } else if (delim === "]" || delim === "\\rbrack") {
                    top = "\u23A4";
                    repeat = "\u23A5";
                    bottom = "\u23A6";
                    font = "Size4-Regular";
                } else if (delim === "\\lfloor") {
                    repeat = top = "\u23A2";
                    bottom = "\u23A3";
                    font = "Size4-Regular";
                } else if (delim === "\\lceil") {
                    top = "\u23A1";
                    repeat = bottom = "\u23A2";
                    font = "Size4-Regular";
                } else if (delim === "\\rfloor") {
                    repeat = top = "\u23A5";
                    bottom = "\u23A6";
                    font = "Size4-Regular";
                } else if (delim === "\\rceil") {
                    top = "\u23A4";
                    repeat = bottom = "\u23A5";
                    font = "Size4-Regular";
                } else if (delim === "(") {
                    top = "\u239B";
                    repeat = "\u239C";
                    bottom = "\u239D";
                    font = "Size4-Regular";
                } else if (delim === ")") {
                    top = "\u239E";
                    repeat = "\u239F";
                    bottom = "\u23A0";
                    font = "Size4-Regular";
                } else if (delim === "\\{" || delim === "\\lbrace") {
                    top = "\u23A7";
                    middle = "\u23A8";
                    bottom = "\u23A9";
                    repeat = "\u23AA";
                    font = "Size4-Regular";
                } else if (delim === "\\}" || delim === "\\rbrace") {
                    top = "\u23AB";
                    middle = "\u23AC";
                    bottom = "\u23AD";
                    repeat = "\u23AA";
                    font = "Size4-Regular";
                } else if (delim === "\\lgroup") {
                    top = "\u23A7";
                    bottom = "\u23A9";
                    repeat = "\u23AA";
                    font = "Size4-Regular";
                } else if (delim === "\\rgroup") {
                    top = "\u23AB";
                    bottom = "\u23AD";
                    repeat = "\u23AA";
                    font = "Size4-Regular";
                } else if (delim === "\\lmoustache") {
                    top = "\u23A7";
                    bottom = "\u23AD";
                    repeat = "\u23AA";
                    font = "Size4-Regular";
                } else if (delim === "\\rmoustache") {
                    top = "\u23AB";
                    bottom = "\u23A9";
                    repeat = "\u23AA";
                    font = "Size4-Regular";
                }

                // Get the metrics of the four sections
                var topMetrics = getMetrics(top, font);
                var topHeightTotal = topMetrics.height + topMetrics.depth;
                var repeatMetrics = getMetrics(repeat, font);
                var repeatHeightTotal = repeatMetrics.height + repeatMetrics.depth;
                var bottomMetrics = getMetrics(bottom, font);
                var bottomHeightTotal = bottomMetrics.height + bottomMetrics.depth;
                var middleHeightTotal = 0;
                var middleFactor = 1;
                if (middle !== null) {
                    var middleMetrics = getMetrics(middle, font);
                    middleHeightTotal = middleMetrics.height + middleMetrics.depth;
                    middleFactor = 2; // repeat symmetrically above and below middle
                }

                // Calcuate the minimal height that the delimiter can have.
                // It is at least the size of the top, bottom, and optional middle combined.
                var minHeight = topHeightTotal + bottomHeightTotal + middleHeightTotal;

                // Compute the number of copies of the repeat symbol we will need
                var repeatCount = Math.ceil((heightTotal - minHeight) / (middleFactor * repeatHeightTotal));

                // Compute the total height of the delimiter including all the symbols
                var realHeightTotal = minHeight + repeatCount * middleFactor * repeatHeightTotal;

                // The center of the delimiter is placed at the center of the axis. Note
                // that in this context, "center" means that the delimiter should be
                // centered around the axis in the current style, while normally it is
                // centered around the axis in textstyle.
                var axisHeight = options.fontMetrics().axisHeight;
                if (center) {
                    axisHeight *= options.sizeMultiplier;
                }
                // Calculate the depth
                var depth = realHeightTotal / 2 - axisHeight;

                // Now, we start building the pieces that will go into the vlist

                // Keep a list of the inner pieces
                var inners = [];

                // Add the bottom symbol
                inners.push(makeInner(bottom, font, mode));

                if (middle === null) {
                    // Add that many symbols
                    for (var i = 0; i < repeatCount; i++) {
                        inners.push(makeInner(repeat, font, mode));
                    }
                } else {
                    // When there is a middle bit, we need the middle part and two repeated
                    // sections
                    for (var _i = 0; _i < repeatCount; _i++) {
                        inners.push(makeInner(repeat, font, mode));
                    }
                    inners.push(makeInner(middle, font, mode));
                    for (var _i2 = 0; _i2 < repeatCount; _i2++) {
                        inners.push(makeInner(repeat, font, mode));
                    }
                }

                // Add the top symbol
                inners.push(makeInner(top, font, mode));

                // Finally, build the vlist
                var newOptions = options.havingBaseStyle(_Style2.default.TEXT);
                var inner = _buildCommon2.default.makeVList(inners, "bottom", depth, newOptions);

                return styleWrap(_buildCommon2.default.makeSpan(["delimsizing", "mult"], [inner], newOptions), _Style2.default.TEXT, options, classes);
            };

            var sqrtSvg = function sqrtSvg(sqrtName, height, viewBoxHeight, options) {
                var alternate = void 0;
                if (sqrtName === "sqrtTall") {
                    // sqrtTall is from glyph U23B7 in the font KaTeX_Size4-Regular
                    // One path edge has a variable length. It runs from the viniculumn
                    // to a point near (14 units) the bottom of the surd. The viniculum
                    // is 40 units thick. So the length of the line in question is:
                    var vertSegment = viewBoxHeight - 54;
                    alternate = "M702 0H400000v40H742v" + vertSegment + "l-4 4-4 4c-.667.667\n-2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1h-12l-28-84c-16.667-52-96.667\n-294.333-240-727l-212 -643 -85 170c-4-3.333-8.333-7.667-13 -13l-13-13l77-155\n 77-156c66 199.333 139 419.667 219 661 l218 661zM702 0H400000v40H742z";
                }
                var pathNode = new _domTree2.default.pathNode(sqrtName, alternate);

                // Note: 1000:1 ratio of viewBox to document em width.
                var attributes = [["width", "400em"], ["height", height + "em"]];
                attributes.push(["viewBox", "0 0 400000 " + viewBoxHeight]);
                attributes.push(["preserveAspectRatio", "xMinYMin slice"]);
                var svg = new _domTree2.default.svgNode([pathNode], attributes);

                return _buildCommon2.default.makeSpan(["hide-tail"], [svg], options);
            };

            var sqrtSpan = function sqrtSpan(height, delim, options) {
                // Create a span containing an SVG image of a sqrt symbol.
                var span = void 0;
                var sizeMultiplier = options.sizeMultiplier; // default
                var spanHeight = void 0;
                var viewBoxHeight = void 0;

                if (delim.type === "small") {
                    // Get an SVG that is derived from glyph U+221A in font KaTeX-Main.
                    viewBoxHeight = 1000; // from font
                    var newOptions = options.havingBaseStyle(delim.style);
                    sizeMultiplier = newOptions.sizeMultiplier / options.sizeMultiplier;
                    spanHeight = 1 * sizeMultiplier;
                    span = sqrtSvg("sqrtMain", spanHeight, viewBoxHeight, options);
                    span.style.minWidth = "0.853em";
                    span.advanceWidth = 0.833 * sizeMultiplier; // from the font.
                } else if (delim.type === "large") {
                    // These SVGs come from fonts: KaTeX_Size1, _Size2, etc.
                    viewBoxHeight = 1000 * sizeToMaxHeight[delim.size];
                    spanHeight = sizeToMaxHeight[delim.size] / sizeMultiplier;
                    span = sqrtSvg("sqrtSize" + delim.size, spanHeight, viewBoxHeight, options);
                    span.style.minWidth = "1.02em";
                    span.advanceWidth = 1.0 / sizeMultiplier; // from the font
                } else {
                    // Tall sqrt. In TeX, this would be stacked using multiple glyphs.
                    // We'll use a single SVG to accomplish the same thing.
                    spanHeight = height / sizeMultiplier;
                    viewBoxHeight = Math.floor(1000 * height);
                    span = sqrtSvg("sqrtTall", spanHeight, viewBoxHeight, options);
                    span.style.minWidth = "0.742em";
                    span.advanceWidth = 1.056 / sizeMultiplier;
                }

                span.height = spanHeight;
                span.style.height = spanHeight + "em";
                span.sizeMultiplier = sizeMultiplier;

                return span;
            };

            // There are three kinds of delimiters, delimiters that stack when they become
            // too large
            var stackLargeDelimiters = ["(", ")", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\\lceil", "\\rceil", "\\surd"];

            // delimiters that always stack
            var stackAlwaysDelimiters = ["\\uparrow", "\\downarrow", "\\updownarrow", "\\Uparrow", "\\Downarrow", "\\Updownarrow", "|", "\\|", "\\vert", "\\Vert", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\\lmoustache", "\\rmoustache"];

            // and delimiters that never stack
            var stackNeverDelimiters = ["<", ">", "\\langle", "\\rangle", "/", "\\backslash", "\\lt", "\\gt"];

            // Metrics of the different sizes. Found by looking at TeX's output of
            // $\bigl| // \Bigl| \biggl| \Biggl| \showlists$
            // Used to create stacked delimiters of appropriate sizes in makeSizedDelim.
            var sizeToMaxHeight = [0, 1.2, 1.8, 2.4, 3.0];

            /**
             * Used to create a delimiter of a specific size, where `size` is 1, 2, 3, or 4.
             */
            var makeSizedDelim = function makeSizedDelim(delim, size, options, mode, classes) {
                // < and > turn into \langle and \rangle in delimiters
                if (delim === "<" || delim === "\\lt") {
                    delim = "\\langle";
                } else if (delim === ">" || delim === "\\gt") {
                    delim = "\\rangle";
                }

                // Sized delimiters are never centered.
                if (_utils2.default.contains(stackLargeDelimiters, delim) || _utils2.default.contains(stackNeverDelimiters, delim)) {
                    return makeLargeDelim(delim, size, false, options, mode, classes);
                } else if (_utils2.default.contains(stackAlwaysDelimiters, delim)) {
                    return makeStackedDelim(delim, sizeToMaxHeight[size], false, options, mode, classes);
                } else {
                    throw new _ParseError2.default("Illegal delimiter: '" + delim + "'");
                }
            };

            /**
             * There are three different sequences of delimiter sizes that the delimiters
             * follow depending on the kind of delimiter. This is used when creating custom
             * sized delimiters to decide whether to create a small, large, or stacked
             * delimiter.
             *
             * In real TeX, these sequences aren't explicitly defined, but are instead
             * defined inside the font metrics. Since there are only three sequences that
             * are possible for the delimiters that TeX defines, it is easier to just encode
             * them explicitly here.
             */

            // Delimiters that never stack try small delimiters and large delimiters only
            var stackNeverDelimiterSequence = [{ type: "small", style: _Style2.default.SCRIPTSCRIPT }, { type: "small", style: _Style2.default.SCRIPT }, { type: "small", style: _Style2.default.TEXT }, { type: "large", size: 1 }, { type: "large", size: 2 }, { type: "large", size: 3 }, { type: "large", size: 4 }];

            // Delimiters that always stack try the small delimiters first, then stack
            var stackAlwaysDelimiterSequence = [{ type: "small", style: _Style2.default.SCRIPTSCRIPT }, { type: "small", style: _Style2.default.SCRIPT }, { type: "small", style: _Style2.default.TEXT }, { type: "stack" }];

            // Delimiters that stack when large try the small and then large delimiters, and
            // stack afterwards
            var stackLargeDelimiterSequence = [{ type: "small", style: _Style2.default.SCRIPTSCRIPT }, { type: "small", style: _Style2.default.SCRIPT }, { type: "small", style: _Style2.default.TEXT }, { type: "large", size: 1 }, { type: "large", size: 2 }, { type: "large", size: 3 }, { type: "large", size: 4 }, { type: "stack" }];

            /**
             * Get the font used in a delimiter based on what kind of delimiter it is.
             */
            var delimTypeToFont = function delimTypeToFont(type) {
                if (type.type === "small") {
                    return "Main-Regular";
                } else if (type.type === "large") {
                    return "Size" + type.size + "-Regular";
                } else if (type.type === "stack") {
                    return "Size4-Regular";
                }
            };

            /**
             * Traverse a sequence of types of delimiters to decide what kind of delimiter
             * should be used to create a delimiter of the given height+depth.
             */
            var traverseSequence = function traverseSequence(delim, height, sequence, options) {
                // Here, we choose the index we should start at in the sequences. In smaller
                // sizes (which correspond to larger numbers in style.size) we start earlier
                // in the sequence. Thus, scriptscript starts at index 3-3=0, script starts
                // at index 3-2=1, text starts at 3-1=2, and display starts at min(2,3-0)=2
                var start = Math.min(2, 3 - options.style.size);
                for (var i = start; i < sequence.length; i++) {
                    if (sequence[i].type === "stack") {
                        // This is always the last delimiter, so we just break the loop now.
                        break;
                    }

                    var metrics = getMetrics(delim, delimTypeToFont(sequence[i]));
                    var heightDepth = metrics.height + metrics.depth;

                    // Small delimiters are scaled down versions of the same font, so we
                    // account for the style change size.

                    if (sequence[i].type === "small") {
                        var newOptions = options.havingBaseStyle(sequence[i].style);
                        heightDepth *= newOptions.sizeMultiplier;
                    }

                    // Check if the delimiter at this size works for the given height.
                    if (heightDepth > height) {
                        return sequence[i];
                    }
                }

                // If we reached the end of the sequence, return the last sequence element.
                return sequence[sequence.length - 1];
            };

            /**
             * Make a delimiter of a given height+depth, with optional centering. Here, we
             * traverse the sequences, and create a delimiter that the sequence tells us to.
             */
            var makeCustomSizedDelim = function makeCustomSizedDelim(delim, height, center, options, mode, classes) {
                if (delim === "<" || delim === "\\lt") {
                    delim = "\\langle";
                } else if (delim === ">" || delim === "\\gt") {
                    delim = "\\rangle";
                }

                // Decide what sequence to use
                var sequence = void 0;
                if (_utils2.default.contains(stackNeverDelimiters, delim)) {
                    sequence = stackNeverDelimiterSequence;
                } else if (_utils2.default.contains(stackLargeDelimiters, delim)) {
                    sequence = stackLargeDelimiterSequence;
                } else {
                    sequence = stackAlwaysDelimiterSequence;
                }

                // Look through the sequence
                var delimType = traverseSequence(delim, height, sequence, options);

                if (delim === "\\surd") {
                    // Get an SVG image
                    return sqrtSpan(height, delimType, options);
                } else {
                    // Get the delimiter from font glyphs.
                    // Depending on the sequence element we decided on, call the
                    // appropriate function.
                    if (delimType.type === "small") {
                        return makeSmallDelim(delim, delimType.style, center, options, mode, classes);
                    } else if (delimType.type === "large") {
                        return makeLargeDelim(delim, delimType.size, center, options, mode, classes);
                    } else if (delimType.type === "stack") {
                        return makeStackedDelim(delim, height, center, options, mode, classes);
                    }
                }
            };

            /**
             * Make a delimiter for use with `\left` and `\right`, given a height and depth
             * of an expression that the delimiters surround.
             */
            var makeLeftRightDelim = function makeLeftRightDelim(delim, height, depth, options, mode, classes) {
                // We always center \left/\right delimiters, so the axis is always shifted
                var axisHeight = options.fontMetrics().axisHeight * options.sizeMultiplier;

                // Taken from TeX source, tex.web, function make_left_right
                var delimiterFactor = 901;
                var delimiterExtend = 5.0 / options.fontMetrics().ptPerEm;

                var maxDistFromAxis = Math.max(height - axisHeight, depth + axisHeight);

                var totalHeight = Math.max(
                // In real TeX, calculations are done using integral values which are
                // 65536 per pt, or 655360 per em. So, the division here truncates in
                // TeX but doesn't here, producing different results. If we wanted to
                // exactly match TeX's calculation, we could do
                //   Math.floor(655360 * maxDistFromAxis / 500) *
                //    delimiterFactor / 655360
                // (To see the difference, compare
                //    x^{x^{\left(\rule{0.1em}{0.68em}\right)}}
                // in TeX and KaTeX)
                maxDistFromAxis / 500 * delimiterFactor, 2 * maxDistFromAxis - delimiterExtend);

                // Finally, we defer to `makeCustomSizedDelim` with our calculated total
                // height
                return makeCustomSizedDelim(delim, totalHeight, true, options, mode, classes);
            };

            exports.default = {
                sizedDelim: makeSizedDelim,
                customSizedDelim: makeCustomSizedDelim,
                leftRightDelim: makeLeftRightDelim
            };
        }, { "./ParseError": 84, "./Style": 89, "./buildCommon": 91, "./domTree": 98, "./fontMetrics": 101, "./symbols": 112, "./utils": 115 }], 98: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");

            var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

            var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = require("babel-runtime/helpers/createClass");

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _unicodeRegexes = require("./unicodeRegexes");

            var _utils = require("./utils");

            var _utils2 = _interopRequireDefault(_utils);

            var _svgGeometry = require("./svgGeometry");

            var _svgGeometry2 = _interopRequireDefault(_svgGeometry);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * Create an HTML className based on a list of classes. In addition to joining
             * with spaces, we also remove null or empty classes.
             */
            var createClass = function createClass(classes) {
                classes = classes.slice();
                for (var i = classes.length - 1; i >= 0; i--) {
                    if (!classes[i]) {
                        classes.splice(i, 1);
                    }
                }

                return classes.join(" ");
            };

            /**
             * This node represents a span node, with a className, a list of children, and
             * an inline style. It also contains information about its height, depth, and
             * maxFontSize.
             */
            /**
             * These objects store the data about the DOM nodes we create, as well as some
             * extra data. They can then be transformed into real DOM nodes with the
             * `toNode` function or HTML markup using `toMarkup`. They are useful for both
             * storing extra properties on the nodes, as well as providing a way to easily
             * work with the DOM.
             *
             * Similar functions for working with MathML nodes exist in mathMLTree.js.
             */

            var span = function () {
                function span(classes, children, options) {
                    (0, _classCallCheck3.default)(this, span);

                    this.classes = classes || [];
                    this.children = children || [];
                    this.height = 0;
                    this.depth = 0;
                    this.maxFontSize = 0;
                    this.style = {};
                    this.attributes = {};
                    if (options) {
                        if (options.style.isTight()) {
                            this.classes.push("mtight");
                        }
                        if (options.getColor()) {
                            this.style.color = options.getColor();
                        }
                    }
                }

                /**
                 * Sets an arbitrary attribute on the span. Warning: use this wisely. Not all
                 * browsers support attributes the same, and having too many custom attributes
                 * is probably bad.
                 */

                (0, _createClass3.default)(span, [{
                    key: "setAttribute",
                    value: function setAttribute(attribute, value) {
                        this.attributes[attribute] = value;
                    }
                }, {
                    key: "tryCombine",
                    value: function tryCombine(sibling) {
                        return false;
                    }

                    /**
                     * Convert the span into an HTML node
                     */

                }, {
                    key: "toNode",
                    value: function toNode() {
                        var span = document.createElement("span");

                        // Apply the class
                        span.className = createClass(this.classes);

                        // Apply inline styles
                        for (var style in this.style) {
                            if (Object.prototype.hasOwnProperty.call(this.style, style)) {
                                span.style[style] = this.style[style];
                            }
                        }

                        // Apply attributes
                        for (var attr in this.attributes) {
                            if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                                span.setAttribute(attr, this.attributes[attr]);
                            }
                        }

                        // Append the children, also as HTML nodes
                        for (var i = 0; i < this.children.length; i++) {
                            span.appendChild(this.children[i].toNode());
                        }

                        return span;
                    }

                    /**
                     * Convert the span into an HTML markup string
                     */

                }, {
                    key: "toMarkup",
                    value: function toMarkup() {
                        var markup = "<span";

                        // Add the class
                        if (this.classes.length) {
                            markup += " class=\"";
                            markup += _utils2.default.escape(createClass(this.classes));
                            markup += "\"";
                        }

                        var styles = "";

                        // Add the styles, after hyphenation
                        for (var style in this.style) {
                            if (this.style.hasOwnProperty(style)) {
                                styles += _utils2.default.hyphenate(style) + ":" + this.style[style] + ";";
                            }
                        }

                        if (styles) {
                            markup += " style=\"" + _utils2.default.escape(styles) + "\"";
                        }

                        // Add the attributes
                        for (var attr in this.attributes) {
                            if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                                markup += " " + attr + "=\"";
                                markup += _utils2.default.escape(this.attributes[attr]);
                                markup += "\"";
                            }
                        }

                        markup += ">";

                        // Add the markup of the children, also as markup
                        for (var i = 0; i < this.children.length; i++) {
                            markup += this.children[i].toMarkup();
                        }

                        markup += "</span>";

                        return markup;
                    }
                }]);
                return span;
            }();

            /**
             * This node represents a document fragment, which contains elements, but when
             * placed into the DOM doesn't have any representation itself. Thus, it only
             * contains children and doesn't have any HTML properties. It also keeps track
             * of a height, depth, and maxFontSize.
             */

            var documentFragment = function () {
                function documentFragment(children) {
                    (0, _classCallCheck3.default)(this, documentFragment);

                    this.children = children || [];
                    this.height = 0;
                    this.depth = 0;
                    this.maxFontSize = 0;
                }

                /**
                 * Convert the fragment into a node
                 */

                (0, _createClass3.default)(documentFragment, [{
                    key: "toNode",
                    value: function toNode() {
                        // Create a fragment
                        var frag = document.createDocumentFragment();

                        // Append the children
                        for (var i = 0; i < this.children.length; i++) {
                            frag.appendChild(this.children[i].toNode());
                        }

                        return frag;
                    }

                    /**
                     * Convert the fragment into HTML markup
                     */

                }, {
                    key: "toMarkup",
                    value: function toMarkup() {
                        var markup = "";

                        // Simply concatenate the markup for the children together
                        for (var i = 0; i < this.children.length; i++) {
                            markup += this.children[i].toMarkup();
                        }

                        return markup;
                    }
                }]);
                return documentFragment;
            }();

            var iCombinations = {
                'î': "\u0131\u0302",
                'ï': "\u0131\u0308",
                'í': "\u0131\u0301",
                // 'ī': '\u0131\u0304', // enable when we add Extended Latin
                'ì': "\u0131\u0300"
            };

            /**
             * A symbol node contains information about a single symbol. It either renders
             * to a single text node, or a span with a single text node in it, depending on
             * whether it has CSS classes, styles, or needs italic correction.
             */

            var symbolNode = function () {
                function symbolNode(value, height, depth, italic, skew, classes, style) {
                    (0, _classCallCheck3.default)(this, symbolNode);

                    this.value = value || "";
                    this.height = height || 0;
                    this.depth = depth || 0;
                    this.italic = italic || 0;
                    this.skew = skew || 0;
                    this.classes = classes || [];
                    this.style = style || {};
                    this.maxFontSize = 0;

                    // Mark CJK characters with specific classes so that we can specify which
                    // fonts to use.  This allows us to render these characters with a serif
                    // font in situations where the browser would either default to a sans serif
                    // or render a placeholder character.
                    if (_unicodeRegexes.cjkRegex.test(value)) {
                        // I couldn't find any fonts that contained Hangul as well as all of
                        // the other characters we wanted to test there for it gets its own
                        // CSS class.
                        if (_unicodeRegexes.hangulRegex.test(value)) {
                            this.classes.push('hangul_fallback');
                        } else {
                            this.classes.push('cjk_fallback');
                        }
                    }

                    if (/[îïíì]/.test(this.value)) {
                        // add ī when we add Extended Latin
                        this.value = iCombinations[this.value];
                    }
                }

                (0, _createClass3.default)(symbolNode, [{
                    key: "tryCombine",
                    value: function tryCombine(sibling) {
                        if (!sibling || !(sibling instanceof symbolNode) || this.italic > 0 || createClass(this.classes) !== createClass(sibling.classes) || this.skew !== sibling.skew || this.maxFontSize !== sibling.maxFontSize) {
                            return false;
                        }
                        for (var style in this.style) {
                            if (this.style.hasOwnProperty(style) && this.style[style] !== sibling.style[style]) {
                                return false;
                            }
                        }
                        for (var _style in sibling.style) {
                            if (sibling.style.hasOwnProperty(_style) && this.style[_style] !== sibling.style[_style]) {
                                return false;
                            }
                        }
                        this.value += sibling.value;
                        this.height = Math.max(this.height, sibling.height);
                        this.depth = Math.max(this.depth, sibling.depth);
                        this.italic = sibling.italic;
                        return true;
                    }

                    /**
                     * Creates a text node or span from a symbol node. Note that a span is only
                     * created if it is needed.
                     */

                }, {
                    key: "toNode",
                    value: function toNode() {
                        var node = document.createTextNode(this.value);
                        var span = null;

                        if (this.italic > 0) {
                            span = document.createElement("span");
                            span.style.marginRight = this.italic + "em";
                        }

                        if (this.classes.length > 0) {
                            span = span || document.createElement("span");
                            span.className = createClass(this.classes);
                        }

                        for (var style in this.style) {
                            if (this.style.hasOwnProperty(style)) {
                                span = span || document.createElement("span");
                                span.style[style] = this.style[style];
                            }
                        }

                        if (span) {
                            span.appendChild(node);
                            return span;
                        } else {
                            return node;
                        }
                    }

                    /**
                     * Creates markup for a symbol node.
                     */

                }, {
                    key: "toMarkup",
                    value: function toMarkup() {
                        // TODO(alpert): More duplication than I'd like from
                        // span.prototype.toMarkup and symbolNode.prototype.toNode...
                        var needsSpan = false;

                        var markup = "<span";

                        if (this.classes.length) {
                            needsSpan = true;
                            markup += " class=\"";
                            markup += _utils2.default.escape(createClass(this.classes));
                            markup += "\"";
                        }

                        var styles = "";

                        if (this.italic > 0) {
                            styles += "margin-right:" + this.italic + "em;";
                        }
                        for (var style in this.style) {
                            if (this.style.hasOwnProperty(style)) {
                                styles += _utils2.default.hyphenate(style) + ":" + this.style[style] + ";";
                            }
                        }

                        if (styles) {
                            needsSpan = true;
                            markup += " style=\"" + _utils2.default.escape(styles) + "\"";
                        }

                        var escaped = _utils2.default.escape(this.value);
                        if (needsSpan) {
                            markup += ">";
                            markup += escaped;
                            markup += "</span>";
                            return markup;
                        } else {
                            return escaped;
                        }
                    }
                }]);
                return symbolNode;
            }();

            /**
             * SVG nodes are used to render stretchy wide elements.
             */

            var svgNode = function () {
                function svgNode(children, attributes) {
                    (0, _classCallCheck3.default)(this, svgNode);

                    this.children = children || [];
                    this.attributes = attributes || [];
                }

                (0, _createClass3.default)(svgNode, [{
                    key: "toNode",
                    value: function toNode() {
                        var svgNS = "http://www.w3.org/2000/svg";
                        var node = document.createElementNS(svgNS, "svg");

                        // Apply attributes
                        for (var i = 0; i < this.attributes.length; i++) {
                            var _attributes$i = (0, _slicedToArray3.default)(this.attributes[i], 2),
                                name = _attributes$i[0],
                                value = _attributes$i[1];

                            node.setAttribute(name, value);
                        }

                        for (var _i = 0; _i < this.children.length; _i++) {
                            node.appendChild(this.children[_i].toNode());
                        }
                        return node;
                    }
                }, {
                    key: "toMarkup",
                    value: function toMarkup() {
                        var markup = "<svg";

                        // Apply attributes
                        for (var i = 0; i < this.attributes.length; i++) {
                            var _attributes$i2 = (0, _slicedToArray3.default)(this.attributes[i], 2),
                                name = _attributes$i2[0],
                                value = _attributes$i2[1];

                            markup += " " + name + "='" + value + "'";
                        }

                        markup += ">";

                        for (var _i2 = 0; _i2 < this.children.length; _i2++) {
                            markup += this.children[_i2].toMarkup();
                        }

                        markup += "</svg>";

                        return markup;
                    }
                }]);
                return svgNode;
            }();

            var pathNode = function () {
                function pathNode(pathName, alternate) {
                    (0, _classCallCheck3.default)(this, pathNode);

                    this.pathName = pathName;
                    this.alternate = alternate; // Used only for tall \sqrt
                }

                (0, _createClass3.default)(pathNode, [{
                    key: "toNode",
                    value: function toNode() {
                        var svgNS = "http://www.w3.org/2000/svg";
                        var node = document.createElementNS(svgNS, "path");

                        if (this.pathName !== "sqrtTall") {
                            node.setAttribute("d", _svgGeometry2.default.path[this.pathName]);
                        } else {
                            node.setAttribute("d", this.alternate);
                        }

                        return node;
                    }
                }, {
                    key: "toMarkup",
                    value: function toMarkup() {
                        if (this.pathName !== "sqrtTall") {
                            return "<path d='" + _svgGeometry2.default.path[this.pathName] + "'/>";
                        } else {
                            return "<path d='" + this.alternate + "'/>";
                        }
                    }
                }]);
                return pathNode;
            }();

            var lineNode = function () {
                function lineNode(attributes) {
                    (0, _classCallCheck3.default)(this, lineNode);

                    this.attributes = attributes || [];
                }

                (0, _createClass3.default)(lineNode, [{
                    key: "toNode",
                    value: function toNode() {
                        var svgNS = "http://www.w3.org/2000/svg";
                        var node = document.createElementNS(svgNS, "line");

                        // Apply attributes
                        for (var i = 0; i < this.attributes.length; i++) {
                            var _attributes$i3 = (0, _slicedToArray3.default)(this.attributes[i], 2),
                                name = _attributes$i3[0],
                                value = _attributes$i3[1];

                            node.setAttribute(name, value);
                        }

                        return node;
                    }
                }, {
                    key: "toMarkup",
                    value: function toMarkup() {
                        var markup = "<line";

                        for (var i = 0; i < this.attributes.length; i++) {
                            var _attributes$i4 = (0, _slicedToArray3.default)(this.attributes[i], 2),
                                name = _attributes$i4[0],
                                value = _attributes$i4[1];

                            markup += " " + name + "='" + value + "'";
                        }

                        markup += "/>";

                        return markup;
                    }
                }]);
                return lineNode;
            }();

            exports.default = {
                span: span,
                documentFragment: documentFragment,
                symbolNode: symbolNode,
                svgNode: svgNode,
                pathNode: pathNode,
                lineNode: lineNode
            };
        }, { "./svgGeometry": 111, "./unicodeRegexes": 113, "./utils": 115, "babel-runtime/helpers/classCallCheck": 8, "babel-runtime/helpers/createClass": 9, "babel-runtime/helpers/slicedToArray": 10 }], 99: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _defineEnvironment = require("./defineEnvironment");

            require("./environments/array.js");

            var environments = {
                has: function has(envName) {
                    return _defineEnvironment._environments.hasOwnProperty(envName);
                },
                get: function get(envName) {
                    return _defineEnvironment._environments[envName];
                }
            };
            exports.default = environments;

            // All environment definitions should be imported below
        }, { "./defineEnvironment": 95, "./environments/array.js": 100 }], 100: [function (require, module, exports) {
            "use strict";

            var _buildCommon = require("../buildCommon");

            var _buildCommon2 = _interopRequireDefault(_buildCommon);

            var _defineEnvironment = require("../defineEnvironment");

            var _defineEnvironment2 = _interopRequireDefault(_defineEnvironment);

            var _mathMLTree = require("../mathMLTree");

            var _mathMLTree2 = _interopRequireDefault(_mathMLTree);

            var _ParseError = require("../ParseError");

            var _ParseError2 = _interopRequireDefault(_ParseError);

            var _ParseNode = require("../ParseNode");

            var _ParseNode2 = _interopRequireDefault(_ParseNode);

            var _units = require("../units");

            var _utils = require("../utils");

            var _utils2 = _interopRequireDefault(_utils);

            var _buildHTML = require("../buildHTML");

            var html = _interopRequireWildcard(_buildHTML);

            var _buildMathML = require("../buildMathML");

            var mml = _interopRequireWildcard(_buildMathML);

            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj;
                } else {
                    var newObj = {};if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                        }
                    }newObj.default = obj;return newObj;
                }
            }

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * Parse the body of the environment, with rows delimited by \\ and
             * columns delimited by &, and create a nested list in row-major order
             * with one group per cell.  If given an optional argument style
             * ("text", "display", etc.), then each cell is cast into that style.
             */

            // Data stored in the ParseNode associated with the environment.
            function parseArray(parser, result, style) {
                var row = [];
                var body = [row];
                var rowGaps = [];
                while (true) {
                    // eslint-disable-line no-constant-condition
                    var cell = parser.parseExpression(false, null);
                    cell = new _ParseNode2.default("ordgroup", cell, parser.mode);
                    if (style) {
                        cell = new _ParseNode2.default("styling", {
                            style: style,
                            value: [cell]
                        }, parser.mode);
                    }
                    row.push(cell);
                    var next = parser.nextToken.text;
                    if (next === "&") {
                        parser.consume();
                    } else if (next === "\\end") {
                        // Arrays terminate newlines with `\crcr` which consumes a `\cr` if
                        // the last line is empty.
                        var lastRow = body[body.length - 1][0].value;
                        if (body.length > 1 && lastRow.value.length === 1 && lastRow.value[0].value.length === 0) {
                            body.pop();
                        }
                        break;
                    } else if (next === "\\\\" || next === "\\cr") {
                        var cr = parser.parseFunction();
                        rowGaps.push(cr.value.size);
                        row = [];
                        body.push(row);
                    } else {
                        throw new _ParseError2.default("Expected & or \\\\ or \\end", parser.nextToken);
                    }
                }
                result.body = body;
                result.rowGaps = rowGaps;
                return new _ParseNode2.default(result.type, result, parser.mode);
            }

            // Decides on a style for cells in an array according to whether the given
            // environment name starts with the letter 'd'.

            function dCellStyle(envName) {
                if (envName.substr(0, 1) === "d") {
                    return "display";
                } else {
                    return "text";
                }
            }

            var htmlBuilder = function htmlBuilder(group, options) {
                var r = void 0;
                var c = void 0;
                var nr = group.value.body.length;
                var nc = 0;
                var body = new Array(nr);

                // Horizontal spacing
                var pt = 1 / options.fontMetrics().ptPerEm;
                var arraycolsep = 5 * pt; // \arraycolsep in article.cls

                // Vertical spacing
                var baselineskip = 12 * pt; // see size10.clo
                // Default \jot from ltmath.dtx
                // TODO(edemaine): allow overriding \jot via \setlength (#687)
                var jot = 3 * pt;
                // Default \arraystretch from lttab.dtx
                // TODO(gagern): may get redefined once we have user-defined macros
                var arraystretch = _utils2.default.deflt(group.value.arraystretch, 1);
                var arrayskip = arraystretch * baselineskip;
                var arstrutHeight = 0.7 * arrayskip; // \strutbox in ltfsstrc.dtx and
                var arstrutDepth = 0.3 * arrayskip; // \@arstrutbox in lttab.dtx

                var totalHeight = 0;
                for (r = 0; r < group.value.body.length; ++r) {
                    var inrow = group.value.body[r];
                    var _height = arstrutHeight; // \@array adds an \@arstrut
                    var _depth = arstrutDepth; // to each tow (via the template)

                    if (nc < inrow.length) {
                        nc = inrow.length;
                    }

                    var outrow = new Array(inrow.length);
                    for (c = 0; c < inrow.length; ++c) {
                        var elt = html.buildGroup(inrow[c], options);
                        if (_depth < elt.depth) {
                            _depth = elt.depth;
                        }
                        if (_height < elt.height) {
                            _height = elt.height;
                        }
                        outrow[c] = elt;
                    }

                    var gap = 0;
                    if (group.value.rowGaps[r]) {
                        gap = (0, _units.calculateSize)(group.value.rowGaps[r].value, options);
                        if (gap > 0) {
                            // \@argarraycr
                            gap += arstrutDepth;
                            if (_depth < gap) {
                                _depth = gap; // \@xargarraycr
                            }
                            gap = 0;
                        }
                    }
                    // In AMS multiline environments such as aligned and gathered, rows
                    // correspond to lines that have additional \jot added to the
                    // \baselineskip via \openup.
                    if (group.value.addJot) {
                        _depth += jot;
                    }

                    outrow.height = _height;
                    outrow.depth = _depth;
                    totalHeight += _height;
                    outrow.pos = totalHeight;
                    totalHeight += _depth + gap; // \@yargarraycr
                    body[r] = outrow;
                }

                var offset = totalHeight / 2 + options.fontMetrics().axisHeight;
                var colDescriptions = group.value.cols || [];
                var cols = [];
                var colSep = void 0;
                var colDescrNum = void 0;
                for (c = 0, colDescrNum = 0;
                // Continue while either there are more columns or more column
                // descriptions, so trailing separators don't get lost.
                c < nc || colDescrNum < colDescriptions.length; ++c, ++colDescrNum) {

                    var colDescr = colDescriptions[colDescrNum] || {};

                    var firstSeparator = true;
                    while (colDescr.type === "separator") {
                        // If there is more than one separator in a row, add a space
                        // between them.
                        if (!firstSeparator) {
                            colSep = _buildCommon2.default.makeSpan(["arraycolsep"], []);
                            colSep.style.width = options.fontMetrics().doubleRuleSep + "em";
                            cols.push(colSep);
                        }

                        if (colDescr.separator === "|") {
                            var _separator = _buildCommon2.default.makeSpan(["vertical-separator"], []);
                            _separator.style.height = totalHeight + "em";
                            _separator.style.verticalAlign = -(totalHeight - offset) + "em";

                            cols.push(_separator);
                        } else {
                            throw new _ParseError2.default("Invalid separator type: " + colDescr.separator);
                        }

                        colDescrNum++;
                        colDescr = colDescriptions[colDescrNum] || {};
                        firstSeparator = false;
                    }

                    if (c >= nc) {
                        continue;
                    }

                    var sepwidth = void 0;
                    if (c > 0 || group.value.hskipBeforeAndAfter) {
                        sepwidth = _utils2.default.deflt(colDescr.pregap, arraycolsep);
                        if (sepwidth !== 0) {
                            colSep = _buildCommon2.default.makeSpan(["arraycolsep"], []);
                            colSep.style.width = sepwidth + "em";
                            cols.push(colSep);
                        }
                    }

                    var col = [];
                    for (r = 0; r < nr; ++r) {
                        var row = body[r];
                        var elem = row[c];
                        if (!elem) {
                            continue;
                        }
                        var shift = row.pos - offset;
                        elem.depth = row.depth;
                        elem.height = row.height;
                        col.push({ type: "elem", elem: elem, shift: shift });
                    }

                    col = _buildCommon2.default.makeVList(col, "individualShift", null, options);
                    col = _buildCommon2.default.makeSpan(["col-align-" + (colDescr.align || "c")], [col]);
                    cols.push(col);

                    if (c < nc - 1 || group.value.hskipBeforeAndAfter) {
                        sepwidth = _utils2.default.deflt(colDescr.postgap, arraycolsep);
                        if (sepwidth !== 0) {
                            colSep = _buildCommon2.default.makeSpan(["arraycolsep"], []);
                            colSep.style.width = sepwidth + "em";
                            cols.push(colSep);
                        }
                    }
                }
                body = _buildCommon2.default.makeSpan(["mtable"], cols);
                return _buildCommon2.default.makeSpan(["mord"], [body], options);
            };

            var mathmlBuilder = function mathmlBuilder(group, options) {
                return new _mathMLTree2.default.MathNode("mtable", group.value.body.map(function (row) {
                    return new _mathMLTree2.default.MathNode("mtr", row.map(function (cell) {
                        return new _mathMLTree2.default.MathNode("mtd", [mml.buildGroup(cell, options)]);
                    }));
                }));
            };

            // Arrays are part of LaTeX, defined in lttab.dtx so its documentation
            // is part of the source2e.pdf file of LaTeX2e source documentation.
            // {darray} is an {array} environment where cells are set in \displaystyle,
            // as defined in nccmath.sty.
            (0, _defineEnvironment2.default)({
                type: "array",
                names: ["array", "darray"],
                props: {
                    numArgs: 1
                },
                handler: function handler(context, args) {
                    var colalign = args[0];
                    colalign = colalign.value.map ? colalign.value : [colalign];
                    var cols = colalign.map(function (node) {
                        var ca = node.value;
                        if ("lcr".indexOf(ca) !== -1) {
                            return {
                                type: "align",
                                align: ca
                            };
                        } else if (ca === "|") {
                            return {
                                type: "separator",
                                separator: "|"
                            };
                        }
                        throw new _ParseError2.default("Unknown column alignment: " + node.value, node);
                    });
                    var res = {
                        type: "array",
                        cols: cols,
                        hskipBeforeAndAfter: true // \@preamble in lttab.dtx
                    };
                    res = parseArray(context.parser, res, dCellStyle(context.envName));
                    return res;
                },
                htmlBuilder: htmlBuilder,
                mathmlBuilder: mathmlBuilder
            });

            // The matrix environments of amsmath builds on the array environment
            // of LaTeX, which is discussed above.
            (0, _defineEnvironment2.default)({
                type: "array",
                names: ["matrix", "pmatrix", "bmatrix", "Bmatrix", "vmatrix", "Vmatrix"],
                props: {
                    numArgs: 0
                },
                handler: function handler(context) {
                    var delimiters = {
                        "matrix": null,
                        "pmatrix": ["(", ")"],
                        "bmatrix": ["[", "]"],
                        "Bmatrix": ["\\{", "\\}"],
                        "vmatrix": ["|", "|"],
                        "Vmatrix": ["\\Vert", "\\Vert"]
                    }[context.envName];
                    var res = {
                        type: "array",
                        hskipBeforeAndAfter: false // \hskip -\arraycolsep in amsmath
                    };
                    res = parseArray(context.parser, res, dCellStyle(context.envName));
                    if (delimiters) {
                        res = new _ParseNode2.default("leftright", {
                            body: [res],
                            left: delimiters[0],
                            right: delimiters[1]
                        }, context.mode);
                    }
                    return res;
                },
                htmlBuilder: htmlBuilder,
                mathmlBuilder: mathmlBuilder
            });

            // A cases environment (in amsmath.sty) is almost equivalent to
            // \def\arraystretch{1.2}%
            // \left\{\begin{array}{@{}l@{\quad}l@{}} … \end{array}\right.
            // {dcases} is a {cases} environment where cells are set in \displaystyle,
            // as defined in mathtools.sty.
            (0, _defineEnvironment2.default)({
                type: "array",
                names: ["cases", "dcases"],
                props: {
                    numArgs: 0
                },
                handler: function handler(context) {
                    var res = {
                        type: "array",
                        arraystretch: 1.2,
                        cols: [{
                            type: "align",
                            align: "l",
                            pregap: 0,
                            // TODO(kevinb) get the current style.
                            // For now we use the metrics for TEXT style which is what we were
                            // doing before.  Before attempting to get the current style we
                            // should look at TeX's behavior especially for \over and matrices.
                            postgap: 1.0 /* 1em quad */
                        }, {
                            type: "align",
                            align: "l",
                            pregap: 0,
                            postgap: 0
                        }]
                    };
                    res = parseArray(context.parser, res, dCellStyle(context.envName));
                    res = new _ParseNode2.default("leftright", {
                        body: [res],
                        left: "\\{",
                        right: "."
                    }, context.mode);
                    return res;
                },
                htmlBuilder: htmlBuilder,
                mathmlBuilder: mathmlBuilder
            });

            // An aligned environment is like the align* environment
            // except it operates within math mode.
            // Note that we assume \nomallineskiplimit to be zero,
            // so that \strut@ is the same as \strut.
            (0, _defineEnvironment2.default)({
                type: "array",
                names: ["aligned"],
                props: {
                    numArgs: 0
                },
                handler: function handler(context) {
                    var res = {
                        type: "array",
                        cols: [],
                        addJot: true
                    };
                    res = parseArray(context.parser, res, "display");
                    // Count number of columns = maximum number of cells in each row.
                    // At the same time, prepend empty group {} at beginning of every second
                    // cell in each row (starting with second cell) so that operators become
                    // binary.  This behavior is implemented in amsmath's \start@aligned.
                    var emptyGroup = new _ParseNode2.default("ordgroup", [], context.mode);
                    var numCols = 0;
                    res.value.body.forEach(function (row) {
                        for (var i = 1; i < row.length; i += 2) {
                            // Modify ordgroup node within styling node
                            var ordgroup = row[i].value.value[0];
                            ordgroup.value.unshift(emptyGroup);
                        }
                        if (numCols < row.length) {
                            numCols = row.length;
                        }
                    });
                    for (var i = 0; i < numCols; ++i) {
                        var _align = "r";
                        var _pregap = 0;
                        if (i % 2 === 1) {
                            _align = "l";
                        } else if (i > 0) {
                            _pregap = 2; // one \qquad between columns
                        }
                        res.value.cols[i] = {
                            type: "align",
                            align: _align,
                            pregap: _pregap,
                            postgap: 0
                        };
                    }
                    return res;
                },
                htmlBuilder: htmlBuilder,
                mathmlBuilder: mathmlBuilder
            });

            // A gathered environment is like an array environment with one centered
            // column, but where rows are considered lines so get \jot line spacing
            // and contents are set in \displaystyle.
            (0, _defineEnvironment2.default)({
                type: "array",
                names: ["gathered"],
                props: {
                    numArgs: 0
                },
                handler: function handler(context) {
                    var res = {
                        type: "array",
                        cols: [{
                            type: "align",
                            align: "c"
                        }],
                        addJot: true
                    };
                    res = parseArray(context.parser, res, "display");
                    return res;
                },
                htmlBuilder: htmlBuilder,
                mathmlBuilder: mathmlBuilder
            });
        }, { "../ParseError": 84, "../ParseNode": 85, "../buildCommon": 91, "../buildHTML": 92, "../buildMathML": 93, "../defineEnvironment": 95, "../mathMLTree": 108, "../units": 114, "../utils": 115 }], 101: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _unicodeRegexes = require("./unicodeRegexes");

            var _fontMetricsData = require("./fontMetricsData");

            var _fontMetricsData2 = _interopRequireDefault(_fontMetricsData);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * This file contains metrics regarding fonts and individual symbols. The sigma
             * and xi variables, as well as the metricMap map contain data extracted from
             * TeX, TeX font metrics, and the TTF files. These data are then exposed via the
             * `metrics` variable and the getCharacterMetrics function.
             */

            // In TeX, there are actually three sets of dimensions, one for each of
            // textstyle (size index 5 and higher: >=9pt), scriptstyle (size index 3 and 4:
            // 7-8pt), and scriptscriptstyle (size index 1 and 2: 5-6pt).  These are
            // provided in the the arrays below, in that order.
            //
            // The font metrics are stored in fonts cmsy10, cmsy7, and cmsy5 respsectively.
            // This was determined by running the following script:
            //
            //     latex -interaction=nonstopmode \
            //     '\documentclass{article}\usepackage{amsmath}\begin{document}' \
            //     '$a$ \expandafter\show\the\textfont2' \
            //     '\expandafter\show\the\scriptfont2' \
            //     '\expandafter\show\the\scriptscriptfont2' \
            //     '\stop'
            //
            // The metrics themselves were retreived using the following commands:
            //
            //     tftopl cmsy10
            //     tftopl cmsy7
            //     tftopl cmsy5
            //
            // The output of each of these commands is quite lengthy.  The only part we
            // care about is the FONTDIMEN section. Each value is measured in EMs.
            var sigmasAndXis = {
                slant: [0.250, 0.250, 0.250], // sigma1
                space: [0.000, 0.000, 0.000], // sigma2
                stretch: [0.000, 0.000, 0.000], // sigma3
                shrink: [0.000, 0.000, 0.000], // sigma4
                xHeight: [0.431, 0.431, 0.431], // sigma5
                quad: [1.000, 1.171, 1.472], // sigma6
                extraSpace: [0.000, 0.000, 0.000], // sigma7
                num1: [0.677, 0.732, 0.925], // sigma8
                num2: [0.394, 0.384, 0.387], // sigma9
                num3: [0.444, 0.471, 0.504], // sigma10
                denom1: [0.686, 0.752, 1.025], // sigma11
                denom2: [0.345, 0.344, 0.532], // sigma12
                sup1: [0.413, 0.503, 0.504], // sigma13
                sup2: [0.363, 0.431, 0.404], // sigma14
                sup3: [0.289, 0.286, 0.294], // sigma15
                sub1: [0.150, 0.143, 0.200], // sigma16
                sub2: [0.247, 0.286, 0.400], // sigma17
                supDrop: [0.386, 0.353, 0.494], // sigma18
                subDrop: [0.050, 0.071, 0.100], // sigma19
                delim1: [2.390, 1.700, 1.980], // sigma20
                delim2: [1.010, 1.157, 1.420], // sigma21
                axisHeight: [0.250, 0.250, 0.250], // sigma22

                // These font metrics are extracted from TeX by using tftopl on cmex10.tfm;
                // they correspond to the font parameters of the extension fonts (family 3).
                // See the TeXbook, page 441. In AMSTeX, the extension fonts scale; to
                // match cmex7, we'd use cmex7.tfm values for script and scriptscript
                // values.
                defaultRuleThickness: [0.04, 0.049, 0.049], // xi8; cmex7: 0.049
                bigOpSpacing1: [0.111, 0.111, 0.111], // xi9
                bigOpSpacing2: [0.166, 0.166, 0.166], // xi10
                bigOpSpacing3: [0.2, 0.2, 0.2], // xi11
                bigOpSpacing4: [0.6, 0.611, 0.611], // xi12; cmex7: 0.611
                bigOpSpacing5: [0.1, 0.143, 0.143], // xi13; cmex7: 0.143

                // The \sqrt rule width is taken from the height of the surd character.
                // Since we use the same font at all sizes, this thickness doesn't scale.
                sqrtRuleThickness: [0.04, 0.04, 0.04],

                // This value determines how large a pt is, for metrics which are defined
                // in terms of pts.
                // This value is also used in katex.less; if you change it make sure the
                // values match.
                ptPerEm: [10.0, 10.0, 10.0],

                // The space between adjacent `|` columns in an array definition. From
                // `\showthe\doublerulesep` in LaTeX. Equals 2.0 / ptPerEm.
                doubleRuleSep: [0.2, 0.2, 0.2]
            };

            // This map contains a mapping from font name and character code to character
            // metrics, including height, depth, italic correction, and skew (kern from the
            // character to the corresponding \skewchar)
            // This map is generated via `make metrics`. It should not be changed manually.


            // These are very rough approximations.  We default to Times New Roman which
            // should have Latin-1 and Cyrillic characters, but may not depending on the
            // operating system.  The metrics do not account for extra height from the
            // accents.  In the case of Cyrillic characters which have both ascenders and
            // descenders we prefer approximations with ascenders, primarily to prevent
            // the fraction bar or root line from intersecting the glyph.
            // TODO(kevinb) allow union of multiple glyph metrics for better accuracy.
            var extraCharacterMap = {
                // Latin-1
                'À': 'A',
                'Á': 'A',
                'Â': 'A',
                'Ã': 'A',
                'Ä': 'A',
                'Å': 'A',
                'Æ': 'A',
                'Ç': 'C',
                'È': 'E',
                'É': 'E',
                'Ê': 'E',
                'Ë': 'E',
                'Ì': 'I',
                'Í': 'I',
                'Î': 'I',
                'Ï': 'I',
                'Ð': 'D',
                'Ñ': 'N',
                'Ò': 'O',
                'Ó': 'O',
                'Ô': 'O',
                'Õ': 'O',
                'Ö': 'O',
                'Ø': 'O',
                'Ù': 'U',
                'Ú': 'U',
                'Û': 'U',
                'Ü': 'U',
                'Ý': 'Y',
                'Þ': 'o',
                'ß': 'B',
                'à': 'a',
                'á': 'a',
                'â': 'a',
                'ã': 'a',
                'ä': 'a',
                'å': 'a',
                'æ': 'a',
                'ç': 'c',
                'è': 'e',
                'é': 'e',
                'ê': 'e',
                'ë': 'e',
                'ì': 'i',
                'í': 'i',
                'î': 'i',
                'ï': 'i',
                'ð': 'd',
                'ñ': 'n',
                'ò': 'o',
                'ó': 'o',
                'ô': 'o',
                'õ': 'o',
                'ö': 'o',
                'ø': 'o',
                'ù': 'u',
                'ú': 'u',
                'û': 'u',
                'ü': 'u',
                'ý': 'y',
                'þ': 'o',
                'ÿ': 'y',

                // Cyrillic
                'А': 'A',
                'Б': 'B',
                'В': 'B',
                'Г': 'F',
                'Д': 'A',
                'Е': 'E',
                'Ж': 'K',
                'З': '3',
                'И': 'N',
                'Й': 'N',
                'К': 'K',
                'Л': 'N',
                'М': 'M',
                'Н': 'H',
                'О': 'O',
                'П': 'N',
                'Р': 'P',
                'С': 'C',
                'Т': 'T',
                'У': 'y',
                'Ф': 'O',
                'Х': 'X',
                'Ц': 'U',
                'Ч': 'h',
                'Ш': 'W',
                'Щ': 'W',
                'Ъ': 'B',
                'Ы': 'X',
                'Ь': 'B',
                'Э': '3',
                'Ю': 'X',
                'Я': 'R',
                'а': 'a',
                'б': 'b',
                'в': 'a',
                'г': 'r',
                'д': 'y',
                'е': 'e',
                'ж': 'm',
                'з': 'e',
                'и': 'n',
                'й': 'n',
                'к': 'n',
                'л': 'n',
                'м': 'm',
                'н': 'n',
                'о': 'o',
                'п': 'n',
                'р': 'p',
                'с': 'c',
                'т': 'o',
                'у': 'y',
                'ф': 'b',
                'х': 'x',
                'ц': 'n',
                'ч': 'n',
                'ш': 'w',
                'щ': 'w',
                'ъ': 'a',
                'ы': 'm',
                'ь': 'a',
                'э': 'e',
                'ю': 'm',
                'я': 'r'
            };

            /**
             * This function is a convenience function for looking up information in the
             * metricMap table. It takes a character as a string, and a font.
             *
             * Note: the `width` property may be undefined if fontMetricsData.js wasn't
             * built using `Make extended_metrics`.
             */
            var getCharacterMetrics = function getCharacterMetrics(character, font) {
                var ch = character.charCodeAt(0);
                if (character[0] in extraCharacterMap) {
                    ch = extraCharacterMap[character[0]].charCodeAt(0);
                } else if (_unicodeRegexes.cjkRegex.test(character[0])) {
                    ch = 'M'.charCodeAt(0);
                }
                var metrics = _fontMetricsData2.default[font]['' + ch];
                if (metrics) {
                    return {
                        depth: metrics[0],
                        height: metrics[1],
                        italic: metrics[2],
                        skew: metrics[3],
                        width: metrics[4]
                    };
                }
            };

            var fontMetricsBySizeIndex = {};

            /**
             * Get the font metrics for a given size.
             */
            var getFontMetrics = function getFontMetrics(size) {
                var sizeIndex = void 0;
                if (size >= 5) {
                    sizeIndex = 0;
                } else if (size >= 3) {
                    sizeIndex = 1;
                } else {
                    sizeIndex = 2;
                }
                if (!fontMetricsBySizeIndex[sizeIndex]) {
                    var metrics = fontMetricsBySizeIndex[sizeIndex] = {
                        cssEmPerMu: sigmasAndXis.quad[sizeIndex] / 18
                    };
                    for (var key in sigmasAndXis) {
                        if (sigmasAndXis.hasOwnProperty(key)) {
                            metrics[key] = sigmasAndXis[key][sizeIndex];
                        }
                    }
                }
                return fontMetricsBySizeIndex[sizeIndex];
            };

            exports.default = {
                getFontMetrics: getFontMetrics,
                getCharacterMetrics: getCharacterMetrics
            };
        }, { "./fontMetricsData": 102, "./unicodeRegexes": 113 }], 102: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var fontMetricsData = {
                "AMS-Regular": {
                    "65": [0, 0.68889, 0, 0],
                    "66": [0, 0.68889, 0, 0],
                    "67": [0, 0.68889, 0, 0],
                    "68": [0, 0.68889, 0, 0],
                    "69": [0, 0.68889, 0, 0],
                    "70": [0, 0.68889, 0, 0],
                    "71": [0, 0.68889, 0, 0],
                    "72": [0, 0.68889, 0, 0],
                    "73": [0, 0.68889, 0, 0],
                    "74": [0.16667, 0.68889, 0, 0],
                    "75": [0, 0.68889, 0, 0],
                    "76": [0, 0.68889, 0, 0],
                    "77": [0, 0.68889, 0, 0],
                    "78": [0, 0.68889, 0, 0],
                    "79": [0.16667, 0.68889, 0, 0],
                    "80": [0, 0.68889, 0, 0],
                    "81": [0.16667, 0.68889, 0, 0],
                    "82": [0, 0.68889, 0, 0],
                    "83": [0, 0.68889, 0, 0],
                    "84": [0, 0.68889, 0, 0],
                    "85": [0, 0.68889, 0, 0],
                    "86": [0, 0.68889, 0, 0],
                    "87": [0, 0.68889, 0, 0],
                    "88": [0, 0.68889, 0, 0],
                    "89": [0, 0.68889, 0, 0],
                    "90": [0, 0.68889, 0, 0],
                    "107": [0, 0.68889, 0, 0],
                    "165": [0, 0.675, 0.025, 0],
                    "174": [0.15559, 0.69224, 0, 0],
                    "240": [0, 0.68889, 0, 0],
                    "295": [0, 0.68889, 0, 0],
                    "710": [0, 0.825, 0, 0],
                    "732": [0, 0.9, 0, 0],
                    "770": [0, 0.825, 0, 0],
                    "771": [0, 0.9, 0, 0],
                    "989": [0.08167, 0.58167, 0, 0],
                    "1008": [0, 0.43056, 0.04028, 0],
                    "8245": [0, 0.54986, 0, 0],
                    "8463": [0, 0.68889, 0, 0],
                    "8487": [0, 0.68889, 0, 0],
                    "8498": [0, 0.68889, 0, 0],
                    "8502": [0, 0.68889, 0, 0],
                    "8503": [0, 0.68889, 0, 0],
                    "8504": [0, 0.68889, 0, 0],
                    "8513": [0, 0.68889, 0, 0],
                    "8592": [-0.03598, 0.46402, 0, 0],
                    "8594": [-0.03598, 0.46402, 0, 0],
                    "8602": [-0.13313, 0.36687, 0, 0],
                    "8603": [-0.13313, 0.36687, 0, 0],
                    "8606": [0.01354, 0.52239, 0, 0],
                    "8608": [0.01354, 0.52239, 0, 0],
                    "8610": [0.01354, 0.52239, 0, 0],
                    "8611": [0.01354, 0.52239, 0, 0],
                    "8619": [0, 0.54986, 0, 0],
                    "8620": [0, 0.54986, 0, 0],
                    "8621": [-0.13313, 0.37788, 0, 0],
                    "8622": [-0.13313, 0.36687, 0, 0],
                    "8624": [0, 0.69224, 0, 0],
                    "8625": [0, 0.69224, 0, 0],
                    "8630": [0, 0.43056, 0, 0],
                    "8631": [0, 0.43056, 0, 0],
                    "8634": [0.08198, 0.58198, 0, 0],
                    "8635": [0.08198, 0.58198, 0, 0],
                    "8638": [0.19444, 0.69224, 0, 0],
                    "8639": [0.19444, 0.69224, 0, 0],
                    "8642": [0.19444, 0.69224, 0, 0],
                    "8643": [0.19444, 0.69224, 0, 0],
                    "8644": [0.1808, 0.675, 0, 0],
                    "8646": [0.1808, 0.675, 0, 0],
                    "8647": [0.1808, 0.675, 0, 0],
                    "8648": [0.19444, 0.69224, 0, 0],
                    "8649": [0.1808, 0.675, 0, 0],
                    "8650": [0.19444, 0.69224, 0, 0],
                    "8651": [0.01354, 0.52239, 0, 0],
                    "8652": [0.01354, 0.52239, 0, 0],
                    "8653": [-0.13313, 0.36687, 0, 0],
                    "8654": [-0.13313, 0.36687, 0, 0],
                    "8655": [-0.13313, 0.36687, 0, 0],
                    "8666": [0.13667, 0.63667, 0, 0],
                    "8667": [0.13667, 0.63667, 0, 0],
                    "8669": [-0.13313, 0.37788, 0, 0],
                    "8672": [-0.064, 0.437, 0, 0],
                    "8674": [-0.064, 0.437, 0, 0],
                    "8705": [0, 0.825, 0, 0],
                    "8708": [0, 0.68889, 0, 0],
                    "8709": [0.08167, 0.58167, 0, 0],
                    "8717": [0, 0.43056, 0, 0],
                    "8722": [-0.03598, 0.46402, 0, 0],
                    "8724": [0.08198, 0.69224, 0, 0],
                    "8726": [0.08167, 0.58167, 0, 0],
                    "8733": [0, 0.69224, 0, 0],
                    "8736": [0, 0.69224, 0, 0],
                    "8737": [0, 0.69224, 0, 0],
                    "8738": [0.03517, 0.52239, 0, 0],
                    "8739": [0.08167, 0.58167, 0, 0],
                    "8740": [0.25142, 0.74111, 0, 0],
                    "8741": [0.08167, 0.58167, 0, 0],
                    "8742": [0.25142, 0.74111, 0, 0],
                    "8756": [0, 0.69224, 0, 0],
                    "8757": [0, 0.69224, 0, 0],
                    "8764": [-0.13313, 0.36687, 0, 0],
                    "8765": [-0.13313, 0.37788, 0, 0],
                    "8769": [-0.13313, 0.36687, 0, 0],
                    "8770": [-0.03625, 0.46375, 0, 0],
                    "8774": [0.30274, 0.79383, 0, 0],
                    "8776": [-0.01688, 0.48312, 0, 0],
                    "8778": [0.08167, 0.58167, 0, 0],
                    "8782": [0.06062, 0.54986, 0, 0],
                    "8783": [0.06062, 0.54986, 0, 0],
                    "8785": [0.08198, 0.58198, 0, 0],
                    "8786": [0.08198, 0.58198, 0, 0],
                    "8787": [0.08198, 0.58198, 0, 0],
                    "8790": [0, 0.69224, 0, 0],
                    "8791": [0.22958, 0.72958, 0, 0],
                    "8796": [0.08198, 0.91667, 0, 0],
                    "8806": [0.25583, 0.75583, 0, 0],
                    "8807": [0.25583, 0.75583, 0, 0],
                    "8808": [0.25142, 0.75726, 0, 0],
                    "8809": [0.25142, 0.75726, 0, 0],
                    "8812": [0.25583, 0.75583, 0, 0],
                    "8814": [0.20576, 0.70576, 0, 0],
                    "8815": [0.20576, 0.70576, 0, 0],
                    "8816": [0.30274, 0.79383, 0, 0],
                    "8817": [0.30274, 0.79383, 0, 0],
                    "8818": [0.22958, 0.72958, 0, 0],
                    "8819": [0.22958, 0.72958, 0, 0],
                    "8822": [0.1808, 0.675, 0, 0],
                    "8823": [0.1808, 0.675, 0, 0],
                    "8828": [0.13667, 0.63667, 0, 0],
                    "8829": [0.13667, 0.63667, 0, 0],
                    "8830": [0.22958, 0.72958, 0, 0],
                    "8831": [0.22958, 0.72958, 0, 0],
                    "8832": [0.20576, 0.70576, 0, 0],
                    "8833": [0.20576, 0.70576, 0, 0],
                    "8840": [0.30274, 0.79383, 0, 0],
                    "8841": [0.30274, 0.79383, 0, 0],
                    "8842": [0.13597, 0.63597, 0, 0],
                    "8843": [0.13597, 0.63597, 0, 0],
                    "8847": [0.03517, 0.54986, 0, 0],
                    "8848": [0.03517, 0.54986, 0, 0],
                    "8858": [0.08198, 0.58198, 0, 0],
                    "8859": [0.08198, 0.58198, 0, 0],
                    "8861": [0.08198, 0.58198, 0, 0],
                    "8862": [0, 0.675, 0, 0],
                    "8863": [0, 0.675, 0, 0],
                    "8864": [0, 0.675, 0, 0],
                    "8865": [0, 0.675, 0, 0],
                    "8872": [0, 0.69224, 0, 0],
                    "8873": [0, 0.69224, 0, 0],
                    "8874": [0, 0.69224, 0, 0],
                    "8876": [0, 0.68889, 0, 0],
                    "8877": [0, 0.68889, 0, 0],
                    "8878": [0, 0.68889, 0, 0],
                    "8879": [0, 0.68889, 0, 0],
                    "8882": [0.03517, 0.54986, 0, 0],
                    "8883": [0.03517, 0.54986, 0, 0],
                    "8884": [0.13667, 0.63667, 0, 0],
                    "8885": [0.13667, 0.63667, 0, 0],
                    "8888": [0, 0.54986, 0, 0],
                    "8890": [0.19444, 0.43056, 0, 0],
                    "8891": [0.19444, 0.69224, 0, 0],
                    "8892": [0.19444, 0.69224, 0, 0],
                    "8901": [0, 0.54986, 0, 0],
                    "8903": [0.08167, 0.58167, 0, 0],
                    "8905": [0.08167, 0.58167, 0, 0],
                    "8906": [0.08167, 0.58167, 0, 0],
                    "8907": [0, 0.69224, 0, 0],
                    "8908": [0, 0.69224, 0, 0],
                    "8909": [-0.03598, 0.46402, 0, 0],
                    "8910": [0, 0.54986, 0, 0],
                    "8911": [0, 0.54986, 0, 0],
                    "8912": [0.03517, 0.54986, 0, 0],
                    "8913": [0.03517, 0.54986, 0, 0],
                    "8914": [0, 0.54986, 0, 0],
                    "8915": [0, 0.54986, 0, 0],
                    "8916": [0, 0.69224, 0, 0],
                    "8918": [0.0391, 0.5391, 0, 0],
                    "8919": [0.0391, 0.5391, 0, 0],
                    "8920": [0.03517, 0.54986, 0, 0],
                    "8921": [0.03517, 0.54986, 0, 0],
                    "8922": [0.38569, 0.88569, 0, 0],
                    "8923": [0.38569, 0.88569, 0, 0],
                    "8926": [0.13667, 0.63667, 0, 0],
                    "8927": [0.13667, 0.63667, 0, 0],
                    "8928": [0.30274, 0.79383, 0, 0],
                    "8929": [0.30274, 0.79383, 0, 0],
                    "8934": [0.23222, 0.74111, 0, 0],
                    "8935": [0.23222, 0.74111, 0, 0],
                    "8936": [0.23222, 0.74111, 0, 0],
                    "8937": [0.23222, 0.74111, 0, 0],
                    "8938": [0.20576, 0.70576, 0, 0],
                    "8939": [0.20576, 0.70576, 0, 0],
                    "8940": [0.30274, 0.79383, 0, 0],
                    "8941": [0.30274, 0.79383, 0, 0],
                    "8994": [0.19444, 0.69224, 0, 0],
                    "8995": [0.19444, 0.69224, 0, 0],
                    "9416": [0.15559, 0.69224, 0, 0],
                    "9484": [0, 0.69224, 0, 0],
                    "9488": [0, 0.69224, 0, 0],
                    "9492": [0, 0.37788, 0, 0],
                    "9496": [0, 0.37788, 0, 0],
                    "9585": [0.19444, 0.68889, 0, 0],
                    "9586": [0.19444, 0.74111, 0, 0],
                    "9632": [0, 0.675, 0, 0],
                    "9633": [0, 0.675, 0, 0],
                    "9650": [0, 0.54986, 0, 0],
                    "9651": [0, 0.54986, 0, 0],
                    "9654": [0.03517, 0.54986, 0, 0],
                    "9660": [0, 0.54986, 0, 0],
                    "9661": [0, 0.54986, 0, 0],
                    "9664": [0.03517, 0.54986, 0, 0],
                    "9674": [0.11111, 0.69224, 0, 0],
                    "9733": [0.19444, 0.69224, 0, 0],
                    "10003": [0, 0.69224, 0, 0],
                    "10016": [0, 0.69224, 0, 0],
                    "10731": [0.11111, 0.69224, 0, 0],
                    "10846": [0.19444, 0.75583, 0, 0],
                    "10877": [0.13667, 0.63667, 0, 0],
                    "10878": [0.13667, 0.63667, 0, 0],
                    "10885": [0.25583, 0.75583, 0, 0],
                    "10886": [0.25583, 0.75583, 0, 0],
                    "10887": [0.13597, 0.63597, 0, 0],
                    "10888": [0.13597, 0.63597, 0, 0],
                    "10889": [0.26167, 0.75726, 0, 0],
                    "10890": [0.26167, 0.75726, 0, 0],
                    "10891": [0.48256, 0.98256, 0, 0],
                    "10892": [0.48256, 0.98256, 0, 0],
                    "10901": [0.13667, 0.63667, 0, 0],
                    "10902": [0.13667, 0.63667, 0, 0],
                    "10933": [0.25142, 0.75726, 0, 0],
                    "10934": [0.25142, 0.75726, 0, 0],
                    "10935": [0.26167, 0.75726, 0, 0],
                    "10936": [0.26167, 0.75726, 0, 0],
                    "10937": [0.26167, 0.75726, 0, 0],
                    "10938": [0.26167, 0.75726, 0, 0],
                    "10949": [0.25583, 0.75583, 0, 0],
                    "10950": [0.25583, 0.75583, 0, 0],
                    "10955": [0.28481, 0.79383, 0, 0],
                    "10956": [0.28481, 0.79383, 0, 0],
                    "57350": [0.08167, 0.58167, 0, 0],
                    "57351": [0.08167, 0.58167, 0, 0],
                    "57352": [0.08167, 0.58167, 0, 0],
                    "57353": [0, 0.43056, 0.04028, 0],
                    "57356": [0.25142, 0.75726, 0, 0],
                    "57357": [0.25142, 0.75726, 0, 0],
                    "57358": [0.41951, 0.91951, 0, 0],
                    "57359": [0.30274, 0.79383, 0, 0],
                    "57360": [0.30274, 0.79383, 0, 0],
                    "57361": [0.41951, 0.91951, 0, 0],
                    "57366": [0.25142, 0.75726, 0, 0],
                    "57367": [0.25142, 0.75726, 0, 0],
                    "57368": [0.25142, 0.75726, 0, 0],
                    "57369": [0.25142, 0.75726, 0, 0],
                    "57370": [0.13597, 0.63597, 0, 0],
                    "57371": [0.13597, 0.63597, 0, 0]
                },
                "Caligraphic-Regular": {
                    "48": [0, 0.43056, 0, 0],
                    "49": [0, 0.43056, 0, 0],
                    "50": [0, 0.43056, 0, 0],
                    "51": [0.19444, 0.43056, 0, 0],
                    "52": [0.19444, 0.43056, 0, 0],
                    "53": [0.19444, 0.43056, 0, 0],
                    "54": [0, 0.64444, 0, 0],
                    "55": [0.19444, 0.43056, 0, 0],
                    "56": [0, 0.64444, 0, 0],
                    "57": [0.19444, 0.43056, 0, 0],
                    "65": [0, 0.68333, 0, 0.19445],
                    "66": [0, 0.68333, 0.03041, 0.13889],
                    "67": [0, 0.68333, 0.05834, 0.13889],
                    "68": [0, 0.68333, 0.02778, 0.08334],
                    "69": [0, 0.68333, 0.08944, 0.11111],
                    "70": [0, 0.68333, 0.09931, 0.11111],
                    "71": [0.09722, 0.68333, 0.0593, 0.11111],
                    "72": [0, 0.68333, 0.00965, 0.11111],
                    "73": [0, 0.68333, 0.07382, 0],
                    "74": [0.09722, 0.68333, 0.18472, 0.16667],
                    "75": [0, 0.68333, 0.01445, 0.05556],
                    "76": [0, 0.68333, 0, 0.13889],
                    "77": [0, 0.68333, 0, 0.13889],
                    "78": [0, 0.68333, 0.14736, 0.08334],
                    "79": [0, 0.68333, 0.02778, 0.11111],
                    "80": [0, 0.68333, 0.08222, 0.08334],
                    "81": [0.09722, 0.68333, 0, 0.11111],
                    "82": [0, 0.68333, 0, 0.08334],
                    "83": [0, 0.68333, 0.075, 0.13889],
                    "84": [0, 0.68333, 0.25417, 0],
                    "85": [0, 0.68333, 0.09931, 0.08334],
                    "86": [0, 0.68333, 0.08222, 0],
                    "87": [0, 0.68333, 0.08222, 0.08334],
                    "88": [0, 0.68333, 0.14643, 0.13889],
                    "89": [0.09722, 0.68333, 0.08222, 0.08334],
                    "90": [0, 0.68333, 0.07944, 0.13889]
                },
                "Fraktur-Regular": {
                    "33": [0, 0.69141, 0, 0],
                    "34": [0, 0.69141, 0, 0],
                    "38": [0, 0.69141, 0, 0],
                    "39": [0, 0.69141, 0, 0],
                    "40": [0.24982, 0.74947, 0, 0],
                    "41": [0.24982, 0.74947, 0, 0],
                    "42": [0, 0.62119, 0, 0],
                    "43": [0.08319, 0.58283, 0, 0],
                    "44": [0, 0.10803, 0, 0],
                    "45": [0.08319, 0.58283, 0, 0],
                    "46": [0, 0.10803, 0, 0],
                    "47": [0.24982, 0.74947, 0, 0],
                    "48": [0, 0.47534, 0, 0],
                    "49": [0, 0.47534, 0, 0],
                    "50": [0, 0.47534, 0, 0],
                    "51": [0.18906, 0.47534, 0, 0],
                    "52": [0.18906, 0.47534, 0, 0],
                    "53": [0.18906, 0.47534, 0, 0],
                    "54": [0, 0.69141, 0, 0],
                    "55": [0.18906, 0.47534, 0, 0],
                    "56": [0, 0.69141, 0, 0],
                    "57": [0.18906, 0.47534, 0, 0],
                    "58": [0, 0.47534, 0, 0],
                    "59": [0.12604, 0.47534, 0, 0],
                    "61": [-0.13099, 0.36866, 0, 0],
                    "63": [0, 0.69141, 0, 0],
                    "65": [0, 0.69141, 0, 0],
                    "66": [0, 0.69141, 0, 0],
                    "67": [0, 0.69141, 0, 0],
                    "68": [0, 0.69141, 0, 0],
                    "69": [0, 0.69141, 0, 0],
                    "70": [0.12604, 0.69141, 0, 0],
                    "71": [0, 0.69141, 0, 0],
                    "72": [0.06302, 0.69141, 0, 0],
                    "73": [0, 0.69141, 0, 0],
                    "74": [0.12604, 0.69141, 0, 0],
                    "75": [0, 0.69141, 0, 0],
                    "76": [0, 0.69141, 0, 0],
                    "77": [0, 0.69141, 0, 0],
                    "78": [0, 0.69141, 0, 0],
                    "79": [0, 0.69141, 0, 0],
                    "80": [0.18906, 0.69141, 0, 0],
                    "81": [0.03781, 0.69141, 0, 0],
                    "82": [0, 0.69141, 0, 0],
                    "83": [0, 0.69141, 0, 0],
                    "84": [0, 0.69141, 0, 0],
                    "85": [0, 0.69141, 0, 0],
                    "86": [0, 0.69141, 0, 0],
                    "87": [0, 0.69141, 0, 0],
                    "88": [0, 0.69141, 0, 0],
                    "89": [0.18906, 0.69141, 0, 0],
                    "90": [0.12604, 0.69141, 0, 0],
                    "91": [0.24982, 0.74947, 0, 0],
                    "93": [0.24982, 0.74947, 0, 0],
                    "94": [0, 0.69141, 0, 0],
                    "97": [0, 0.47534, 0, 0],
                    "98": [0, 0.69141, 0, 0],
                    "99": [0, 0.47534, 0, 0],
                    "100": [0, 0.62119, 0, 0],
                    "101": [0, 0.47534, 0, 0],
                    "102": [0.18906, 0.69141, 0, 0],
                    "103": [0.18906, 0.47534, 0, 0],
                    "104": [0.18906, 0.69141, 0, 0],
                    "105": [0, 0.69141, 0, 0],
                    "106": [0, 0.69141, 0, 0],
                    "107": [0, 0.69141, 0, 0],
                    "108": [0, 0.69141, 0, 0],
                    "109": [0, 0.47534, 0, 0],
                    "110": [0, 0.47534, 0, 0],
                    "111": [0, 0.47534, 0, 0],
                    "112": [0.18906, 0.52396, 0, 0],
                    "113": [0.18906, 0.47534, 0, 0],
                    "114": [0, 0.47534, 0, 0],
                    "115": [0, 0.47534, 0, 0],
                    "116": [0, 0.62119, 0, 0],
                    "117": [0, 0.47534, 0, 0],
                    "118": [0, 0.52396, 0, 0],
                    "119": [0, 0.52396, 0, 0],
                    "120": [0.18906, 0.47534, 0, 0],
                    "121": [0.18906, 0.47534, 0, 0],
                    "122": [0.18906, 0.47534, 0, 0],
                    "8216": [0, 0.69141, 0, 0],
                    "8217": [0, 0.69141, 0, 0],
                    "58112": [0, 0.62119, 0, 0],
                    "58113": [0, 0.62119, 0, 0],
                    "58114": [0.18906, 0.69141, 0, 0],
                    "58115": [0.18906, 0.69141, 0, 0],
                    "58116": [0.18906, 0.47534, 0, 0],
                    "58117": [0, 0.69141, 0, 0],
                    "58118": [0, 0.62119, 0, 0],
                    "58119": [0, 0.47534, 0, 0]
                },
                "Main-Bold": {
                    "33": [0, 0.69444, 0, 0],
                    "34": [0, 0.69444, 0, 0],
                    "35": [0.19444, 0.69444, 0, 0],
                    "36": [0.05556, 0.75, 0, 0],
                    "37": [0.05556, 0.75, 0, 0],
                    "38": [0, 0.69444, 0, 0],
                    "39": [0, 0.69444, 0, 0],
                    "40": [0.25, 0.75, 0, 0],
                    "41": [0.25, 0.75, 0, 0],
                    "42": [0, 0.75, 0, 0],
                    "43": [0.13333, 0.63333, 0, 0],
                    "44": [0.19444, 0.15556, 0, 0],
                    "45": [0, 0.44444, 0, 0],
                    "46": [0, 0.15556, 0, 0],
                    "47": [0.25, 0.75, 0, 0],
                    "48": [0, 0.64444, 0, 0],
                    "49": [0, 0.64444, 0, 0],
                    "50": [0, 0.64444, 0, 0],
                    "51": [0, 0.64444, 0, 0],
                    "52": [0, 0.64444, 0, 0],
                    "53": [0, 0.64444, 0, 0],
                    "54": [0, 0.64444, 0, 0],
                    "55": [0, 0.64444, 0, 0],
                    "56": [0, 0.64444, 0, 0],
                    "57": [0, 0.64444, 0, 0],
                    "58": [0, 0.44444, 0, 0],
                    "59": [0.19444, 0.44444, 0, 0],
                    "60": [0.08556, 0.58556, 0, 0],
                    "61": [-0.10889, 0.39111, 0, 0],
                    "62": [0.08556, 0.58556, 0, 0],
                    "63": [0, 0.69444, 0, 0],
                    "64": [0, 0.69444, 0, 0],
                    "65": [0, 0.68611, 0, 0],
                    "66": [0, 0.68611, 0, 0],
                    "67": [0, 0.68611, 0, 0],
                    "68": [0, 0.68611, 0, 0],
                    "69": [0, 0.68611, 0, 0],
                    "70": [0, 0.68611, 0, 0],
                    "71": [0, 0.68611, 0, 0],
                    "72": [0, 0.68611, 0, 0],
                    "73": [0, 0.68611, 0, 0],
                    "74": [0, 0.68611, 0, 0],
                    "75": [0, 0.68611, 0, 0],
                    "76": [0, 0.68611, 0, 0],
                    "77": [0, 0.68611, 0, 0],
                    "78": [0, 0.68611, 0, 0],
                    "79": [0, 0.68611, 0, 0],
                    "80": [0, 0.68611, 0, 0],
                    "81": [0.19444, 0.68611, 0, 0],
                    "82": [0, 0.68611, 0, 0],
                    "83": [0, 0.68611, 0, 0],
                    "84": [0, 0.68611, 0, 0],
                    "85": [0, 0.68611, 0, 0],
                    "86": [0, 0.68611, 0.01597, 0],
                    "87": [0, 0.68611, 0.01597, 0],
                    "88": [0, 0.68611, 0, 0],
                    "89": [0, 0.68611, 0.02875, 0],
                    "90": [0, 0.68611, 0, 0],
                    "91": [0.25, 0.75, 0, 0],
                    "92": [0.25, 0.75, 0, 0],
                    "93": [0.25, 0.75, 0, 0],
                    "94": [0, 0.69444, 0, 0],
                    "95": [0.31, 0.13444, 0.03194, 0],
                    "96": [0, 0.69444, 0, 0],
                    "97": [0, 0.44444, 0, 0],
                    "98": [0, 0.69444, 0, 0],
                    "99": [0, 0.44444, 0, 0],
                    "100": [0, 0.69444, 0, 0],
                    "101": [0, 0.44444, 0, 0],
                    "102": [0, 0.69444, 0.10903, 0],
                    "103": [0.19444, 0.44444, 0.01597, 0],
                    "104": [0, 0.69444, 0, 0],
                    "105": [0, 0.69444, 0, 0],
                    "106": [0.19444, 0.69444, 0, 0],
                    "107": [0, 0.69444, 0, 0],
                    "108": [0, 0.69444, 0, 0],
                    "109": [0, 0.44444, 0, 0],
                    "110": [0, 0.44444, 0, 0],
                    "111": [0, 0.44444, 0, 0],
                    "112": [0.19444, 0.44444, 0, 0],
                    "113": [0.19444, 0.44444, 0, 0],
                    "114": [0, 0.44444, 0, 0],
                    "115": [0, 0.44444, 0, 0],
                    "116": [0, 0.63492, 0, 0],
                    "117": [0, 0.44444, 0, 0],
                    "118": [0, 0.44444, 0.01597, 0],
                    "119": [0, 0.44444, 0.01597, 0],
                    "120": [0, 0.44444, 0, 0],
                    "121": [0.19444, 0.44444, 0.01597, 0],
                    "122": [0, 0.44444, 0, 0],
                    "123": [0.25, 0.75, 0, 0],
                    "124": [0.25, 0.75, 0, 0],
                    "125": [0.25, 0.75, 0, 0],
                    "126": [0.35, 0.34444, 0, 0],
                    "168": [0, 0.69444, 0, 0],
                    "172": [0, 0.44444, 0, 0],
                    "175": [0, 0.59611, 0, 0],
                    "176": [0, 0.69444, 0, 0],
                    "177": [0.13333, 0.63333, 0, 0],
                    "180": [0, 0.69444, 0, 0],
                    "215": [0.13333, 0.63333, 0, 0],
                    "247": [0.13333, 0.63333, 0, 0],
                    "305": [0, 0.44444, 0, 0],
                    "567": [0.19444, 0.44444, 0, 0],
                    "710": [0, 0.69444, 0, 0],
                    "711": [0, 0.63194, 0, 0],
                    "713": [0, 0.59611, 0, 0],
                    "714": [0, 0.69444, 0, 0],
                    "715": [0, 0.69444, 0, 0],
                    "728": [0, 0.69444, 0, 0],
                    "729": [0, 0.69444, 0, 0],
                    "730": [0, 0.69444, 0, 0],
                    "732": [0, 0.69444, 0, 0],
                    "768": [0, 0.69444, 0, 0],
                    "769": [0, 0.69444, 0, 0],
                    "770": [0, 0.69444, 0, 0],
                    "771": [0, 0.69444, 0, 0],
                    "772": [0, 0.59611, 0, 0],
                    "774": [0, 0.69444, 0, 0],
                    "775": [0, 0.69444, 0, 0],
                    "776": [0, 0.69444, 0, 0],
                    "778": [0, 0.69444, 0, 0],
                    "779": [0, 0.69444, 0, 0],
                    "780": [0, 0.63194, 0, 0],
                    "824": [0.19444, 0.69444, 0, 0],
                    "915": [0, 0.68611, 0, 0],
                    "916": [0, 0.68611, 0, 0],
                    "920": [0, 0.68611, 0, 0],
                    "923": [0, 0.68611, 0, 0],
                    "926": [0, 0.68611, 0, 0],
                    "928": [0, 0.68611, 0, 0],
                    "931": [0, 0.68611, 0, 0],
                    "933": [0, 0.68611, 0, 0],
                    "934": [0, 0.68611, 0, 0],
                    "936": [0, 0.68611, 0, 0],
                    "937": [0, 0.68611, 0, 0],
                    "8211": [0, 0.44444, 0.03194, 0],
                    "8212": [0, 0.44444, 0.03194, 0],
                    "8216": [0, 0.69444, 0, 0],
                    "8217": [0, 0.69444, 0, 0],
                    "8220": [0, 0.69444, 0, 0],
                    "8221": [0, 0.69444, 0, 0],
                    "8224": [0.19444, 0.69444, 0, 0],
                    "8225": [0.19444, 0.69444, 0, 0],
                    "8242": [0, 0.55556, 0, 0],
                    "8407": [0, 0.72444, 0.15486, 0],
                    "8463": [0, 0.69444, 0, 0],
                    "8465": [0, 0.69444, 0, 0],
                    "8467": [0, 0.69444, 0, 0],
                    "8472": [0.19444, 0.44444, 0, 0],
                    "8476": [0, 0.69444, 0, 0],
                    "8501": [0, 0.69444, 0, 0],
                    "8592": [-0.10889, 0.39111, 0, 0],
                    "8593": [0.19444, 0.69444, 0, 0],
                    "8594": [-0.10889, 0.39111, 0, 0],
                    "8595": [0.19444, 0.69444, 0, 0],
                    "8596": [-0.10889, 0.39111, 0, 0],
                    "8597": [0.25, 0.75, 0, 0],
                    "8598": [0.19444, 0.69444, 0, 0],
                    "8599": [0.19444, 0.69444, 0, 0],
                    "8600": [0.19444, 0.69444, 0, 0],
                    "8601": [0.19444, 0.69444, 0, 0],
                    "8636": [-0.10889, 0.39111, 0, 0],
                    "8637": [-0.10889, 0.39111, 0, 0],
                    "8640": [-0.10889, 0.39111, 0, 0],
                    "8641": [-0.10889, 0.39111, 0, 0],
                    "8656": [-0.10889, 0.39111, 0, 0],
                    "8657": [0.19444, 0.69444, 0, 0],
                    "8658": [-0.10889, 0.39111, 0, 0],
                    "8659": [0.19444, 0.69444, 0, 0],
                    "8660": [-0.10889, 0.39111, 0, 0],
                    "8661": [0.25, 0.75, 0, 0],
                    "8704": [0, 0.69444, 0, 0],
                    "8706": [0, 0.69444, 0.06389, 0],
                    "8707": [0, 0.69444, 0, 0],
                    "8709": [0.05556, 0.75, 0, 0],
                    "8711": [0, 0.68611, 0, 0],
                    "8712": [0.08556, 0.58556, 0, 0],
                    "8715": [0.08556, 0.58556, 0, 0],
                    "8722": [0.13333, 0.63333, 0, 0],
                    "8723": [0.13333, 0.63333, 0, 0],
                    "8725": [0.25, 0.75, 0, 0],
                    "8726": [0.25, 0.75, 0, 0],
                    "8727": [-0.02778, 0.47222, 0, 0],
                    "8728": [-0.02639, 0.47361, 0, 0],
                    "8729": [-0.02639, 0.47361, 0, 0],
                    "8730": [0.18, 0.82, 0, 0],
                    "8733": [0, 0.44444, 0, 0],
                    "8734": [0, 0.44444, 0, 0],
                    "8736": [0, 0.69224, 0, 0],
                    "8739": [0.25, 0.75, 0, 0],
                    "8741": [0.25, 0.75, 0, 0],
                    "8743": [0, 0.55556, 0, 0],
                    "8744": [0, 0.55556, 0, 0],
                    "8745": [0, 0.55556, 0, 0],
                    "8746": [0, 0.55556, 0, 0],
                    "8747": [0.19444, 0.69444, 0.12778, 0],
                    "8764": [-0.10889, 0.39111, 0, 0],
                    "8768": [0.19444, 0.69444, 0, 0],
                    "8771": [0.00222, 0.50222, 0, 0],
                    "8776": [0.02444, 0.52444, 0, 0],
                    "8781": [0.00222, 0.50222, 0, 0],
                    "8801": [0.00222, 0.50222, 0, 0],
                    "8804": [0.19667, 0.69667, 0, 0],
                    "8805": [0.19667, 0.69667, 0, 0],
                    "8810": [0.08556, 0.58556, 0, 0],
                    "8811": [0.08556, 0.58556, 0, 0],
                    "8826": [0.08556, 0.58556, 0, 0],
                    "8827": [0.08556, 0.58556, 0, 0],
                    "8834": [0.08556, 0.58556, 0, 0],
                    "8835": [0.08556, 0.58556, 0, 0],
                    "8838": [0.19667, 0.69667, 0, 0],
                    "8839": [0.19667, 0.69667, 0, 0],
                    "8846": [0, 0.55556, 0, 0],
                    "8849": [0.19667, 0.69667, 0, 0],
                    "8850": [0.19667, 0.69667, 0, 0],
                    "8851": [0, 0.55556, 0, 0],
                    "8852": [0, 0.55556, 0, 0],
                    "8853": [0.13333, 0.63333, 0, 0],
                    "8854": [0.13333, 0.63333, 0, 0],
                    "8855": [0.13333, 0.63333, 0, 0],
                    "8856": [0.13333, 0.63333, 0, 0],
                    "8857": [0.13333, 0.63333, 0, 0],
                    "8866": [0, 0.69444, 0, 0],
                    "8867": [0, 0.69444, 0, 0],
                    "8868": [0, 0.69444, 0, 0],
                    "8869": [0, 0.69444, 0, 0],
                    "8900": [-0.02639, 0.47361, 0, 0],
                    "8901": [-0.02639, 0.47361, 0, 0],
                    "8902": [-0.02778, 0.47222, 0, 0],
                    "8968": [0.25, 0.75, 0, 0],
                    "8969": [0.25, 0.75, 0, 0],
                    "8970": [0.25, 0.75, 0, 0],
                    "8971": [0.25, 0.75, 0, 0],
                    "8994": [-0.13889, 0.36111, 0, 0],
                    "8995": [-0.13889, 0.36111, 0, 0],
                    "9651": [0.19444, 0.69444, 0, 0],
                    "9657": [-0.02778, 0.47222, 0, 0],
                    "9661": [0.19444, 0.69444, 0, 0],
                    "9667": [-0.02778, 0.47222, 0, 0],
                    "9711": [0.19444, 0.69444, 0, 0],
                    "9824": [0.12963, 0.69444, 0, 0],
                    "9825": [0.12963, 0.69444, 0, 0],
                    "9826": [0.12963, 0.69444, 0, 0],
                    "9827": [0.12963, 0.69444, 0, 0],
                    "9837": [0, 0.75, 0, 0],
                    "9838": [0.19444, 0.69444, 0, 0],
                    "9839": [0.19444, 0.69444, 0, 0],
                    "10216": [0.25, 0.75, 0, 0],
                    "10217": [0.25, 0.75, 0, 0],
                    "10815": [0, 0.68611, 0, 0],
                    "10927": [0.19667, 0.69667, 0, 0],
                    "10928": [0.19667, 0.69667, 0, 0]
                },
                "Main-Italic": {
                    "33": [0, 0.69444, 0.12417, 0],
                    "34": [0, 0.69444, 0.06961, 0],
                    "35": [0.19444, 0.69444, 0.06616, 0],
                    "37": [0.05556, 0.75, 0.13639, 0],
                    "38": [0, 0.69444, 0.09694, 0],
                    "39": [0, 0.69444, 0.12417, 0],
                    "40": [0.25, 0.75, 0.16194, 0],
                    "41": [0.25, 0.75, 0.03694, 0],
                    "42": [0, 0.75, 0.14917, 0],
                    "43": [0.05667, 0.56167, 0.03694, 0],
                    "44": [0.19444, 0.10556, 0, 0],
                    "45": [0, 0.43056, 0.02826, 0],
                    "46": [0, 0.10556, 0, 0],
                    "47": [0.25, 0.75, 0.16194, 0],
                    "48": [0, 0.64444, 0.13556, 0],
                    "49": [0, 0.64444, 0.13556, 0],
                    "50": [0, 0.64444, 0.13556, 0],
                    "51": [0, 0.64444, 0.13556, 0],
                    "52": [0.19444, 0.64444, 0.13556, 0],
                    "53": [0, 0.64444, 0.13556, 0],
                    "54": [0, 0.64444, 0.13556, 0],
                    "55": [0.19444, 0.64444, 0.13556, 0],
                    "56": [0, 0.64444, 0.13556, 0],
                    "57": [0, 0.64444, 0.13556, 0],
                    "58": [0, 0.43056, 0.0582, 0],
                    "59": [0.19444, 0.43056, 0.0582, 0],
                    "61": [-0.13313, 0.36687, 0.06616, 0],
                    "63": [0, 0.69444, 0.1225, 0],
                    "64": [0, 0.69444, 0.09597, 0],
                    "65": [0, 0.68333, 0, 0],
                    "66": [0, 0.68333, 0.10257, 0],
                    "67": [0, 0.68333, 0.14528, 0],
                    "68": [0, 0.68333, 0.09403, 0],
                    "69": [0, 0.68333, 0.12028, 0],
                    "70": [0, 0.68333, 0.13305, 0],
                    "71": [0, 0.68333, 0.08722, 0],
                    "72": [0, 0.68333, 0.16389, 0],
                    "73": [0, 0.68333, 0.15806, 0],
                    "74": [0, 0.68333, 0.14028, 0],
                    "75": [0, 0.68333, 0.14528, 0],
                    "76": [0, 0.68333, 0, 0],
                    "77": [0, 0.68333, 0.16389, 0],
                    "78": [0, 0.68333, 0.16389, 0],
                    "79": [0, 0.68333, 0.09403, 0],
                    "80": [0, 0.68333, 0.10257, 0],
                    "81": [0.19444, 0.68333, 0.09403, 0],
                    "82": [0, 0.68333, 0.03868, 0],
                    "83": [0, 0.68333, 0.11972, 0],
                    "84": [0, 0.68333, 0.13305, 0],
                    "85": [0, 0.68333, 0.16389, 0],
                    "86": [0, 0.68333, 0.18361, 0],
                    "87": [0, 0.68333, 0.18361, 0],
                    "88": [0, 0.68333, 0.15806, 0],
                    "89": [0, 0.68333, 0.19383, 0],
                    "90": [0, 0.68333, 0.14528, 0],
                    "91": [0.25, 0.75, 0.1875, 0],
                    "93": [0.25, 0.75, 0.10528, 0],
                    "94": [0, 0.69444, 0.06646, 0],
                    "95": [0.31, 0.12056, 0.09208, 0],
                    "97": [0, 0.43056, 0.07671, 0],
                    "98": [0, 0.69444, 0.06312, 0],
                    "99": [0, 0.43056, 0.05653, 0],
                    "100": [0, 0.69444, 0.10333, 0],
                    "101": [0, 0.43056, 0.07514, 0],
                    "102": [0.19444, 0.69444, 0.21194, 0],
                    "103": [0.19444, 0.43056, 0.08847, 0],
                    "104": [0, 0.69444, 0.07671, 0],
                    "105": [0, 0.65536, 0.1019, 0],
                    "106": [0.19444, 0.65536, 0.14467, 0],
                    "107": [0, 0.69444, 0.10764, 0],
                    "108": [0, 0.69444, 0.10333, 0],
                    "109": [0, 0.43056, 0.07671, 0],
                    "110": [0, 0.43056, 0.07671, 0],
                    "111": [0, 0.43056, 0.06312, 0],
                    "112": [0.19444, 0.43056, 0.06312, 0],
                    "113": [0.19444, 0.43056, 0.08847, 0],
                    "114": [0, 0.43056, 0.10764, 0],
                    "115": [0, 0.43056, 0.08208, 0],
                    "116": [0, 0.61508, 0.09486, 0],
                    "117": [0, 0.43056, 0.07671, 0],
                    "118": [0, 0.43056, 0.10764, 0],
                    "119": [0, 0.43056, 0.10764, 0],
                    "120": [0, 0.43056, 0.12042, 0],
                    "121": [0.19444, 0.43056, 0.08847, 0],
                    "122": [0, 0.43056, 0.12292, 0],
                    "126": [0.35, 0.31786, 0.11585, 0],
                    "163": [0, 0.69444, 0, 0],
                    "305": [0, 0.43056, 0, 0.02778],
                    "567": [0.19444, 0.43056, 0, 0.08334],
                    "768": [0, 0.69444, 0, 0],
                    "769": [0, 0.69444, 0.09694, 0],
                    "770": [0, 0.69444, 0.06646, 0],
                    "771": [0, 0.66786, 0.11585, 0],
                    "772": [0, 0.56167, 0.10333, 0],
                    "774": [0, 0.69444, 0.10806, 0],
                    "775": [0, 0.66786, 0.11752, 0],
                    "776": [0, 0.66786, 0.10474, 0],
                    "778": [0, 0.69444, 0, 0],
                    "779": [0, 0.69444, 0.1225, 0],
                    "780": [0, 0.62847, 0.08295, 0],
                    "915": [0, 0.68333, 0.13305, 0],
                    "916": [0, 0.68333, 0, 0],
                    "920": [0, 0.68333, 0.09403, 0],
                    "923": [0, 0.68333, 0, 0],
                    "926": [0, 0.68333, 0.15294, 0],
                    "928": [0, 0.68333, 0.16389, 0],
                    "931": [0, 0.68333, 0.12028, 0],
                    "933": [0, 0.68333, 0.11111, 0],
                    "934": [0, 0.68333, 0.05986, 0],
                    "936": [0, 0.68333, 0.11111, 0],
                    "937": [0, 0.68333, 0.10257, 0],
                    "8211": [0, 0.43056, 0.09208, 0],
                    "8212": [0, 0.43056, 0.09208, 0],
                    "8216": [0, 0.69444, 0.12417, 0],
                    "8217": [0, 0.69444, 0.12417, 0],
                    "8220": [0, 0.69444, 0.1685, 0],
                    "8221": [0, 0.69444, 0.06961, 0],
                    "8463": [0, 0.68889, 0, 0]
                },
                "Main-Regular": {
                    "32": [0, 0, 0, 0],
                    "33": [0, 0.69444, 0, 0],
                    "34": [0, 0.69444, 0, 0],
                    "35": [0.19444, 0.69444, 0, 0],
                    "36": [0.05556, 0.75, 0, 0],
                    "37": [0.05556, 0.75, 0, 0],
                    "38": [0, 0.69444, 0, 0],
                    "39": [0, 0.69444, 0, 0],
                    "40": [0.25, 0.75, 0, 0],
                    "41": [0.25, 0.75, 0, 0],
                    "42": [0, 0.75, 0, 0],
                    "43": [0.08333, 0.58333, 0, 0],
                    "44": [0.19444, 0.10556, 0, 0],
                    "45": [0, 0.43056, 0, 0],
                    "46": [0, 0.10556, 0, 0],
                    "47": [0.25, 0.75, 0, 0],
                    "48": [0, 0.64444, 0, 0],
                    "49": [0, 0.64444, 0, 0],
                    "50": [0, 0.64444, 0, 0],
                    "51": [0, 0.64444, 0, 0],
                    "52": [0, 0.64444, 0, 0],
                    "53": [0, 0.64444, 0, 0],
                    "54": [0, 0.64444, 0, 0],
                    "55": [0, 0.64444, 0, 0],
                    "56": [0, 0.64444, 0, 0],
                    "57": [0, 0.64444, 0, 0],
                    "58": [0, 0.43056, 0, 0],
                    "59": [0.19444, 0.43056, 0, 0],
                    "60": [0.0391, 0.5391, 0, 0],
                    "61": [-0.13313, 0.36687, 0, 0],
                    "62": [0.0391, 0.5391, 0, 0],
                    "63": [0, 0.69444, 0, 0],
                    "64": [0, 0.69444, 0, 0],
                    "65": [0, 0.68333, 0, 0],
                    "66": [0, 0.68333, 0, 0],
                    "67": [0, 0.68333, 0, 0],
                    "68": [0, 0.68333, 0, 0],
                    "69": [0, 0.68333, 0, 0],
                    "70": [0, 0.68333, 0, 0],
                    "71": [0, 0.68333, 0, 0],
                    "72": [0, 0.68333, 0, 0],
                    "73": [0, 0.68333, 0, 0],
                    "74": [0, 0.68333, 0, 0],
                    "75": [0, 0.68333, 0, 0],
                    "76": [0, 0.68333, 0, 0],
                    "77": [0, 0.68333, 0, 0],
                    "78": [0, 0.68333, 0, 0],
                    "79": [0, 0.68333, 0, 0],
                    "80": [0, 0.68333, 0, 0],
                    "81": [0.19444, 0.68333, 0, 0],
                    "82": [0, 0.68333, 0, 0],
                    "83": [0, 0.68333, 0, 0],
                    "84": [0, 0.68333, 0, 0],
                    "85": [0, 0.68333, 0, 0],
                    "86": [0, 0.68333, 0.01389, 0],
                    "87": [0, 0.68333, 0.01389, 0],
                    "88": [0, 0.68333, 0, 0],
                    "89": [0, 0.68333, 0.025, 0],
                    "90": [0, 0.68333, 0, 0],
                    "91": [0.25, 0.75, 0, 0],
                    "92": [0.25, 0.75, 0, 0],
                    "93": [0.25, 0.75, 0, 0],
                    "94": [0, 0.69444, 0, 0],
                    "95": [0.31, 0.12056, 0.02778, 0],
                    "96": [0, 0.69444, 0, 0],
                    "97": [0, 0.43056, 0, 0],
                    "98": [0, 0.69444, 0, 0],
                    "99": [0, 0.43056, 0, 0],
                    "100": [0, 0.69444, 0, 0],
                    "101": [0, 0.43056, 0, 0],
                    "102": [0, 0.69444, 0.07778, 0],
                    "103": [0.19444, 0.43056, 0.01389, 0],
                    "104": [0, 0.69444, 0, 0],
                    "105": [0, 0.66786, 0, 0],
                    "106": [0.19444, 0.66786, 0, 0],
                    "107": [0, 0.69444, 0, 0],
                    "108": [0, 0.69444, 0, 0],
                    "109": [0, 0.43056, 0, 0],
                    "110": [0, 0.43056, 0, 0],
                    "111": [0, 0.43056, 0, 0],
                    "112": [0.19444, 0.43056, 0, 0],
                    "113": [0.19444, 0.43056, 0, 0],
                    "114": [0, 0.43056, 0, 0],
                    "115": [0, 0.43056, 0, 0],
                    "116": [0, 0.61508, 0, 0],
                    "117": [0, 0.43056, 0, 0],
                    "118": [0, 0.43056, 0.01389, 0],
                    "119": [0, 0.43056, 0.01389, 0],
                    "120": [0, 0.43056, 0, 0],
                    "121": [0.19444, 0.43056, 0.01389, 0],
                    "122": [0, 0.43056, 0, 0],
                    "123": [0.25, 0.75, 0, 0],
                    "124": [0.25, 0.75, 0, 0],
                    "125": [0.25, 0.75, 0, 0],
                    "126": [0.35, 0.31786, 0, 0],
                    "160": [0, 0, 0, 0],
                    "168": [0, 0.66786, 0, 0],
                    "172": [0, 0.43056, 0, 0],
                    "175": [0, 0.56778, 0, 0],
                    "176": [0, 0.69444, 0, 0],
                    "177": [0.08333, 0.58333, 0, 0],
                    "180": [0, 0.69444, 0, 0],
                    "215": [0.08333, 0.58333, 0, 0],
                    "247": [0.08333, 0.58333, 0, 0],
                    "305": [0, 0.43056, 0, 0],
                    "567": [0.19444, 0.43056, 0, 0],
                    "710": [0, 0.69444, 0, 0],
                    "711": [0, 0.62847, 0, 0],
                    "713": [0, 0.56778, 0, 0],
                    "714": [0, 0.69444, 0, 0],
                    "715": [0, 0.69444, 0, 0],
                    "728": [0, 0.69444, 0, 0],
                    "729": [0, 0.66786, 0, 0],
                    "730": [0, 0.69444, 0, 0],
                    "732": [0, 0.66786, 0, 0],
                    "768": [0, 0.69444, 0, 0],
                    "769": [0, 0.69444, 0, 0],
                    "770": [0, 0.69444, 0, 0],
                    "771": [0, 0.66786, 0, 0],
                    "772": [0, 0.56778, 0, 0],
                    "774": [0, 0.69444, 0, 0],
                    "775": [0, 0.66786, 0, 0],
                    "776": [0, 0.66786, 0, 0],
                    "778": [0, 0.69444, 0, 0],
                    "779": [0, 0.69444, 0, 0],
                    "780": [0, 0.62847, 0, 0],
                    "824": [0.19444, 0.69444, 0, 0],
                    "915": [0, 0.68333, 0, 0],
                    "916": [0, 0.68333, 0, 0],
                    "920": [0, 0.68333, 0, 0],
                    "923": [0, 0.68333, 0, 0],
                    "926": [0, 0.68333, 0, 0],
                    "928": [0, 0.68333, 0, 0],
                    "931": [0, 0.68333, 0, 0],
                    "933": [0, 0.68333, 0, 0],
                    "934": [0, 0.68333, 0, 0],
                    "936": [0, 0.68333, 0, 0],
                    "937": [0, 0.68333, 0, 0],
                    "8211": [0, 0.43056, 0.02778, 0],
                    "8212": [0, 0.43056, 0.02778, 0],
                    "8216": [0, 0.69444, 0, 0],
                    "8217": [0, 0.69444, 0, 0],
                    "8220": [0, 0.69444, 0, 0],
                    "8221": [0, 0.69444, 0, 0],
                    "8224": [0.19444, 0.69444, 0, 0],
                    "8225": [0.19444, 0.69444, 0, 0],
                    "8230": [0, 0.12, 0, 0],
                    "8242": [0, 0.55556, 0, 0],
                    "8407": [0, 0.71444, 0.15382, 0],
                    "8463": [0, 0.68889, 0, 0],
                    "8465": [0, 0.69444, 0, 0],
                    "8467": [0, 0.69444, 0, 0.11111],
                    "8472": [0.19444, 0.43056, 0, 0.11111],
                    "8476": [0, 0.69444, 0, 0],
                    "8501": [0, 0.69444, 0, 0],
                    "8592": [-0.13313, 0.36687, 0, 0],
                    "8593": [0.19444, 0.69444, 0, 0],
                    "8594": [-0.13313, 0.36687, 0, 0],
                    "8595": [0.19444, 0.69444, 0, 0],
                    "8596": [-0.13313, 0.36687, 0, 0],
                    "8597": [0.25, 0.75, 0, 0],
                    "8598": [0.19444, 0.69444, 0, 0],
                    "8599": [0.19444, 0.69444, 0, 0],
                    "8600": [0.19444, 0.69444, 0, 0],
                    "8601": [0.19444, 0.69444, 0, 0],
                    "8614": [0.011, 0.511, 0, 0],
                    "8617": [0.011, 0.511, 0, 0],
                    "8618": [0.011, 0.511, 0, 0],
                    "8636": [-0.13313, 0.36687, 0, 0],
                    "8637": [-0.13313, 0.36687, 0, 0],
                    "8640": [-0.13313, 0.36687, 0, 0],
                    "8641": [-0.13313, 0.36687, 0, 0],
                    "8652": [0.011, 0.671, 0, 0],
                    "8656": [-0.13313, 0.36687, 0, 0],
                    "8657": [0.19444, 0.69444, 0, 0],
                    "8658": [-0.13313, 0.36687, 0, 0],
                    "8659": [0.19444, 0.69444, 0, 0],
                    "8660": [-0.13313, 0.36687, 0, 0],
                    "8661": [0.25, 0.75, 0, 0],
                    "8704": [0, 0.69444, 0, 0],
                    "8706": [0, 0.69444, 0.05556, 0.08334],
                    "8707": [0, 0.69444, 0, 0],
                    "8709": [0.05556, 0.75, 0, 0],
                    "8711": [0, 0.68333, 0, 0],
                    "8712": [0.0391, 0.5391, 0, 0],
                    "8715": [0.0391, 0.5391, 0, 0],
                    "8722": [0.08333, 0.58333, 0, 0],
                    "8723": [0.08333, 0.58333, 0, 0],
                    "8725": [0.25, 0.75, 0, 0],
                    "8726": [0.25, 0.75, 0, 0],
                    "8727": [-0.03472, 0.46528, 0, 0],
                    "8728": [-0.05555, 0.44445, 0, 0],
                    "8729": [-0.05555, 0.44445, 0, 0],
                    "8730": [0.2, 0.8, 0, 0],
                    "8733": [0, 0.43056, 0, 0],
                    "8734": [0, 0.43056, 0, 0],
                    "8736": [0, 0.69224, 0, 0],
                    "8739": [0.25, 0.75, 0, 0],
                    "8741": [0.25, 0.75, 0, 0],
                    "8743": [0, 0.55556, 0, 0],
                    "8744": [0, 0.55556, 0, 0],
                    "8745": [0, 0.55556, 0, 0],
                    "8746": [0, 0.55556, 0, 0],
                    "8747": [0.19444, 0.69444, 0.11111, 0],
                    "8764": [-0.13313, 0.36687, 0, 0],
                    "8768": [0.19444, 0.69444, 0, 0],
                    "8771": [-0.03625, 0.46375, 0, 0],
                    "8773": [-0.022, 0.589, 0, 0],
                    "8776": [-0.01688, 0.48312, 0, 0],
                    "8781": [-0.03625, 0.46375, 0, 0],
                    "8784": [-0.133, 0.67, 0, 0],
                    "8800": [0.215, 0.716, 0, 0],
                    "8801": [-0.03625, 0.46375, 0, 0],
                    "8804": [0.13597, 0.63597, 0, 0],
                    "8805": [0.13597, 0.63597, 0, 0],
                    "8810": [0.0391, 0.5391, 0, 0],
                    "8811": [0.0391, 0.5391, 0, 0],
                    "8826": [0.0391, 0.5391, 0, 0],
                    "8827": [0.0391, 0.5391, 0, 0],
                    "8834": [0.0391, 0.5391, 0, 0],
                    "8835": [0.0391, 0.5391, 0, 0],
                    "8838": [0.13597, 0.63597, 0, 0],
                    "8839": [0.13597, 0.63597, 0, 0],
                    "8846": [0, 0.55556, 0, 0],
                    "8849": [0.13597, 0.63597, 0, 0],
                    "8850": [0.13597, 0.63597, 0, 0],
                    "8851": [0, 0.55556, 0, 0],
                    "8852": [0, 0.55556, 0, 0],
                    "8853": [0.08333, 0.58333, 0, 0],
                    "8854": [0.08333, 0.58333, 0, 0],
                    "8855": [0.08333, 0.58333, 0, 0],
                    "8856": [0.08333, 0.58333, 0, 0],
                    "8857": [0.08333, 0.58333, 0, 0],
                    "8866": [0, 0.69444, 0, 0],
                    "8867": [0, 0.69444, 0, 0],
                    "8868": [0, 0.69444, 0, 0],
                    "8869": [0, 0.69444, 0, 0],
                    "8872": [0.249, 0.75, 0, 0],
                    "8900": [-0.05555, 0.44445, 0, 0],
                    "8901": [-0.05555, 0.44445, 0, 0],
                    "8902": [-0.03472, 0.46528, 0, 0],
                    "8904": [0.005, 0.505, 0, 0],
                    "8942": [0.03, 0.9, 0, 0],
                    "8943": [-0.19, 0.31, 0, 0],
                    "8945": [-0.1, 0.82, 0, 0],
                    "8968": [0.25, 0.75, 0, 0],
                    "8969": [0.25, 0.75, 0, 0],
                    "8970": [0.25, 0.75, 0, 0],
                    "8971": [0.25, 0.75, 0, 0],
                    "8994": [-0.14236, 0.35764, 0, 0],
                    "8995": [-0.14236, 0.35764, 0, 0],
                    "9136": [0.244, 0.744, 0, 0],
                    "9137": [0.244, 0.744, 0, 0],
                    "9651": [0.19444, 0.69444, 0, 0],
                    "9657": [-0.03472, 0.46528, 0, 0],
                    "9661": [0.19444, 0.69444, 0, 0],
                    "9667": [-0.03472, 0.46528, 0, 0],
                    "9711": [0.19444, 0.69444, 0, 0],
                    "9824": [0.12963, 0.69444, 0, 0],
                    "9825": [0.12963, 0.69444, 0, 0],
                    "9826": [0.12963, 0.69444, 0, 0],
                    "9827": [0.12963, 0.69444, 0, 0],
                    "9837": [0, 0.75, 0, 0],
                    "9838": [0.19444, 0.69444, 0, 0],
                    "9839": [0.19444, 0.69444, 0, 0],
                    "10216": [0.25, 0.75, 0, 0],
                    "10217": [0.25, 0.75, 0, 0],
                    "10222": [0.244, 0.744, 0, 0],
                    "10223": [0.244, 0.744, 0, 0],
                    "10229": [0.011, 0.511, 0, 0],
                    "10230": [0.011, 0.511, 0, 0],
                    "10231": [0.011, 0.511, 0, 0],
                    "10232": [0.024, 0.525, 0, 0],
                    "10233": [0.024, 0.525, 0, 0],
                    "10234": [0.024, 0.525, 0, 0],
                    "10236": [0.011, 0.511, 0, 0],
                    "10815": [0, 0.68333, 0, 0],
                    "10927": [0.13597, 0.63597, 0, 0],
                    "10928": [0.13597, 0.63597, 0, 0]
                },
                "Math-BoldItalic": {
                    "47": [0.19444, 0.69444, 0, 0],
                    "65": [0, 0.68611, 0, 0],
                    "66": [0, 0.68611, 0.04835, 0],
                    "67": [0, 0.68611, 0.06979, 0],
                    "68": [0, 0.68611, 0.03194, 0],
                    "69": [0, 0.68611, 0.05451, 0],
                    "70": [0, 0.68611, 0.15972, 0],
                    "71": [0, 0.68611, 0, 0],
                    "72": [0, 0.68611, 0.08229, 0],
                    "73": [0, 0.68611, 0.07778, 0],
                    "74": [0, 0.68611, 0.10069, 0],
                    "75": [0, 0.68611, 0.06979, 0],
                    "76": [0, 0.68611, 0, 0],
                    "77": [0, 0.68611, 0.11424, 0],
                    "78": [0, 0.68611, 0.11424, 0],
                    "79": [0, 0.68611, 0.03194, 0],
                    "80": [0, 0.68611, 0.15972, 0],
                    "81": [0.19444, 0.68611, 0, 0],
                    "82": [0, 0.68611, 0.00421, 0],
                    "83": [0, 0.68611, 0.05382, 0],
                    "84": [0, 0.68611, 0.15972, 0],
                    "85": [0, 0.68611, 0.11424, 0],
                    "86": [0, 0.68611, 0.25555, 0],
                    "87": [0, 0.68611, 0.15972, 0],
                    "88": [0, 0.68611, 0.07778, 0],
                    "89": [0, 0.68611, 0.25555, 0],
                    "90": [0, 0.68611, 0.06979, 0],
                    "97": [0, 0.44444, 0, 0],
                    "98": [0, 0.69444, 0, 0],
                    "99": [0, 0.44444, 0, 0],
                    "100": [0, 0.69444, 0, 0],
                    "101": [0, 0.44444, 0, 0],
                    "102": [0.19444, 0.69444, 0.11042, 0],
                    "103": [0.19444, 0.44444, 0.03704, 0],
                    "104": [0, 0.69444, 0, 0],
                    "105": [0, 0.69326, 0, 0],
                    "106": [0.19444, 0.69326, 0.0622, 0],
                    "107": [0, 0.69444, 0.01852, 0],
                    "108": [0, 0.69444, 0.0088, 0],
                    "109": [0, 0.44444, 0, 0],
                    "110": [0, 0.44444, 0, 0],
                    "111": [0, 0.44444, 0, 0],
                    "112": [0.19444, 0.44444, 0, 0],
                    "113": [0.19444, 0.44444, 0.03704, 0],
                    "114": [0, 0.44444, 0.03194, 0],
                    "115": [0, 0.44444, 0, 0],
                    "116": [0, 0.63492, 0, 0],
                    "117": [0, 0.44444, 0, 0],
                    "118": [0, 0.44444, 0.03704, 0],
                    "119": [0, 0.44444, 0.02778, 0],
                    "120": [0, 0.44444, 0, 0],
                    "121": [0.19444, 0.44444, 0.03704, 0],
                    "122": [0, 0.44444, 0.04213, 0],
                    "915": [0, 0.68611, 0.15972, 0],
                    "916": [0, 0.68611, 0, 0],
                    "920": [0, 0.68611, 0.03194, 0],
                    "923": [0, 0.68611, 0, 0],
                    "926": [0, 0.68611, 0.07458, 0],
                    "928": [0, 0.68611, 0.08229, 0],
                    "931": [0, 0.68611, 0.05451, 0],
                    "933": [0, 0.68611, 0.15972, 0],
                    "934": [0, 0.68611, 0, 0],
                    "936": [0, 0.68611, 0.11653, 0],
                    "937": [0, 0.68611, 0.04835, 0],
                    "945": [0, 0.44444, 0, 0],
                    "946": [0.19444, 0.69444, 0.03403, 0],
                    "947": [0.19444, 0.44444, 0.06389, 0],
                    "948": [0, 0.69444, 0.03819, 0],
                    "949": [0, 0.44444, 0, 0],
                    "950": [0.19444, 0.69444, 0.06215, 0],
                    "951": [0.19444, 0.44444, 0.03704, 0],
                    "952": [0, 0.69444, 0.03194, 0],
                    "953": [0, 0.44444, 0, 0],
                    "954": [0, 0.44444, 0, 0],
                    "955": [0, 0.69444, 0, 0],
                    "956": [0.19444, 0.44444, 0, 0],
                    "957": [0, 0.44444, 0.06898, 0],
                    "958": [0.19444, 0.69444, 0.03021, 0],
                    "959": [0, 0.44444, 0, 0],
                    "960": [0, 0.44444, 0.03704, 0],
                    "961": [0.19444, 0.44444, 0, 0],
                    "962": [0.09722, 0.44444, 0.07917, 0],
                    "963": [0, 0.44444, 0.03704, 0],
                    "964": [0, 0.44444, 0.13472, 0],
                    "965": [0, 0.44444, 0.03704, 0],
                    "966": [0.19444, 0.44444, 0, 0],
                    "967": [0.19444, 0.44444, 0, 0],
                    "968": [0.19444, 0.69444, 0.03704, 0],
                    "969": [0, 0.44444, 0.03704, 0],
                    "977": [0, 0.69444, 0, 0],
                    "981": [0.19444, 0.69444, 0, 0],
                    "982": [0, 0.44444, 0.03194, 0],
                    "1009": [0.19444, 0.44444, 0, 0],
                    "1013": [0, 0.44444, 0, 0]
                },
                "Math-Italic": {
                    "47": [0.19444, 0.69444, 0, 0],
                    "65": [0, 0.68333, 0, 0.13889],
                    "66": [0, 0.68333, 0.05017, 0.08334],
                    "67": [0, 0.68333, 0.07153, 0.08334],
                    "68": [0, 0.68333, 0.02778, 0.05556],
                    "69": [0, 0.68333, 0.05764, 0.08334],
                    "70": [0, 0.68333, 0.13889, 0.08334],
                    "71": [0, 0.68333, 0, 0.08334],
                    "72": [0, 0.68333, 0.08125, 0.05556],
                    "73": [0, 0.68333, 0.07847, 0.11111],
                    "74": [0, 0.68333, 0.09618, 0.16667],
                    "75": [0, 0.68333, 0.07153, 0.05556],
                    "76": [0, 0.68333, 0, 0.02778],
                    "77": [0, 0.68333, 0.10903, 0.08334],
                    "78": [0, 0.68333, 0.10903, 0.08334],
                    "79": [0, 0.68333, 0.02778, 0.08334],
                    "80": [0, 0.68333, 0.13889, 0.08334],
                    "81": [0.19444, 0.68333, 0, 0.08334],
                    "82": [0, 0.68333, 0.00773, 0.08334],
                    "83": [0, 0.68333, 0.05764, 0.08334],
                    "84": [0, 0.68333, 0.13889, 0.08334],
                    "85": [0, 0.68333, 0.10903, 0.02778],
                    "86": [0, 0.68333, 0.22222, 0],
                    "87": [0, 0.68333, 0.13889, 0],
                    "88": [0, 0.68333, 0.07847, 0.08334],
                    "89": [0, 0.68333, 0.22222, 0],
                    "90": [0, 0.68333, 0.07153, 0.08334],
                    "97": [0, 0.43056, 0, 0],
                    "98": [0, 0.69444, 0, 0],
                    "99": [0, 0.43056, 0, 0.05556],
                    "100": [0, 0.69444, 0, 0.16667],
                    "101": [0, 0.43056, 0, 0.05556],
                    "102": [0.19444, 0.69444, 0.10764, 0.16667],
                    "103": [0.19444, 0.43056, 0.03588, 0.02778],
                    "104": [0, 0.69444, 0, 0],
                    "105": [0, 0.65952, 0, 0],
                    "106": [0.19444, 0.65952, 0.05724, 0],
                    "107": [0, 0.69444, 0.03148, 0],
                    "108": [0, 0.69444, 0.01968, 0.08334],
                    "109": [0, 0.43056, 0, 0],
                    "110": [0, 0.43056, 0, 0],
                    "111": [0, 0.43056, 0, 0.05556],
                    "112": [0.19444, 0.43056, 0, 0.08334],
                    "113": [0.19444, 0.43056, 0.03588, 0.08334],
                    "114": [0, 0.43056, 0.02778, 0.05556],
                    "115": [0, 0.43056, 0, 0.05556],
                    "116": [0, 0.61508, 0, 0.08334],
                    "117": [0, 0.43056, 0, 0.02778],
                    "118": [0, 0.43056, 0.03588, 0.02778],
                    "119": [0, 0.43056, 0.02691, 0.08334],
                    "120": [0, 0.43056, 0, 0.02778],
                    "121": [0.19444, 0.43056, 0.03588, 0.05556],
                    "122": [0, 0.43056, 0.04398, 0.05556],
                    "915": [0, 0.68333, 0.13889, 0.08334],
                    "916": [0, 0.68333, 0, 0.16667],
                    "920": [0, 0.68333, 0.02778, 0.08334],
                    "923": [0, 0.68333, 0, 0.16667],
                    "926": [0, 0.68333, 0.07569, 0.08334],
                    "928": [0, 0.68333, 0.08125, 0.05556],
                    "931": [0, 0.68333, 0.05764, 0.08334],
                    "933": [0, 0.68333, 0.13889, 0.05556],
                    "934": [0, 0.68333, 0, 0.08334],
                    "936": [0, 0.68333, 0.11, 0.05556],
                    "937": [0, 0.68333, 0.05017, 0.08334],
                    "945": [0, 0.43056, 0.0037, 0.02778],
                    "946": [0.19444, 0.69444, 0.05278, 0.08334],
                    "947": [0.19444, 0.43056, 0.05556, 0],
                    "948": [0, 0.69444, 0.03785, 0.05556],
                    "949": [0, 0.43056, 0, 0.08334],
                    "950": [0.19444, 0.69444, 0.07378, 0.08334],
                    "951": [0.19444, 0.43056, 0.03588, 0.05556],
                    "952": [0, 0.69444, 0.02778, 0.08334],
                    "953": [0, 0.43056, 0, 0.05556],
                    "954": [0, 0.43056, 0, 0],
                    "955": [0, 0.69444, 0, 0],
                    "956": [0.19444, 0.43056, 0, 0.02778],
                    "957": [0, 0.43056, 0.06366, 0.02778],
                    "958": [0.19444, 0.69444, 0.04601, 0.11111],
                    "959": [0, 0.43056, 0, 0.05556],
                    "960": [0, 0.43056, 0.03588, 0],
                    "961": [0.19444, 0.43056, 0, 0.08334],
                    "962": [0.09722, 0.43056, 0.07986, 0.08334],
                    "963": [0, 0.43056, 0.03588, 0],
                    "964": [0, 0.43056, 0.1132, 0.02778],
                    "965": [0, 0.43056, 0.03588, 0.02778],
                    "966": [0.19444, 0.43056, 0, 0.08334],
                    "967": [0.19444, 0.43056, 0, 0.05556],
                    "968": [0.19444, 0.69444, 0.03588, 0.11111],
                    "969": [0, 0.43056, 0.03588, 0],
                    "977": [0, 0.69444, 0, 0.08334],
                    "981": [0.19444, 0.69444, 0, 0.08334],
                    "982": [0, 0.43056, 0.02778, 0],
                    "1009": [0.19444, 0.43056, 0, 0.08334],
                    "1013": [0, 0.43056, 0, 0.05556]
                },
                "Math-Regular": {
                    "65": [0, 0.68333, 0, 0.13889],
                    "66": [0, 0.68333, 0.05017, 0.08334],
                    "67": [0, 0.68333, 0.07153, 0.08334],
                    "68": [0, 0.68333, 0.02778, 0.05556],
                    "69": [0, 0.68333, 0.05764, 0.08334],
                    "70": [0, 0.68333, 0.13889, 0.08334],
                    "71": [0, 0.68333, 0, 0.08334],
                    "72": [0, 0.68333, 0.08125, 0.05556],
                    "73": [0, 0.68333, 0.07847, 0.11111],
                    "74": [0, 0.68333, 0.09618, 0.16667],
                    "75": [0, 0.68333, 0.07153, 0.05556],
                    "76": [0, 0.68333, 0, 0.02778],
                    "77": [0, 0.68333, 0.10903, 0.08334],
                    "78": [0, 0.68333, 0.10903, 0.08334],
                    "79": [0, 0.68333, 0.02778, 0.08334],
                    "80": [0, 0.68333, 0.13889, 0.08334],
                    "81": [0.19444, 0.68333, 0, 0.08334],
                    "82": [0, 0.68333, 0.00773, 0.08334],
                    "83": [0, 0.68333, 0.05764, 0.08334],
                    "84": [0, 0.68333, 0.13889, 0.08334],
                    "85": [0, 0.68333, 0.10903, 0.02778],
                    "86": [0, 0.68333, 0.22222, 0],
                    "87": [0, 0.68333, 0.13889, 0],
                    "88": [0, 0.68333, 0.07847, 0.08334],
                    "89": [0, 0.68333, 0.22222, 0],
                    "90": [0, 0.68333, 0.07153, 0.08334],
                    "97": [0, 0.43056, 0, 0],
                    "98": [0, 0.69444, 0, 0],
                    "99": [0, 0.43056, 0, 0.05556],
                    "100": [0, 0.69444, 0, 0.16667],
                    "101": [0, 0.43056, 0, 0.05556],
                    "102": [0.19444, 0.69444, 0.10764, 0.16667],
                    "103": [0.19444, 0.43056, 0.03588, 0.02778],
                    "104": [0, 0.69444, 0, 0],
                    "105": [0, 0.65952, 0, 0],
                    "106": [0.19444, 0.65952, 0.05724, 0],
                    "107": [0, 0.69444, 0.03148, 0],
                    "108": [0, 0.69444, 0.01968, 0.08334],
                    "109": [0, 0.43056, 0, 0],
                    "110": [0, 0.43056, 0, 0],
                    "111": [0, 0.43056, 0, 0.05556],
                    "112": [0.19444, 0.43056, 0, 0.08334],
                    "113": [0.19444, 0.43056, 0.03588, 0.08334],
                    "114": [0, 0.43056, 0.02778, 0.05556],
                    "115": [0, 0.43056, 0, 0.05556],
                    "116": [0, 0.61508, 0, 0.08334],
                    "117": [0, 0.43056, 0, 0.02778],
                    "118": [0, 0.43056, 0.03588, 0.02778],
                    "119": [0, 0.43056, 0.02691, 0.08334],
                    "120": [0, 0.43056, 0, 0.02778],
                    "121": [0.19444, 0.43056, 0.03588, 0.05556],
                    "122": [0, 0.43056, 0.04398, 0.05556],
                    "915": [0, 0.68333, 0.13889, 0.08334],
                    "916": [0, 0.68333, 0, 0.16667],
                    "920": [0, 0.68333, 0.02778, 0.08334],
                    "923": [0, 0.68333, 0, 0.16667],
                    "926": [0, 0.68333, 0.07569, 0.08334],
                    "928": [0, 0.68333, 0.08125, 0.05556],
                    "931": [0, 0.68333, 0.05764, 0.08334],
                    "933": [0, 0.68333, 0.13889, 0.05556],
                    "934": [0, 0.68333, 0, 0.08334],
                    "936": [0, 0.68333, 0.11, 0.05556],
                    "937": [0, 0.68333, 0.05017, 0.08334],
                    "945": [0, 0.43056, 0.0037, 0.02778],
                    "946": [0.19444, 0.69444, 0.05278, 0.08334],
                    "947": [0.19444, 0.43056, 0.05556, 0],
                    "948": [0, 0.69444, 0.03785, 0.05556],
                    "949": [0, 0.43056, 0, 0.08334],
                    "950": [0.19444, 0.69444, 0.07378, 0.08334],
                    "951": [0.19444, 0.43056, 0.03588, 0.05556],
                    "952": [0, 0.69444, 0.02778, 0.08334],
                    "953": [0, 0.43056, 0, 0.05556],
                    "954": [0, 0.43056, 0, 0],
                    "955": [0, 0.69444, 0, 0],
                    "956": [0.19444, 0.43056, 0, 0.02778],
                    "957": [0, 0.43056, 0.06366, 0.02778],
                    "958": [0.19444, 0.69444, 0.04601, 0.11111],
                    "959": [0, 0.43056, 0, 0.05556],
                    "960": [0, 0.43056, 0.03588, 0],
                    "961": [0.19444, 0.43056, 0, 0.08334],
                    "962": [0.09722, 0.43056, 0.07986, 0.08334],
                    "963": [0, 0.43056, 0.03588, 0],
                    "964": [0, 0.43056, 0.1132, 0.02778],
                    "965": [0, 0.43056, 0.03588, 0.02778],
                    "966": [0.19444, 0.43056, 0, 0.08334],
                    "967": [0.19444, 0.43056, 0, 0.05556],
                    "968": [0.19444, 0.69444, 0.03588, 0.11111],
                    "969": [0, 0.43056, 0.03588, 0],
                    "977": [0, 0.69444, 0, 0.08334],
                    "981": [0.19444, 0.69444, 0, 0.08334],
                    "982": [0, 0.43056, 0.02778, 0],
                    "1009": [0.19444, 0.43056, 0, 0.08334],
                    "1013": [0, 0.43056, 0, 0.05556]
                },
                "SansSerif-Regular": {
                    "33": [0, 0.69444, 0, 0],
                    "34": [0, 0.69444, 0, 0],
                    "35": [0.19444, 0.69444, 0, 0],
                    "36": [0.05556, 0.75, 0, 0],
                    "37": [0.05556, 0.75, 0, 0],
                    "38": [0, 0.69444, 0, 0],
                    "39": [0, 0.69444, 0, 0],
                    "40": [0.25, 0.75, 0, 0],
                    "41": [0.25, 0.75, 0, 0],
                    "42": [0, 0.75, 0, 0],
                    "43": [0.08333, 0.58333, 0, 0],
                    "44": [0.125, 0.08333, 0, 0],
                    "45": [0, 0.44444, 0, 0],
                    "46": [0, 0.08333, 0, 0],
                    "47": [0.25, 0.75, 0, 0],
                    "48": [0, 0.65556, 0, 0],
                    "49": [0, 0.65556, 0, 0],
                    "50": [0, 0.65556, 0, 0],
                    "51": [0, 0.65556, 0, 0],
                    "52": [0, 0.65556, 0, 0],
                    "53": [0, 0.65556, 0, 0],
                    "54": [0, 0.65556, 0, 0],
                    "55": [0, 0.65556, 0, 0],
                    "56": [0, 0.65556, 0, 0],
                    "57": [0, 0.65556, 0, 0],
                    "58": [0, 0.44444, 0, 0],
                    "59": [0.125, 0.44444, 0, 0],
                    "61": [-0.13, 0.37, 0, 0],
                    "63": [0, 0.69444, 0, 0],
                    "64": [0, 0.69444, 0, 0],
                    "65": [0, 0.69444, 0, 0],
                    "66": [0, 0.69444, 0, 0],
                    "67": [0, 0.69444, 0, 0],
                    "68": [0, 0.69444, 0, 0],
                    "69": [0, 0.69444, 0, 0],
                    "70": [0, 0.69444, 0, 0],
                    "71": [0, 0.69444, 0, 0],
                    "72": [0, 0.69444, 0, 0],
                    "73": [0, 0.69444, 0, 0],
                    "74": [0, 0.69444, 0, 0],
                    "75": [0, 0.69444, 0, 0],
                    "76": [0, 0.69444, 0, 0],
                    "77": [0, 0.69444, 0, 0],
                    "78": [0, 0.69444, 0, 0],
                    "79": [0, 0.69444, 0, 0],
                    "80": [0, 0.69444, 0, 0],
                    "81": [0.125, 0.69444, 0, 0],
                    "82": [0, 0.69444, 0, 0],
                    "83": [0, 0.69444, 0, 0],
                    "84": [0, 0.69444, 0, 0],
                    "85": [0, 0.69444, 0, 0],
                    "86": [0, 0.69444, 0.01389, 0],
                    "87": [0, 0.69444, 0.01389, 0],
                    "88": [0, 0.69444, 0, 0],
                    "89": [0, 0.69444, 0.025, 0],
                    "90": [0, 0.69444, 0, 0],
                    "91": [0.25, 0.75, 0, 0],
                    "93": [0.25, 0.75, 0, 0],
                    "94": [0, 0.69444, 0, 0],
                    "95": [0.35, 0.09444, 0.02778, 0],
                    "97": [0, 0.44444, 0, 0],
                    "98": [0, 0.69444, 0, 0],
                    "99": [0, 0.44444, 0, 0],
                    "100": [0, 0.69444, 0, 0],
                    "101": [0, 0.44444, 0, 0],
                    "102": [0, 0.69444, 0.06944, 0],
                    "103": [0.19444, 0.44444, 0.01389, 0],
                    "104": [0, 0.69444, 0, 0],
                    "105": [0, 0.67937, 0, 0],
                    "106": [0.19444, 0.67937, 0, 0],
                    "107": [0, 0.69444, 0, 0],
                    "108": [0, 0.69444, 0, 0],
                    "109": [0, 0.44444, 0, 0],
                    "110": [0, 0.44444, 0, 0],
                    "111": [0, 0.44444, 0, 0],
                    "112": [0.19444, 0.44444, 0, 0],
                    "113": [0.19444, 0.44444, 0, 0],
                    "114": [0, 0.44444, 0.01389, 0],
                    "115": [0, 0.44444, 0, 0],
                    "116": [0, 0.57143, 0, 0],
                    "117": [0, 0.44444, 0, 0],
                    "118": [0, 0.44444, 0.01389, 0],
                    "119": [0, 0.44444, 0.01389, 0],
                    "120": [0, 0.44444, 0, 0],
                    "121": [0.19444, 0.44444, 0.01389, 0],
                    "122": [0, 0.44444, 0, 0],
                    "126": [0.35, 0.32659, 0, 0],
                    "305": [0, 0.44444, 0, 0],
                    "567": [0.19444, 0.44444, 0, 0],
                    "768": [0, 0.69444, 0, 0],
                    "769": [0, 0.69444, 0, 0],
                    "770": [0, 0.69444, 0, 0],
                    "771": [0, 0.67659, 0, 0],
                    "772": [0, 0.60889, 0, 0],
                    "774": [0, 0.69444, 0, 0],
                    "775": [0, 0.67937, 0, 0],
                    "776": [0, 0.67937, 0, 0],
                    "778": [0, 0.69444, 0, 0],
                    "779": [0, 0.69444, 0, 0],
                    "780": [0, 0.63194, 0, 0],
                    "915": [0, 0.69444, 0, 0],
                    "916": [0, 0.69444, 0, 0],
                    "920": [0, 0.69444, 0, 0],
                    "923": [0, 0.69444, 0, 0],
                    "926": [0, 0.69444, 0, 0],
                    "928": [0, 0.69444, 0, 0],
                    "931": [0, 0.69444, 0, 0],
                    "933": [0, 0.69444, 0, 0],
                    "934": [0, 0.69444, 0, 0],
                    "936": [0, 0.69444, 0, 0],
                    "937": [0, 0.69444, 0, 0],
                    "8211": [0, 0.44444, 0.02778, 0],
                    "8212": [0, 0.44444, 0.02778, 0],
                    "8216": [0, 0.69444, 0, 0],
                    "8217": [0, 0.69444, 0, 0],
                    "8220": [0, 0.69444, 0, 0],
                    "8221": [0, 0.69444, 0, 0]
                },
                "Script-Regular": {
                    "65": [0, 0.7, 0.22925, 0],
                    "66": [0, 0.7, 0.04087, 0],
                    "67": [0, 0.7, 0.1689, 0],
                    "68": [0, 0.7, 0.09371, 0],
                    "69": [0, 0.7, 0.18583, 0],
                    "70": [0, 0.7, 0.13634, 0],
                    "71": [0, 0.7, 0.17322, 0],
                    "72": [0, 0.7, 0.29694, 0],
                    "73": [0, 0.7, 0.19189, 0],
                    "74": [0.27778, 0.7, 0.19189, 0],
                    "75": [0, 0.7, 0.31259, 0],
                    "76": [0, 0.7, 0.19189, 0],
                    "77": [0, 0.7, 0.15981, 0],
                    "78": [0, 0.7, 0.3525, 0],
                    "79": [0, 0.7, 0.08078, 0],
                    "80": [0, 0.7, 0.08078, 0],
                    "81": [0, 0.7, 0.03305, 0],
                    "82": [0, 0.7, 0.06259, 0],
                    "83": [0, 0.7, 0.19189, 0],
                    "84": [0, 0.7, 0.29087, 0],
                    "85": [0, 0.7, 0.25815, 0],
                    "86": [0, 0.7, 0.27523, 0],
                    "87": [0, 0.7, 0.27523, 0],
                    "88": [0, 0.7, 0.26006, 0],
                    "89": [0, 0.7, 0.2939, 0],
                    "90": [0, 0.7, 0.24037, 0]
                },
                "Size1-Regular": {
                    "40": [0.35001, 0.85, 0, 0],
                    "41": [0.35001, 0.85, 0, 0],
                    "47": [0.35001, 0.85, 0, 0],
                    "91": [0.35001, 0.85, 0, 0],
                    "92": [0.35001, 0.85, 0, 0],
                    "93": [0.35001, 0.85, 0, 0],
                    "123": [0.35001, 0.85, 0, 0],
                    "125": [0.35001, 0.85, 0, 0],
                    "710": [0, 0.72222, 0, 0],
                    "732": [0, 0.72222, 0, 0],
                    "770": [0, 0.72222, 0, 0],
                    "771": [0, 0.72222, 0, 0],
                    "8214": [-0.00099, 0.601, 0, 0],
                    "8593": [1e-05, 0.6, 0, 0],
                    "8595": [1e-05, 0.6, 0, 0],
                    "8657": [1e-05, 0.6, 0, 0],
                    "8659": [1e-05, 0.6, 0, 0],
                    "8719": [0.25001, 0.75, 0, 0],
                    "8720": [0.25001, 0.75, 0, 0],
                    "8721": [0.25001, 0.75, 0, 0],
                    "8730": [0.35001, 0.85, 0, 0],
                    "8739": [-0.00599, 0.606, 0, 0],
                    "8741": [-0.00599, 0.606, 0, 0],
                    "8747": [0.30612, 0.805, 0.19445, 0],
                    "8748": [0.306, 0.805, 0.19445, 0],
                    "8749": [0.306, 0.805, 0.19445, 0],
                    "8750": [0.30612, 0.805, 0.19445, 0],
                    "8896": [0.25001, 0.75, 0, 0],
                    "8897": [0.25001, 0.75, 0, 0],
                    "8898": [0.25001, 0.75, 0, 0],
                    "8899": [0.25001, 0.75, 0, 0],
                    "8968": [0.35001, 0.85, 0, 0],
                    "8969": [0.35001, 0.85, 0, 0],
                    "8970": [0.35001, 0.85, 0, 0],
                    "8971": [0.35001, 0.85, 0, 0],
                    "9168": [-0.00099, 0.601, 0, 0],
                    "10216": [0.35001, 0.85, 0, 0],
                    "10217": [0.35001, 0.85, 0, 0],
                    "10752": [0.25001, 0.75, 0, 0],
                    "10753": [0.25001, 0.75, 0, 0],
                    "10754": [0.25001, 0.75, 0, 0],
                    "10756": [0.25001, 0.75, 0, 0],
                    "10758": [0.25001, 0.75, 0, 0]
                },
                "Size2-Regular": {
                    "40": [0.65002, 1.15, 0, 0],
                    "41": [0.65002, 1.15, 0, 0],
                    "47": [0.65002, 1.15, 0, 0],
                    "91": [0.65002, 1.15, 0, 0],
                    "92": [0.65002, 1.15, 0, 0],
                    "93": [0.65002, 1.15, 0, 0],
                    "123": [0.65002, 1.15, 0, 0],
                    "125": [0.65002, 1.15, 0, 0],
                    "710": [0, 0.75, 0, 0],
                    "732": [0, 0.75, 0, 0],
                    "770": [0, 0.75, 0, 0],
                    "771": [0, 0.75, 0, 0],
                    "8719": [0.55001, 1.05, 0, 0],
                    "8720": [0.55001, 1.05, 0, 0],
                    "8721": [0.55001, 1.05, 0, 0],
                    "8730": [0.65002, 1.15, 0, 0],
                    "8747": [0.86225, 1.36, 0.44445, 0],
                    "8748": [0.862, 1.36, 0.44445, 0],
                    "8749": [0.862, 1.36, 0.44445, 0],
                    "8750": [0.86225, 1.36, 0.44445, 0],
                    "8896": [0.55001, 1.05, 0, 0],
                    "8897": [0.55001, 1.05, 0, 0],
                    "8898": [0.55001, 1.05, 0, 0],
                    "8899": [0.55001, 1.05, 0, 0],
                    "8968": [0.65002, 1.15, 0, 0],
                    "8969": [0.65002, 1.15, 0, 0],
                    "8970": [0.65002, 1.15, 0, 0],
                    "8971": [0.65002, 1.15, 0, 0],
                    "10216": [0.65002, 1.15, 0, 0],
                    "10217": [0.65002, 1.15, 0, 0],
                    "10752": [0.55001, 1.05, 0, 0],
                    "10753": [0.55001, 1.05, 0, 0],
                    "10754": [0.55001, 1.05, 0, 0],
                    "10756": [0.55001, 1.05, 0, 0],
                    "10758": [0.55001, 1.05, 0, 0]
                },
                "Size3-Regular": {
                    "40": [0.95003, 1.45, 0, 0],
                    "41": [0.95003, 1.45, 0, 0],
                    "47": [0.95003, 1.45, 0, 0],
                    "91": [0.95003, 1.45, 0, 0],
                    "92": [0.95003, 1.45, 0, 0],
                    "93": [0.95003, 1.45, 0, 0],
                    "123": [0.95003, 1.45, 0, 0],
                    "125": [0.95003, 1.45, 0, 0],
                    "710": [0, 0.75, 0, 0],
                    "732": [0, 0.75, 0, 0],
                    "770": [0, 0.75, 0, 0],
                    "771": [0, 0.75, 0, 0],
                    "8730": [0.95003, 1.45, 0, 0],
                    "8968": [0.95003, 1.45, 0, 0],
                    "8969": [0.95003, 1.45, 0, 0],
                    "8970": [0.95003, 1.45, 0, 0],
                    "8971": [0.95003, 1.45, 0, 0],
                    "10216": [0.95003, 1.45, 0, 0],
                    "10217": [0.95003, 1.45, 0, 0]
                },
                "Size4-Regular": {
                    "40": [1.25003, 1.75, 0, 0],
                    "41": [1.25003, 1.75, 0, 0],
                    "47": [1.25003, 1.75, 0, 0],
                    "91": [1.25003, 1.75, 0, 0],
                    "92": [1.25003, 1.75, 0, 0],
                    "93": [1.25003, 1.75, 0, 0],
                    "123": [1.25003, 1.75, 0, 0],
                    "125": [1.25003, 1.75, 0, 0],
                    "710": [0, 0.825, 0, 0],
                    "732": [0, 0.825, 0, 0],
                    "770": [0, 0.825, 0, 0],
                    "771": [0, 0.825, 0, 0],
                    "8730": [1.25003, 1.75, 0, 0],
                    "8968": [1.25003, 1.75, 0, 0],
                    "8969": [1.25003, 1.75, 0, 0],
                    "8970": [1.25003, 1.75, 0, 0],
                    "8971": [1.25003, 1.75, 0, 0],
                    "9115": [0.64502, 1.155, 0, 0],
                    "9116": [1e-05, 0.6, 0, 0],
                    "9117": [0.64502, 1.155, 0, 0],
                    "9118": [0.64502, 1.155, 0, 0],
                    "9119": [1e-05, 0.6, 0, 0],
                    "9120": [0.64502, 1.155, 0, 0],
                    "9121": [0.64502, 1.155, 0, 0],
                    "9122": [-0.00099, 0.601, 0, 0],
                    "9123": [0.64502, 1.155, 0, 0],
                    "9124": [0.64502, 1.155, 0, 0],
                    "9125": [-0.00099, 0.601, 0, 0],
                    "9126": [0.64502, 1.155, 0, 0],
                    "9127": [1e-05, 0.9, 0, 0],
                    "9128": [0.65002, 1.15, 0, 0],
                    "9129": [0.90001, 0, 0, 0],
                    "9130": [0, 0.3, 0, 0],
                    "9131": [1e-05, 0.9, 0, 0],
                    "9132": [0.65002, 1.15, 0, 0],
                    "9133": [0.90001, 0, 0, 0],
                    "9143": [0.88502, 0.915, 0, 0],
                    "10216": [1.25003, 1.75, 0, 0],
                    "10217": [1.25003, 1.75, 0, 0],
                    "57344": [-0.00499, 0.605, 0, 0],
                    "57345": [-0.00499, 0.605, 0, 0],
                    "57680": [0, 0.12, 0, 0],
                    "57681": [0, 0.12, 0, 0],
                    "57682": [0, 0.12, 0, 0],
                    "57683": [0, 0.12, 0, 0]
                },
                "Typewriter-Regular": {
                    "33": [0, 0.61111, 0, 0],
                    "34": [0, 0.61111, 0, 0],
                    "35": [0, 0.61111, 0, 0],
                    "36": [0.08333, 0.69444, 0, 0],
                    "37": [0.08333, 0.69444, 0, 0],
                    "38": [0, 0.61111, 0, 0],
                    "39": [0, 0.61111, 0, 0],
                    "40": [0.08333, 0.69444, 0, 0],
                    "41": [0.08333, 0.69444, 0, 0],
                    "42": [0, 0.52083, 0, 0],
                    "43": [-0.08056, 0.53055, 0, 0],
                    "44": [0.13889, 0.125, 0, 0],
                    "45": [-0.08056, 0.53055, 0, 0],
                    "46": [0, 0.125, 0, 0],
                    "47": [0.08333, 0.69444, 0, 0],
                    "48": [0, 0.61111, 0, 0],
                    "49": [0, 0.61111, 0, 0],
                    "50": [0, 0.61111, 0, 0],
                    "51": [0, 0.61111, 0, 0],
                    "52": [0, 0.61111, 0, 0],
                    "53": [0, 0.61111, 0, 0],
                    "54": [0, 0.61111, 0, 0],
                    "55": [0, 0.61111, 0, 0],
                    "56": [0, 0.61111, 0, 0],
                    "57": [0, 0.61111, 0, 0],
                    "58": [0, 0.43056, 0, 0],
                    "59": [0.13889, 0.43056, 0, 0],
                    "60": [-0.05556, 0.55556, 0, 0],
                    "61": [-0.19549, 0.41562, 0, 0],
                    "62": [-0.05556, 0.55556, 0, 0],
                    "63": [0, 0.61111, 0, 0],
                    "64": [0, 0.61111, 0, 0],
                    "65": [0, 0.61111, 0, 0],
                    "66": [0, 0.61111, 0, 0],
                    "67": [0, 0.61111, 0, 0],
                    "68": [0, 0.61111, 0, 0],
                    "69": [0, 0.61111, 0, 0],
                    "70": [0, 0.61111, 0, 0],
                    "71": [0, 0.61111, 0, 0],
                    "72": [0, 0.61111, 0, 0],
                    "73": [0, 0.61111, 0, 0],
                    "74": [0, 0.61111, 0, 0],
                    "75": [0, 0.61111, 0, 0],
                    "76": [0, 0.61111, 0, 0],
                    "77": [0, 0.61111, 0, 0],
                    "78": [0, 0.61111, 0, 0],
                    "79": [0, 0.61111, 0, 0],
                    "80": [0, 0.61111, 0, 0],
                    "81": [0.13889, 0.61111, 0, 0],
                    "82": [0, 0.61111, 0, 0],
                    "83": [0, 0.61111, 0, 0],
                    "84": [0, 0.61111, 0, 0],
                    "85": [0, 0.61111, 0, 0],
                    "86": [0, 0.61111, 0, 0],
                    "87": [0, 0.61111, 0, 0],
                    "88": [0, 0.61111, 0, 0],
                    "89": [0, 0.61111, 0, 0],
                    "90": [0, 0.61111, 0, 0],
                    "91": [0.08333, 0.69444, 0, 0],
                    "92": [0.08333, 0.69444, 0, 0],
                    "93": [0.08333, 0.69444, 0, 0],
                    "94": [0, 0.61111, 0, 0],
                    "95": [0.09514, 0, 0, 0],
                    "96": [0, 0.61111, 0, 0],
                    "97": [0, 0.43056, 0, 0],
                    "98": [0, 0.61111, 0, 0],
                    "99": [0, 0.43056, 0, 0],
                    "100": [0, 0.61111, 0, 0],
                    "101": [0, 0.43056, 0, 0],
                    "102": [0, 0.61111, 0, 0],
                    "103": [0.22222, 0.43056, 0, 0],
                    "104": [0, 0.61111, 0, 0],
                    "105": [0, 0.61111, 0, 0],
                    "106": [0.22222, 0.61111, 0, 0],
                    "107": [0, 0.61111, 0, 0],
                    "108": [0, 0.61111, 0, 0],
                    "109": [0, 0.43056, 0, 0],
                    "110": [0, 0.43056, 0, 0],
                    "111": [0, 0.43056, 0, 0],
                    "112": [0.22222, 0.43056, 0, 0],
                    "113": [0.22222, 0.43056, 0, 0],
                    "114": [0, 0.43056, 0, 0],
                    "115": [0, 0.43056, 0, 0],
                    "116": [0, 0.55358, 0, 0],
                    "117": [0, 0.43056, 0, 0],
                    "118": [0, 0.43056, 0, 0],
                    "119": [0, 0.43056, 0, 0],
                    "120": [0, 0.43056, 0, 0],
                    "121": [0.22222, 0.43056, 0, 0],
                    "122": [0, 0.43056, 0, 0],
                    "123": [0.08333, 0.69444, 0, 0],
                    "124": [0.08333, 0.69444, 0, 0],
                    "125": [0.08333, 0.69444, 0, 0],
                    "126": [0, 0.61111, 0, 0],
                    "127": [0, 0.61111, 0, 0],
                    "305": [0, 0.43056, 0, 0],
                    "567": [0.22222, 0.43056, 0, 0],
                    "768": [0, 0.61111, 0, 0],
                    "769": [0, 0.61111, 0, 0],
                    "770": [0, 0.61111, 0, 0],
                    "771": [0, 0.61111, 0, 0],
                    "772": [0, 0.56555, 0, 0],
                    "774": [0, 0.61111, 0, 0],
                    "776": [0, 0.61111, 0, 0],
                    "778": [0, 0.61111, 0, 0],
                    "780": [0, 0.56597, 0, 0],
                    "915": [0, 0.61111, 0, 0],
                    "916": [0, 0.61111, 0, 0],
                    "920": [0, 0.61111, 0, 0],
                    "923": [0, 0.61111, 0, 0],
                    "926": [0, 0.61111, 0, 0],
                    "928": [0, 0.61111, 0, 0],
                    "931": [0, 0.61111, 0, 0],
                    "933": [0, 0.61111, 0, 0],
                    "934": [0, 0.61111, 0, 0],
                    "936": [0, 0.61111, 0, 0],
                    "937": [0, 0.61111, 0, 0],
                    "2018": [0, 0.61111, 0, 0],
                    "2019": [0, 0.61111, 0, 0],
                    "8216": [0, 0.61111, 0, 0],
                    "8217": [0, 0.61111, 0, 0],
                    "8242": [0, 0.61111, 0, 0],
                    "9251": [0.11111, 0.21944, 0, 0]
                }
            };

            exports.default = fontMetricsData;
        }, {}], 103: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _utils = require("./utils");

            var _utils2 = _interopRequireDefault(_utils);

            var _ParseError = require("./ParseError");

            var _ParseError2 = _interopRequireDefault(_ParseError);

            var _ParseNode = require("./ParseNode");

            var _ParseNode2 = _interopRequireDefault(_ParseNode);

            var _defineFunction2 = require("./defineFunction");

            var _defineFunction3 = _interopRequireDefault(_defineFunction2);

            require("./functions/phantom");

            require("./functions/operators");

            require("./functions/delimsizing");

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            // WARNING: New functions should be added to src/functions and imported here.

            /** Include this to ensure that all functions are defined. */
            var functions = _defineFunction2._functions;
            exports.default = functions;

            // Define a convenience function that mimcs the old semantics of defineFunction
            // to support existing code so that we can migrate it a little bit at a time.

            var defineFunction = function defineFunction(names, props, handler) // null only if handled in parser
            {
                (0, _defineFunction3.default)({ names: names, props: props, handler: handler });
            };

            // A normal square root
            defineFunction(["\\sqrt"], {
                numArgs: 1,
                numOptionalArgs: 1
            }, function (context, args, optArgs) {
                var index = optArgs[0];
                var body = args[0];
                return {
                    type: "sqrt",
                    body: body,
                    index: index
                };
            });

            // Non-mathy text, possibly in a font
            var textFunctionFonts = {
                "\\text": undefined, "\\textrm": "mathrm", "\\textsf": "mathsf",
                "\\texttt": "mathtt", "\\textnormal": "mathrm", "\\textbf": "mathbf",
                "\\textit": "textit"
            };

            defineFunction(["\\text", "\\textrm", "\\textsf", "\\texttt", "\\textnormal", "\\textbf", "\\textit"], {
                numArgs: 1,
                argTypes: ["text"],
                greediness: 2,
                allowedInText: true
            }, function (context, args) {
                var body = args[0];
                return {
                    type: "text",
                    body: (0, _defineFunction2.ordargument)(body),
                    font: textFunctionFonts[context.funcName]
                };
            });

            // A two-argument custom color
            defineFunction(["\\textcolor"], {
                numArgs: 2,
                allowedInText: true,
                greediness: 3,
                argTypes: ["color", "original"]
            }, function (context, args) {
                var color = args[0];
                var body = args[1];
                return {
                    type: "color",
                    color: color.value,
                    value: (0, _defineFunction2.ordargument)(body)
                };
            });

            // \color is handled in Parser.js's parseImplicitGroup
            defineFunction(["\\color"], {
                numArgs: 1,
                allowedInText: true,
                greediness: 3,
                argTypes: ["color"]
            }, null);

            // colorbox
            defineFunction(["\\colorbox"], {
                numArgs: 2,
                allowedInText: true,
                greediness: 3,
                argTypes: ["color", "text"]
            }, function (context, args) {
                var color = args[0];
                var body = args[1];
                return {
                    type: "enclose",
                    label: context.funcName,
                    backgroundColor: color,
                    body: body
                };
            });

            // fcolorbox
            defineFunction(["\\fcolorbox"], {
                numArgs: 3,
                allowedInText: true,
                greediness: 3,
                argTypes: ["color", "color", "text"]
            }, function (context, args) {
                var borderColor = args[0];
                var backgroundColor = args[1];
                var body = args[2];
                return {
                    type: "enclose",
                    label: context.funcName,
                    backgroundColor: backgroundColor,
                    borderColor: borderColor,
                    body: body
                };
            });

            // An overline
            defineFunction(["\\overline"], {
                numArgs: 1
            }, function (context, args) {
                var body = args[0];
                return {
                    type: "overline",
                    body: body
                };
            });

            // An underline
            defineFunction(["\\underline"], {
                numArgs: 1
            }, function (context, args) {
                var body = args[0];
                return {
                    type: "underline",
                    body: body
                };
            });

            // A box of the width and height
            defineFunction(["\\rule"], {
                numArgs: 2,
                numOptionalArgs: 1,
                argTypes: ["size", "size", "size"]
            }, function (context, args, optArgs) {
                var shift = optArgs[0];
                var width = args[0];
                var height = args[1];
                return {
                    type: "rule",
                    shift: shift && shift.value,
                    width: width.value,
                    height: height.value
                };
            });

            // TODO: In TeX, \mkern only accepts mu-units, and \kern does not accept
            // mu-units. In current KaTeX we relax this; both commands accept any unit.
            defineFunction(["\\kern", "\\mkern"], {
                numArgs: 1,
                argTypes: ["size"]
            }, function (context, args) {
                return {
                    type: "kern",
                    dimension: args[0].value
                };
            });

            // A KaTeX logo
            defineFunction(["\\KaTeX"], {
                numArgs: 0
            }, function (context) {
                return {
                    type: "katex"
                };
            });

            // Math class commands except \mathop
            defineFunction(["\\mathord", "\\mathbin", "\\mathrel", "\\mathopen", "\\mathclose", "\\mathpunct", "\\mathinner"], {
                numArgs: 1
            }, function (context, args) {
                var body = args[0];
                return {
                    type: "mclass",
                    mclass: "m" + context.funcName.substr(5),
                    value: (0, _defineFunction2.ordargument)(body)
                };
            });

            // Build a relation by placing one symbol on top of another
            defineFunction(["\\stackrel"], {
                numArgs: 2
            }, function (context, args) {
                var top = args[0];
                var bottom = args[1];

                var bottomop = new _ParseNode2.default("op", {
                    type: "op",
                    limits: true,
                    alwaysHandleSupSub: true,
                    symbol: false,
                    value: (0, _defineFunction2.ordargument)(bottom)
                }, bottom.mode);

                var supsub = new _ParseNode2.default("supsub", {
                    base: bottomop,
                    sup: top,
                    sub: null
                }, top.mode);

                return {
                    type: "mclass",
                    mclass: "mrel",
                    value: [supsub]
                };
            });

            // \mod-type functions
            defineFunction(["\\bmod"], {
                numArgs: 0
            }, function (context, args) {
                return {
                    type: "mod",
                    modType: "bmod",
                    value: null
                };
            });

            defineFunction(["\\pod", "\\pmod", "\\mod"], {
                numArgs: 1
            }, function (context, args) {
                var body = args[0];
                return {
                    type: "mod",
                    modType: context.funcName.substr(1),
                    value: (0, _defineFunction2.ordargument)(body)
                };
            });

            var fontAliases = {
                "\\Bbb": "\\mathbb",
                "\\bold": "\\mathbf",
                "\\frak": "\\mathfrak"
            };

            // Single-argument color functions
            defineFunction(["\\blue", "\\orange", "\\pink", "\\red", "\\green", "\\gray", "\\purple", "\\blueA", "\\blueB", "\\blueC", "\\blueD", "\\blueE", "\\tealA", "\\tealB", "\\tealC", "\\tealD", "\\tealE", "\\greenA", "\\greenB", "\\greenC", "\\greenD", "\\greenE", "\\goldA", "\\goldB", "\\goldC", "\\goldD", "\\goldE", "\\redA", "\\redB", "\\redC", "\\redD", "\\redE", "\\maroonA", "\\maroonB", "\\maroonC", "\\maroonD", "\\maroonE", "\\purpleA", "\\purpleB", "\\purpleC", "\\purpleD", "\\purpleE", "\\mintA", "\\mintB", "\\mintC", "\\grayA", "\\grayB", "\\grayC", "\\grayD", "\\grayE", "\\grayF", "\\grayG", "\\grayH", "\\grayI", "\\kaBlue", "\\kaGreen"], {
                numArgs: 1,
                allowedInText: true,
                greediness: 3
            }, function (context, args) {
                var body = args[0];
                return {
                    type: "color",
                    color: "katex-" + context.funcName.slice(1),
                    value: (0, _defineFunction2.ordargument)(body)
                };
            });

            // There are 2 flags for operators; whether they produce limits in
            // displaystyle, and whether they are symbols and should grow in
            // displaystyle. These four groups cover the four possible choices.

            // No limits, not symbols
            defineFunction(["\\arcsin", "\\arccos", "\\arctan", "\\arctg", "\\arcctg", "\\arg", "\\ch", "\\cos", "\\cosec", "\\cosh", "\\cot", "\\cotg", "\\coth", "\\csc", "\\ctg", "\\cth", "\\deg", "\\dim", "\\exp", "\\hom", "\\ker", "\\lg", "\\ln", "\\log", "\\sec", "\\sin", "\\sinh", "\\sh", "\\tan", "\\tanh", "\\tg", "\\th"], {
                numArgs: 0
            }, function (context) {
                return {
                    type: "op",
                    limits: false,
                    symbol: false,
                    body: context.funcName
                };
            });

            // Limits, not symbols
            defineFunction(["\\det", "\\gcd", "\\inf", "\\lim", "\\liminf", "\\limsup", "\\max", "\\min", "\\Pr", "\\sup"], {
                numArgs: 0
            }, function (context) {
                return {
                    type: "op",
                    limits: true,
                    symbol: false,
                    body: context.funcName
                };
            });

            // No limits, symbols
            defineFunction(["\\int", "\\iint", "\\iiint", "\\oint"], {
                numArgs: 0
            }, function (context) {
                return {
                    type: "op",
                    limits: false,
                    symbol: true,
                    body: context.funcName
                };
            });

            // Limits, symbols
            defineFunction(["\\coprod", "\\bigvee", "\\bigwedge", "\\biguplus", "\\bigcap", "\\bigcup", "\\intop", "\\prod", "\\sum", "\\bigotimes", "\\bigoplus", "\\bigodot", "\\bigsqcup", "\\smallint"], {
                numArgs: 0
            }, function (context) {
                return {
                    type: "op",
                    limits: true,
                    symbol: true,
                    body: context.funcName
                };
            });

            // \mathop class command
            defineFunction(["\\mathop"], {
                numArgs: 1
            }, function (context, args) {
                var body = args[0];
                return {
                    type: "op",
                    limits: false,
                    symbol: false,
                    value: (0, _defineFunction2.ordargument)(body)
                };
            });

            // Fractions
            defineFunction(["\\dfrac", "\\frac", "\\tfrac", "\\dbinom", "\\binom", "\\tbinom", "\\\\atopfrac"], {
                numArgs: 2,
                greediness: 2
            }, function (context, args) {
                var numer = args[0];
                var denom = args[1];
                var hasBarLine = void 0;
                var leftDelim = null;
                var rightDelim = null;
                var size = "auto";

                switch (context.funcName) {
                    case "\\dfrac":
                    case "\\frac":
                    case "\\tfrac":
                        hasBarLine = true;
                        break;
                    case "\\\\atopfrac":
                        hasBarLine = false;
                        break;
                    case "\\dbinom":
                    case "\\binom":
                    case "\\tbinom":
                        hasBarLine = false;
                        leftDelim = "(";
                        rightDelim = ")";
                        break;
                    default:
                        throw new Error("Unrecognized genfrac command");
                }

                switch (context.funcName) {
                    case "\\dfrac":
                    case "\\dbinom":
                        size = "display";
                        break;
                    case "\\tfrac":
                    case "\\tbinom":
                        size = "text";
                        break;
                }

                return {
                    type: "genfrac",
                    numer: numer,
                    denom: denom,
                    hasBarLine: hasBarLine,
                    leftDelim: leftDelim,
                    rightDelim: rightDelim,
                    size: size
                };
            });

            // Horizontal overlap functions
            defineFunction(["\\mathllap", "\\mathrlap", "\\mathclap"], {
                numArgs: 1,
                allowedInText: true
            }, function (context, args) {
                var body = args[0];
                return {
                    type: "lap",
                    alignment: context.funcName.slice(5),
                    body: body
                };
            });

            // smash, with optional [tb], as in AMS
            defineFunction(["\\smash"], {
                numArgs: 1,
                numOptionalArgs: 1,
                allowedInText: true
            }, function (context, args, optArgs) {
                var smashHeight = false;
                var smashDepth = false;
                var tbArg = optArgs[0];
                if (tbArg) {
                    // Optional [tb] argument is engaged.
                    // ref: amsmath: \renewcommand{\smash}[1][tb]{%
                    //               def\mb@t{\ht}\def\mb@b{\dp}\def\mb@tb{\ht\z@\z@\dp}%
                    var letter = "";
                    for (var i = 0; i < tbArg.value.length; ++i) {
                        letter = tbArg.value[i].value;
                        if (letter === "t") {
                            smashHeight = true;
                        } else if (letter === "b") {
                            smashDepth = true;
                        } else {
                            smashHeight = false;
                            smashDepth = false;
                            break;
                        }
                    }
                } else {
                    smashHeight = true;
                    smashDepth = true;
                }

                var body = args[0];
                return {
                    type: "smash",
                    body: body,
                    smashHeight: smashHeight,
                    smashDepth: smashDepth
                };
            });

            // Sizing functions (handled in Parser.js explicitly, hence no handler)
            defineFunction(["\\tiny", "\\scriptsize", "\\footnotesize", "\\small", "\\normalsize", "\\large", "\\Large", "\\LARGE", "\\huge", "\\Huge"], { numArgs: 0 }, null);

            // Style changing functions (handled in Parser.js explicitly, hence no
            // handler)
            defineFunction(["\\displaystyle", "\\textstyle", "\\scriptstyle", "\\scriptscriptstyle"], { numArgs: 0 }, null);

            // Old font changing functions
            defineFunction(["\\rm", "\\sf", "\\tt", "\\bf", "\\it"], { numArgs: 0 }, null);

            defineFunction([
            // styles
            "\\mathrm", "\\mathit", "\\mathbf",

            // families
            "\\mathbb", "\\mathcal", "\\mathfrak", "\\mathscr", "\\mathsf", "\\mathtt",

            // aliases
            "\\Bbb", "\\bold", "\\frak"], {
                numArgs: 1,
                greediness: 2
            }, function (context, args) {
                var body = args[0];
                var func = context.funcName;
                if (func in fontAliases) {
                    func = fontAliases[func];
                }
                return {
                    type: "font",
                    font: func.slice(1),
                    body: body
                };
            });

            // Accents
            defineFunction(["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot", "\\widehat", "\\widetilde", "\\overrightarrow", "\\overleftarrow", "\\Overrightarrow", "\\overleftrightarrow", "\\overgroup", "\\overlinesegment", "\\overleftharpoon", "\\overrightharpoon"], {
                numArgs: 1
            }, function (context, args) {
                var base = args[0];

                var isStretchy = !_utils2.default.contains(["\\acute", "\\grave", "\\ddot", "\\tilde", "\\bar", "\\breve", "\\check", "\\hat", "\\vec", "\\dot"], context.funcName);

                var isShifty = !isStretchy || _utils2.default.contains(["\\widehat", "\\widetilde"], context.funcName);

                return {
                    type: "accent",
                    label: context.funcName,
                    isStretchy: isStretchy,
                    isShifty: isShifty,
                    base: base
                };
            });

            // Text-mode accents
            defineFunction(["\\'", "\\`", "\\^", "\\~", "\\=", "\\u", "\\.", '\\"', "\\r", "\\H", "\\v"], {
                numArgs: 1,
                allowedInText: true,
                allowedInMath: false
            }, function (context, args) {
                var base = args[0];

                return {
                    type: "accent",
                    label: context.funcName,
                    isStretchy: false,
                    isShifty: true,
                    base: base
                };
            });

            // Horizontal stretchy braces
            defineFunction(["\\overbrace", "\\underbrace"], {
                numArgs: 1
            }, function (context, args) {
                var base = args[0];
                return {
                    type: "horizBrace",
                    label: context.funcName,
                    isOver: /^\\over/.test(context.funcName),
                    base: base
                };
            });

            // Stretchy accents under the body
            defineFunction(["\\underleftarrow", "\\underrightarrow", "\\underleftrightarrow", "\\undergroup", "\\underlinesegment", "\\undertilde"], {
                numArgs: 1
            }, function (context, args) {
                var base = args[0];
                return {
                    type: "accentUnder",
                    label: context.funcName,
                    base: base
                };
            });

            // Stretchy arrows with an optional argument
            defineFunction(["\\xleftarrow", "\\xrightarrow", "\\xLeftarrow", "\\xRightarrow", "\\xleftrightarrow", "\\xLeftrightarrow", "\\xhookleftarrow", "\\xhookrightarrow", "\\xmapsto", "\\xrightharpoondown", "\\xrightharpoonup", "\\xleftharpoondown", "\\xleftharpoonup", "\\xrightleftharpoons", "\\xleftrightharpoons", "\\xLongequal", "\\xtwoheadrightarrow", "\\xtwoheadleftarrow", "\\xLongequal", "\\xtofrom"], {
                numArgs: 1,
                numOptionalArgs: 1
            }, function (context, args, optArgs) {
                var below = optArgs[0];
                var body = args[0];
                return {
                    type: "xArrow", // x for extensible
                    label: context.funcName,
                    body: body,
                    below: below
                };
            });

            // enclose
            defineFunction(["\\cancel", "\\bcancel", "\\xcancel", "\\sout", "\\fbox"], {
                numArgs: 1
            }, function (context, args) {
                var body = args[0];
                return {
                    type: "enclose",
                    label: context.funcName,
                    body: body
                };
            });

            // Infix generalized fractions
            defineFunction(["\\over", "\\choose", "\\atop"], {
                numArgs: 0,
                infix: true
            }, function (context) {
                var replaceWith = void 0;
                switch (context.funcName) {
                    case "\\over":
                        replaceWith = "\\frac";
                        break;
                    case "\\choose":
                        replaceWith = "\\binom";
                        break;
                    case "\\atop":
                        replaceWith = "\\\\atopfrac";
                        break;
                    default:
                        throw new Error("Unrecognized infix genfrac command");
                }
                return {
                    type: "infix",
                    replaceWith: replaceWith,
                    token: context.token
                };
            });

            // Row breaks for aligned data
            defineFunction(["\\\\", "\\cr"], {
                numArgs: 0,
                numOptionalArgs: 1,
                argTypes: ["size"]
            }, function (context, args, optArgs) {
                var size = optArgs[0];
                return {
                    type: "cr",
                    size: size
                };
            });

            // Environment delimiters
            defineFunction(["\\begin", "\\end"], {
                numArgs: 1,
                argTypes: ["text"]
            }, function (context, args) {
                var nameGroup = args[0];
                if (nameGroup.type !== "ordgroup") {
                    throw new _ParseError2.default("Invalid environment name", nameGroup);
                }
                var name = "";
                for (var i = 0; i < nameGroup.value.length; ++i) {
                    name += nameGroup.value[i].value;
                }
                return {
                    type: "environment",
                    name: name,
                    nameGroup: nameGroup
                };
            });

            // Box manipulation
            defineFunction(["\\raisebox"], {
                numArgs: 2,
                argTypes: ["size", "text"],
                allowedInText: true
            }, function (context, args) {
                var amount = args[0];
                var body = args[1];
                return {
                    type: "raisebox",
                    dy: amount,
                    body: body,
                    value: (0, _defineFunction2.ordargument)(body)
                };
            });

            // \verb and \verb* are dealt with directly in Parser.js.
            // If we end up here, it's because of a failure to match the two delimiters
            // in the regex in Lexer.js.  LaTeX raises the following error when \verb is
            // terminated by end of line (or file).
            defineFunction(["\\verb"], {
                numArgs: 0,
                allowedInText: true
            }, function (context) {
                throw new _ParseError2.default("\\verb ended by end of line instead of matching delimiter");
            });
        }, { "./ParseError": 84, "./ParseNode": 85, "./defineFunction": 96, "./functions/delimsizing": 104, "./functions/operators": 105, "./functions/phantom": 106, "./utils": 115 }], 104: [function (require, module, exports) {
            "use strict";

            var _buildCommon = require("../buildCommon");

            var _buildCommon2 = _interopRequireDefault(_buildCommon);

            var _defineFunction = require("../defineFunction");

            var _defineFunction2 = _interopRequireDefault(_defineFunction);

            var _delimiter = require("../delimiter");

            var _delimiter2 = _interopRequireDefault(_delimiter);

            var _mathMLTree = require("../mathMLTree");

            var _mathMLTree2 = _interopRequireDefault(_mathMLTree);

            var _ParseError = require("../ParseError");

            var _ParseError2 = _interopRequireDefault(_ParseError);

            var _utils = require("../utils");

            var _utils2 = _interopRequireDefault(_utils);

            var _buildHTML = require("../buildHTML");

            var html = _interopRequireWildcard(_buildHTML);

            var _buildMathML = require("../buildMathML");

            var mml = _interopRequireWildcard(_buildMathML);

            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj;
                } else {
                    var newObj = {};if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                        }
                    }newObj.default = obj;return newObj;
                }
            }

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            // Extra data needed for the delimiter handler down below
            var delimiterSizes = {
                "\\bigl": { mclass: "mopen", size: 1 },
                "\\Bigl": { mclass: "mopen", size: 2 },
                "\\biggl": { mclass: "mopen", size: 3 },
                "\\Biggl": { mclass: "mopen", size: 4 },
                "\\bigr": { mclass: "mclose", size: 1 },
                "\\Bigr": { mclass: "mclose", size: 2 },
                "\\biggr": { mclass: "mclose", size: 3 },
                "\\Biggr": { mclass: "mclose", size: 4 },
                "\\bigm": { mclass: "mrel", size: 1 },
                "\\Bigm": { mclass: "mrel", size: 2 },
                "\\biggm": { mclass: "mrel", size: 3 },
                "\\Biggm": { mclass: "mrel", size: 4 },
                "\\big": { mclass: "mord", size: 1 },
                "\\Big": { mclass: "mord", size: 2 },
                "\\bigg": { mclass: "mord", size: 3 },
                "\\Bigg": { mclass: "mord", size: 4 }
            };

            var delimiters = ["(", ")", "[", "\\lbrack", "]", "\\rbrack", "\\{", "\\lbrace", "\\}", "\\rbrace", "\\lfloor", "\\rfloor", "\\lceil", "\\rceil", "<", ">", "\\langle", "\\rangle", "\\lt", "\\gt", "\\lvert", "\\rvert", "\\lVert", "\\rVert", "\\lgroup", "\\rgroup", "\\lmoustache", "\\rmoustache", "/", "\\backslash", "|", "\\vert", "\\|", "\\Vert", "\\uparrow", "\\Uparrow", "\\downarrow", "\\Downarrow", "\\updownarrow", "\\Updownarrow", "."];

            // Delimiter functions
            function checkDelimiter(delim, context) {
                if (_utils2.default.contains(delimiters, delim.value)) {
                    return delim;
                } else {
                    throw new _ParseError2.default("Invalid delimiter: '" + delim.value + "' after '" + context.funcName + "'", delim);
                }
            }

            (0, _defineFunction2.default)({
                type: "delimsizing",
                names: ["\\bigl", "\\Bigl", "\\biggl", "\\Biggl", "\\bigr", "\\Bigr", "\\biggr", "\\Biggr", "\\bigm", "\\Bigm", "\\biggm", "\\Biggm", "\\big", "\\Big", "\\bigg", "\\Bigg"],
                props: {
                    numArgs: 1
                },
                handler: function handler(context, args) {
                    var delim = checkDelimiter(args[0], context);

                    return {
                        type: "delimsizing",
                        size: delimiterSizes[context.funcName].size,
                        mclass: delimiterSizes[context.funcName].mclass,
                        value: delim.value
                    };
                },
                htmlBuilder: function htmlBuilder(group, options) {
                    var delim = group.value.value;

                    if (delim === ".") {
                        // Empty delimiters still count as elements, even though they don't
                        // show anything.
                        return _buildCommon2.default.makeSpan([group.value.mclass]);
                    }

                    // Use delimiter.sizedDelim to generate the delimiter.
                    return _delimiter2.default.sizedDelim(delim, group.value.size, options, group.mode, [group.value.mclass]);
                },
                mathmlBuilder: function mathmlBuilder(group) {
                    var children = [];

                    if (group.value.value !== ".") {
                        children.push(mml.makeText(group.value.value, group.mode));
                    }

                    var node = new _mathMLTree2.default.MathNode("mo", children);

                    if (group.value.mclass === "mopen" || group.value.mclass === "mclose") {
                        // Only some of the delimsizing functions act as fences, and they
                        // return "mopen" or "mclose" mclass.
                        node.setAttribute("fence", "true");
                    } else {
                        // Explicitly disable fencing if it's not a fence, to override the
                        // defaults.
                        node.setAttribute("fence", "false");
                    }

                    return node;
                }
            });

            (0, _defineFunction2.default)({
                type: "leftright",
                names: ["\\left", "\\right"],
                props: {
                    numArgs: 1
                },
                handler: function handler(context, args) {
                    var delim = checkDelimiter(args[0], context);

                    // \left and \right are caught somewhere in Parser.js, which is
                    // why this data doesn't match what is in buildHTML.
                    return {
                        type: "leftright",
                        value: delim.value
                    };
                },
                htmlBuilder: function htmlBuilder(group, options) {
                    // Build the inner expression
                    var inner = html.buildExpression(group.value.body, options, true);

                    var innerHeight = 0;
                    var innerDepth = 0;
                    var hadMiddle = false;

                    // Calculate its height and depth
                    for (var i = 0; i < inner.length; i++) {
                        if (inner[i].isMiddle) {
                            hadMiddle = true;
                        } else {
                            innerHeight = Math.max(inner[i].height, innerHeight);
                            innerDepth = Math.max(inner[i].depth, innerDepth);
                        }
                    }

                    // The size of delimiters is the same, regardless of what style we are
                    // in. Thus, to correctly calculate the size of delimiter we need around
                    // a group, we scale down the inner size based on the size.
                    innerHeight *= options.sizeMultiplier;
                    innerDepth *= options.sizeMultiplier;

                    var leftDelim = void 0;
                    if (group.value.left === ".") {
                        // Empty delimiters in \left and \right make null delimiter spaces.
                        leftDelim = html.makeNullDelimiter(options, ["mopen"]);
                    } else {
                        // Otherwise, use leftRightDelim to generate the correct sized
                        // delimiter.
                        leftDelim = _delimiter2.default.leftRightDelim(group.value.left, innerHeight, innerDepth, options, group.mode, ["mopen"]);
                    }
                    // Add it to the beginning of the expression
                    inner.unshift(leftDelim);

                    // Handle middle delimiters
                    if (hadMiddle) {
                        for (var _i = 1; _i < inner.length; _i++) {
                            var middleDelim = inner[_i];
                            if (middleDelim.isMiddle) {
                                // Apply the options that were active when \middle was called
                                inner[_i] = _delimiter2.default.leftRightDelim(middleDelim.isMiddle.value, innerHeight, innerDepth, middleDelim.isMiddle.options, group.mode, []);
                                // Add back spaces shifted into the delimiter
                                var spaces = html.spliceSpaces(middleDelim.children, 0);
                                if (spaces) {
                                    _buildCommon2.default.prependChildren(inner[_i], spaces);
                                }
                            }
                        }
                    }

                    var rightDelim = void 0;
                    // Same for the right delimiter
                    if (group.value.right === ".") {
                        rightDelim = html.makeNullDelimiter(options, ["mclose"]);
                    } else {
                        rightDelim = _delimiter2.default.leftRightDelim(group.value.right, innerHeight, innerDepth, options, group.mode, ["mclose"]);
                    }
                    // Add it to the end of the expression.
                    inner.push(rightDelim);

                    return _buildCommon2.default.makeSpan(["minner"], inner, options);
                },
                mathmlBuilder: function mathmlBuilder(group, options) {
                    var inner = mml.buildExpression(group.value.body, options);

                    if (group.value.left !== ".") {
                        var leftNode = new _mathMLTree2.default.MathNode("mo", [mml.makeText(group.value.left, group.mode)]);

                        leftNode.setAttribute("fence", "true");

                        inner.unshift(leftNode);
                    }

                    if (group.value.right !== ".") {
                        var rightNode = new _mathMLTree2.default.MathNode("mo", [mml.makeText(group.value.right, group.mode)]);

                        rightNode.setAttribute("fence", "true");

                        inner.push(rightNode);
                    }

                    var outerNode = new _mathMLTree2.default.MathNode("mrow", inner);

                    return outerNode;
                }
            });

            (0, _defineFunction2.default)({
                type: "middle",
                names: ["\\middle"],
                props: {
                    numArgs: 1
                },
                handler: function handler(context, args) {
                    var delim = checkDelimiter(args[0], context);
                    if (!context.parser.leftrightDepth) {
                        throw new _ParseError2.default("\\middle without preceding \\left", delim);
                    }

                    return {
                        type: "middle",
                        value: delim.value
                    };
                },
                htmlBuilder: function htmlBuilder(group, options) {
                    var middleDelim = void 0;
                    if (group.value.value === ".") {
                        middleDelim = html.makeNullDelimiter(options, []);
                    } else {
                        middleDelim = _delimiter2.default.sizedDelim(group.value.value, 1, options, group.mode, []);
                        middleDelim.isMiddle = { value: group.value.value, options: options };
                    }
                    return middleDelim;
                },
                mathmlBuilder: function mathmlBuilder(group, options) {
                    var middleNode = new _mathMLTree2.default.MathNode("mo", [mml.makeText(group.value.middle, group.mode)]);
                    middleNode.setAttribute("fence", "true");
                    return middleNode;
                }
            });
        }, { "../ParseError": 84, "../buildCommon": 91, "../buildHTML": 92, "../buildMathML": 93, "../defineFunction": 96, "../delimiter": 97, "../mathMLTree": 108, "../utils": 115 }], 105: [function (require, module, exports) {
            "use strict";

            var _defineFunction = require("../defineFunction");

            var _defineFunction2 = _interopRequireDefault(_defineFunction);

            var _buildCommon = require("../buildCommon");

            var _buildCommon2 = _interopRequireDefault(_buildCommon);

            var _mathMLTree = require("../mathMLTree");

            var _mathMLTree2 = _interopRequireDefault(_mathMLTree);

            var _domTree = require("../domTree");

            var _domTree2 = _interopRequireDefault(_domTree);

            var _buildHTML = require("../buildHTML");

            var html = _interopRequireWildcard(_buildHTML);

            var _buildMathML = require("../buildMathML");

            var mml = _interopRequireWildcard(_buildMathML);

            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj;
                } else {
                    var newObj = {};if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                        }
                    }newObj.default = obj;return newObj;
                }
            }

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            // \operatorname
            // amsopn.dtx: \mathop{#1\kern\z@\operator@font#3}\newmcodes@
            (0, _defineFunction2.default)({
                type: "operatorname",
                names: ["\\operatorname"],
                props: {
                    numArgs: 1
                },
                handler: function handler(context, args) {
                    var body = args[0];
                    return {
                        type: "operatorname",
                        value: (0, _defineFunction.ordargument)(body)
                    };
                },

                htmlBuilder: function htmlBuilder(group, options) {
                    var output = [];
                    if (group.value.value.length > 0) {
                        var letter = "";
                        var mode = "";

                        // Consolidate Greek letter function names into symbol characters.
                        var temp = html.buildExpression(group.value.value, options, true);

                        // All we want from temp are the letters. With them, we'll
                        // create a text operator similar to \tan or \cos.
                        for (var i = 0; i < temp.length; i++) {
                            letter = temp[i].value;

                            // In the amsopn package, \newmcodes@ changes four
                            // characters, *-/:’, from math operators back into text.
                            // Given what is in temp, we have to address two of them.
                            letter = letter.replace(/\u2212/, "-"); // minus => hyphen
                            letter = letter.replace(/\u2217/, "*");

                            // Use math mode for Greek letters
                            mode = /[\u0391-\u03D7]/.test(letter) ? "math" : "text";
                            output.push(_buildCommon2.default.mathsym(letter, mode));
                        }
                    }
                    return _buildCommon2.default.makeSpan(["mop"], output, options);
                },

                mathmlBuilder: function mathmlBuilder(group, options) {
                    // The steps taken here are similar to the html version.
                    var output = [];
                    if (group.value.value.length > 0) {
                        var temp = mml.buildExpression(group.value.value, options);

                        var word = "";
                        for (var i = 0; i < temp.length; i++) {
                            word += temp[i].children[0].text;
                        }
                        word = word.replace(/\u2212/g, "-");
                        word = word.replace(/\u2217/g, "*");
                        output = [new _mathMLTree2.default.TextNode(word)];
                    }
                    var identifier = new _mathMLTree2.default.MathNode("mi", output);
                    identifier.setAttribute("mathvariant", "normal");

                    var operator = new _mathMLTree2.default.MathNode("mo", [mml.makeText("&ApplyFunction;", "text")]);

                    return new _domTree2.default.documentFragment([identifier, operator]);
                }
            });
        }, { "../buildCommon": 91, "../buildHTML": 92, "../buildMathML": 93, "../defineFunction": 96, "../domTree": 98, "../mathMLTree": 108 }], 106: [function (require, module, exports) {
            "use strict";

            var _defineFunction = require("../defineFunction");

            var _defineFunction2 = _interopRequireDefault(_defineFunction);

            var _buildCommon = require("../buildCommon");

            var _buildCommon2 = _interopRequireDefault(_buildCommon);

            var _mathMLTree = require("../mathMLTree");

            var _mathMLTree2 = _interopRequireDefault(_mathMLTree);

            var _buildHTML = require("../buildHTML");

            var html = _interopRequireWildcard(_buildHTML);

            var _buildMathML = require("../buildMathML");

            var mml = _interopRequireWildcard(_buildMathML);

            function _interopRequireWildcard(obj) {
                if (obj && obj.__esModule) {
                    return obj;
                } else {
                    var newObj = {};if (obj != null) {
                        for (var key in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
                        }
                    }newObj.default = obj;return newObj;
                }
            }

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            (0, _defineFunction2.default)({
                type: "phantom",
                names: ["\\phantom"],
                props: {
                    numArgs: 1
                },
                handler: function handler(context, args) {
                    var body = args[0];
                    return {
                        type: "phantom",
                        value: (0, _defineFunction.ordargument)(body)
                    };
                },
                htmlBuilder: function htmlBuilder(group, options) {
                    var elements = html.buildExpression(group.value.value, options.withPhantom(), false);

                    // \phantom isn't supposed to affect the elements it contains.
                    // See "color" for more details.
                    return new _buildCommon2.default.makeFragment(elements);
                },
                mathmlBuilder: function mathmlBuilder(group, options) {
                    var inner = mml.buildExpression(group.value.value, options);
                    return new _mathMLTree2.default.MathNode("mphantom", inner);
                }
            });

            (0, _defineFunction2.default)({
                type: "hphantom",
                names: ["\\hphantom"],
                props: {
                    numArgs: 1
                },
                handler: function handler(context, args) {
                    var body = args[0];
                    return {
                        type: "hphantom",
                        value: (0, _defineFunction.ordargument)(body),
                        body: body
                    };
                },
                htmlBuilder: function htmlBuilder(group, options) {
                    var node = _buildCommon2.default.makeSpan([], [html.buildGroup(group.value.body, options.withPhantom())]);
                    node.height = 0;
                    node.depth = 0;
                    if (node.children) {
                        for (var i = 0; i < node.children.length; i++) {
                            node.children[i].height = 0;
                            node.children[i].depth = 0;
                        }
                    }

                    // See smash for comment re: use of makeVList
                    node = _buildCommon2.default.makeVList([{ type: "elem", elem: node }], "firstBaseline", null, options);

                    return node;
                },
                mathmlBuilder: function mathmlBuilder(group, options) {
                    var inner = mml.buildExpression(group.value.value, options);
                    var node = new _mathMLTree2.default.MathNode("mphantom", inner);
                    node.setAttribute("height", "0px");
                    return node;
                }
            });

            (0, _defineFunction2.default)({
                type: "vphantom",
                names: ["\\vphantom"],
                props: {
                    numArgs: 1
                },
                handler: function handler(context, args) {
                    var body = args[0];
                    return {
                        type: "vphantom",
                        value: (0, _defineFunction.ordargument)(body),
                        body: body
                    };
                },
                htmlBuilder: function htmlBuilder(group, options) {
                    var inner = _buildCommon2.default.makeSpan(["inner"], [html.buildGroup(group.value.body, options.withPhantom())]);
                    var fix = _buildCommon2.default.makeSpan(["fix"], []);
                    return _buildCommon2.default.makeSpan(["mord", "rlap"], [inner, fix], options);
                },
                mathmlBuilder: function mathmlBuilder(group, options) {
                    var inner = mml.buildExpression(group.value.value, options);
                    var node = new _mathMLTree2.default.MathNode("mphantom", inner);
                    node.setAttribute("width", "0px");
                    return node;
                }
            });
        }, { "../buildCommon": 91, "../buildHTML": 92, "../buildMathML": 93, "../defineFunction": 96, "../mathMLTree": 108 }], 107: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _symbols = require("./symbols");

            var _symbols2 = _interopRequireDefault(_symbols);

            var _utils = require("./utils");

            var _utils2 = _interopRequireDefault(_utils);

            var _Token = require("./Token");

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * Provides context to macros defined by functions. Implemented by
             * MacroExpander.
             */

            /** Macro tokens (in reverse order). */
            var builtinMacros = {};
            /**
             * Predefined macros for KaTeX.
             * This can be used to define some commands in terms of others.
             */

            exports.default = builtinMacros;

            // This function might one day accept an additional argument and do more things.

            function defineMacro(name, body) {
                builtinMacros[name] = body;
            }

            //////////////////////////////////////////////////////////////////////
            // basics
            defineMacro("\\bgroup", "{");
            defineMacro("\\egroup", "}");
            defineMacro("\\begingroup", "{");
            defineMacro("\\endgroup", "}");

            // We don't distinguish between math and nonmath kerns.
            // (In TeX, the mu unit works only with \mkern.)
            defineMacro("\\mkern", "\\kern");

            // \llap and \rlap render their contents in text mode
            defineMacro("\\llap", "\\mathllap{\\textrm{#1}}");
            defineMacro("\\rlap", "\\mathrlap{\\textrm{#1}}");
            defineMacro("\\clap", "\\mathclap{\\textrm{#1}}");

            //////////////////////////////////////////////////////////////////////
            // amsmath.sty
            // http://mirrors.concertpass.com/tex-archive/macros/latex/required/amsmath/amsmath.pdf

            // \def\overset#1#2{\binrel@{#2}\binrel@@{\mathop{\kern\z@#2}\limits^{#1}}}
            defineMacro("\\overset", "\\mathop{#2}\\limits^{#1}");
            defineMacro("\\underset", "\\mathop{#2}\\limits_{#1}");

            // \newcommand{\boxed}[1]{\fbox{\m@th$\displaystyle#1$}}
            defineMacro("\\boxed", "\\fbox{\\displaystyle{#1}}");

            // \def\iff{\DOTSB\;\Longleftrightarrow\;}
            // \def\implies{\DOTSB\;\Longrightarrow\;}
            // \def\impliedby{\DOTSB\;\Longleftarrow\;}
            defineMacro("\\iff", "\\DOTSB\\;\\Longleftrightarrow\\;");
            defineMacro("\\implies", "\\DOTSB\\;\\Longrightarrow\\;");
            defineMacro("\\impliedby", "\\DOTSB\\;\\Longleftarrow\\;");

            // AMSMath's automatic \dots, based on \mdots@@ macro.
            var dotsByToken = {
                ',': '\\dotsc',
                '\\not': '\\dotsb',
                // \keybin@ checks for the following:
                '+': '\\dotsb',
                '=': '\\dotsb',
                '<': '\\dotsb',
                '>': '\\dotsb',
                '-': '\\dotsb',
                '*': '\\dotsb',
                ':': '\\dotsb',
                // Symbols whose definition starts with \DOTSB:
                '\\DOTSB': '\\dotsb',
                '\\coprod': '\\dotsb',
                '\\bigvee': '\\dotsb',
                '\\bigwedge': '\\dotsb',
                '\\biguplus': '\\dotsb',
                '\\bigcap': '\\dotsb',
                '\\bigcup': '\\dotsb',
                '\\prod': '\\dotsb',
                '\\sum': '\\dotsb',
                '\\bigotimes': '\\dotsb',
                '\\bigoplus': '\\dotsb',
                '\\bigodot': '\\dotsb',
                '\\bigsqcup': '\\dotsb',
                '\\implies': '\\dotsb',
                '\\impliedby': '\\dotsb',
                '\\And': '\\dotsb',
                '\\longrightarrow': '\\dotsb',
                '\\Longrightarrow': '\\dotsb',
                '\\longleftarrow': '\\dotsb',
                '\\Longleftarrow': '\\dotsb',
                '\\longleftrightarrow': '\\dotsb',
                '\\Longleftrightarrow': '\\dotsb',
                '\\mapsto': '\\dotsb',
                '\\longmapsto': '\\dotsb',
                '\\hookrightarrow': '\\dotsb',
                '\\iff': '\\dotsb',
                '\\doteq': '\\dotsb',
                // Symbols whose definition starts with \mathbin:
                '\\mathbin': '\\dotsb',
                '\\bmod': '\\dotsb',
                // Symbols whose definition starts with \mathrel:
                '\\mathrel': '\\dotsb',
                '\\relbar': '\\dotsb',
                '\\Relbar': '\\dotsb',
                '\\xrightarrow': '\\dotsb',
                '\\xleftarrow': '\\dotsb',
                // Symbols whose definition starts with \DOTSI:
                '\\DOTSI': '\\dotsi',
                '\\int': '\\dotsi',
                '\\oint': '\\dotsi',
                '\\iint': '\\dotsi',
                '\\iiint': '\\dotsi',
                '\\iiiint': '\\dotsi',
                '\\idotsint': '\\dotsi',
                // Symbols whose definition starts with \DOTSX:
                '\\DOTSX': '\\dotsx'
            };

            defineMacro("\\dots", function (context) {
                // TODO: If used in text mode, should expand to \textellipsis.
                // However, in KaTeX, \textellipsis and \ldots behave the same
                // (in text mode), and it's unlikely we'd see any of the math commands
                // that affect the behavior of \dots when in text mode.  So fine for now
                // (until we support \ifmmode ... \else ... \fi).
                var thedots = '\\dotso';
                var next = context.expandAfterFuture().text;
                if (next in dotsByToken) {
                    thedots = dotsByToken[next];
                } else if (next.substr(0, 4) === '\\not') {
                    thedots = '\\dotsb';
                } else if (next in _symbols2.default.math) {
                    if (_utils2.default.contains(['bin', 'rel'], _symbols2.default.math[next].group)) {
                        thedots = '\\dotsb';
                    }
                }
                return thedots;
            });

            var spaceAfterDots = {
                // \rightdelim@ checks for the following:
                ')': true,
                ']': true,
                '\\rbrack': true,
                '\\}': true,
                '\\rbrace': true,
                '\\rangle': true,
                '\\rceil': true,
                '\\rfloor': true,
                '\\rgroup': true,
                '\\rmoustache': true,
                '\\right': true,
                '\\bigr': true,
                '\\biggr': true,
                '\\Bigr': true,
                '\\Biggr': true,
                // \extra@ also tests for the following:
                '$': true,
                // \extrap@ checks for the following:
                ';': true,
                '.': true,
                ',': true
            };

            defineMacro("\\dotso", function (context) {
                var next = context.future().text;
                if (next in spaceAfterDots) {
                    return "\\ldots\\,";
                } else {
                    return "\\ldots";
                }
            });

            defineMacro("\\dotsc", function (context) {
                var next = context.future().text;
                // \dotsc uses \extra@ but not \extrap@, instead specially checking for
                // ';' and '.', but doesn't check for ','.
                if (next in spaceAfterDots && next !== ',') {
                    return "\\ldots\\,";
                } else {
                    return "\\ldots";
                }
            });

            defineMacro("\\cdots", function (context) {
                var next = context.future().text;
                if (next in spaceAfterDots) {
                    return "\\@cdots\\,";
                } else {
                    return "\\@cdots";
                }
            });

            defineMacro("\\dotsb", "\\cdots");
            defineMacro("\\dotsm", "\\cdots");
            defineMacro("\\dotsi", "\\!\\cdots");
            // amsmath doesn't actually define \dotsx, but \dots followed by a macro
            // starting with \DOTSX implies \dotso, and then \extra@ detects this case
            // and forces the added `\,`.
            defineMacro("\\dotsx", "\\ldots\\,");

            // \let\DOTSI\relax
            // \let\DOTSB\relax
            // \let\DOTSX\relax
            defineMacro("\\DOTSI", "\\relax");
            defineMacro("\\DOTSB", "\\relax");
            defineMacro("\\DOTSX", "\\relax");

            // http://texdoc.net/texmf-dist/doc/latex/amsmath/amsmath.pdf
            defineMacro("\\thinspace", "\\,"); //   \let\thinspace\,
            defineMacro("\\medspace", "\\:"); //   \let\medspace\:
            defineMacro("\\thickspace", "\\;"); //   \let\thickspace\;

            //////////////////////////////////////////////////////////////////////
            // LaTeX source2e

            // \DeclareRobustCommand\hspace{\@ifstar\@hspacer\@hspace}
            // \def\@hspace#1{\hskip  #1\relax}
            // KaTeX doesn't do line breaks, so \hspace is the same as \kern
            defineMacro("\\hspace", "\\kern{#1}");

            //////////////////////////////////////////////////////////////////////
            // mathtools.sty

            //\providecommand\ordinarycolon{:}
            defineMacro("\\ordinarycolon", ":");
            //\def\vcentcolon{\mathrel{\mathop\ordinarycolon}}
            //TODO(edemaine): Not yet centered. Fix via \raisebox or #726
            defineMacro("\\vcentcolon", "\\mathrel{\\mathop\\ordinarycolon}");
            // \providecommand*\dblcolon{\vcentcolon\mathrel{\mkern-.9mu}\vcentcolon}
            defineMacro("\\dblcolon", "\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon");
            // \providecommand*\coloneqq{\vcentcolon\mathrel{\mkern-1.2mu}=}
            defineMacro("\\coloneqq", "\\vcentcolon\\mathrel{\\mkern-1.2mu}=");
            // \providecommand*\Coloneqq{\dblcolon\mathrel{\mkern-1.2mu}=}
            defineMacro("\\Coloneqq", "\\dblcolon\\mathrel{\\mkern-1.2mu}=");
            // \providecommand*\coloneq{\vcentcolon\mathrel{\mkern-1.2mu}\mathrel{-}}
            defineMacro("\\coloneq", "\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}");
            // \providecommand*\Coloneq{\dblcolon\mathrel{\mkern-1.2mu}\mathrel{-}}
            defineMacro("\\Coloneq", "\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}");
            // \providecommand*\eqqcolon{=\mathrel{\mkern-1.2mu}\vcentcolon}
            defineMacro("\\eqqcolon", "=\\mathrel{\\mkern-1.2mu}\\vcentcolon");
            // \providecommand*\Eqqcolon{=\mathrel{\mkern-1.2mu}\dblcolon}
            defineMacro("\\Eqqcolon", "=\\mathrel{\\mkern-1.2mu}\\dblcolon");
            // \providecommand*\eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\vcentcolon}
            defineMacro("\\eqcolon", "\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon");
            // \providecommand*\Eqcolon{\mathrel{-}\mathrel{\mkern-1.2mu}\dblcolon}
            defineMacro("\\Eqcolon", "\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon");
            // \providecommand*\colonapprox{\vcentcolon\mathrel{\mkern-1.2mu}\approx}
            defineMacro("\\colonapprox", "\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx");
            // \providecommand*\Colonapprox{\dblcolon\mathrel{\mkern-1.2mu}\approx}
            defineMacro("\\Colonapprox", "\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx");
            // \providecommand*\colonsim{\vcentcolon\mathrel{\mkern-1.2mu}\sim}
            defineMacro("\\colonsim", "\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim");
            // \providecommand*\Colonsim{\dblcolon\mathrel{\mkern-1.2mu}\sim}
            defineMacro("\\Colonsim", "\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim");

            //////////////////////////////////////////////////////////////////////
            // colonequals.sty

            // Alternate names for mathtools's macros:
            defineMacro("\\ratio", "\\vcentcolon");
            defineMacro("\\coloncolon", "\\dblcolon");
            defineMacro("\\colonequals", "\\coloneqq");
            defineMacro("\\coloncolonequals", "\\Coloneqq");
            defineMacro("\\equalscolon", "\\eqqcolon");
            defineMacro("\\equalscoloncolon", "\\Eqqcolon");
            defineMacro("\\colonminus", "\\coloneq");
            defineMacro("\\coloncolonminus", "\\Coloneq");
            defineMacro("\\minuscolon", "\\eqcolon");
            defineMacro("\\minuscoloncolon", "\\Eqcolon");
            // \colonapprox name is same in mathtools and colonequals.
            defineMacro("\\coloncolonapprox", "\\Colonapprox");
            // \colonsim name is same in mathtools and colonequals.
            defineMacro("\\coloncolonsim", "\\Colonsim");

            // Additional macros, implemented by analogy with mathtools definitions:
            defineMacro("\\simcolon", "\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon");
            defineMacro("\\simcoloncolon", "\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon");
            defineMacro("\\approxcolon", "\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon");
            defineMacro("\\approxcoloncolon", "\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon");
        }, { "./Token": 90, "./symbols": 112, "./utils": 115 }], 108: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

            var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

            var _createClass2 = require("babel-runtime/helpers/createClass");

            var _createClass3 = _interopRequireDefault(_createClass2);

            var _utils = require("./utils");

            var _utils2 = _interopRequireDefault(_utils);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * This node represents a general purpose MathML node of any type. The
             * constructor requires the type of node to create (for example, `"mo"` or
             * `"mspace"`, corresponding to `<mo>` and `<mspace>` tags).
             */
            var MathNode = function () {
                function MathNode(type, children) {
                    (0, _classCallCheck3.default)(this, MathNode);

                    this.type = type;
                    this.attributes = {};
                    this.children = children || [];
                }

                /**
                 * Sets an attribute on a MathML node. MathML depends on attributes to convey a
                 * semantic content, so this is used heavily.
                 */

                (0, _createClass3.default)(MathNode, [{
                    key: "setAttribute",
                    value: function setAttribute(name, value) {
                        this.attributes[name] = value;
                    }

                    /**
                     * Converts the math node into a MathML-namespaced DOM element.
                     */

                }, {
                    key: "toNode",
                    value: function toNode() {
                        var node = document.createElementNS("http://www.w3.org/1998/Math/MathML", this.type);

                        for (var attr in this.attributes) {
                            if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                                node.setAttribute(attr, this.attributes[attr]);
                            }
                        }

                        for (var i = 0; i < this.children.length; i++) {
                            node.appendChild(this.children[i].toNode());
                        }

                        return node;
                    }

                    /**
                     * Converts the math node into an HTML markup string.
                     */

                }, {
                    key: "toMarkup",
                    value: function toMarkup() {
                        var markup = "<" + this.type;

                        // Add the attributes
                        for (var attr in this.attributes) {
                            if (Object.prototype.hasOwnProperty.call(this.attributes, attr)) {
                                markup += " " + attr + "=\"";
                                markup += _utils2.default.escape(this.attributes[attr]);
                                markup += "\"";
                            }
                        }

                        markup += ">";

                        for (var i = 0; i < this.children.length; i++) {
                            markup += this.children[i].toMarkup();
                        }

                        markup += "</" + this.type + ">";

                        return markup;
                    }
                }]);
                return MathNode;
            }();

            /**
             * This node represents a piece of text.
             */
            /**
             * These objects store data about MathML nodes. This is the MathML equivalent
             * of the types in domTree.js. Since MathML handles its own rendering, and
             * since we're mainly using MathML to improve accessibility, we don't manage
             * any of the styling state that the plain DOM nodes do.
             *
             * The `toNode` and `toMarkup` functions work simlarly to how they do in
             * domTree.js, creating namespaced DOM nodes and HTML text markup respectively.
             */

            var TextNode = function () {
                function TextNode(text) {
                    (0, _classCallCheck3.default)(this, TextNode);

                    this.text = text;
                }

                /**
                 * Converts the text node into a DOM text node.
                 */

                (0, _createClass3.default)(TextNode, [{
                    key: "toNode",
                    value: function toNode() {
                        return document.createTextNode(this.text);
                    }

                    /**
                     * Converts the text node into HTML markup (which is just the text itself).
                     */

                }, {
                    key: "toMarkup",
                    value: function toMarkup() {
                        return _utils2.default.escape(this.text);
                    }
                }]);
                return TextNode;
            }();

            exports.default = {
                MathNode: MathNode,
                TextNode: TextNode
            };
        }, { "./utils": 115, "babel-runtime/helpers/classCallCheck": 8, "babel-runtime/helpers/createClass": 9 }], 109: [function (require, module, exports) {
            'use strict';

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _Parser = require('./Parser');

            var _Parser2 = _interopRequireDefault(_Parser);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * Parses an expression using a Parser, then returns the parsed result.
             */
            var parseTree = function parseTree(toParse, settings) {
                if (!(typeof toParse === 'string' || toParse instanceof String)) {
                    throw new TypeError('KaTeX can only parse string typed expression');
                }
                var parser = new _Parser2.default(toParse, settings);

                return parser.parse();
            }; /**
                * Provides a single function for parsing an expression using a Parser
                * TODO(emily): Remove this
                */

            exports.default = parseTree;
        }, { "./Parser": 86 }], 110: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");

            var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

            var _domTree = require("./domTree");

            var _domTree2 = _interopRequireDefault(_domTree);

            var _buildCommon = require("./buildCommon");

            var _buildCommon2 = _interopRequireDefault(_buildCommon);

            var _mathMLTree = require("./mathMLTree");

            var _mathMLTree2 = _interopRequireDefault(_mathMLTree);

            var _utils = require("./utils");

            var _utils2 = _interopRequireDefault(_utils);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            /**
             * This file provides support to buildMathML.js and buildHTML.js
             * for stretchy wide elements rendered from SVG files
             * and other CSS trickery.
             */

            var stretchyCodePoint = {
                widehat: "^",
                widetilde: "~",
                undertilde: "~",
                overleftarrow: "\u2190",
                underleftarrow: "\u2190",
                xleftarrow: "\u2190",
                overrightarrow: "\u2192",
                underrightarrow: "\u2192",
                xrightarrow: "\u2192",
                underbrace: "\u23B5",
                overbrace: "\u23DE",
                overleftrightarrow: "\u2194",
                underleftrightarrow: "\u2194",
                xleftrightarrow: "\u2194",
                Overrightarrow: "\u21D2",
                xRightarrow: "\u21D2",
                overleftharpoon: "\u21BC",
                xleftharpoonup: "\u21BC",
                overrightharpoon: "\u21C0",
                xrightharpoonup: "\u21C0",
                xLeftarrow: "\u21D0",
                xLeftrightarrow: "\u21D4",
                xhookleftarrow: "\u21A9",
                xhookrightarrow: "\u21AA",
                xmapsto: "\u21A6",
                xrightharpoondown: "\u21C1",
                xleftharpoondown: "\u21BD",
                xrightleftharpoons: "\u21CC",
                xleftrightharpoons: "\u21CB",
                xtwoheadleftarrow: "\u219E",
                xtwoheadrightarrow: "\u21A0",
                xLongequal: "=",
                xtofrom: "\u21C4"
            };

            var mathMLnode = function mathMLnode(label) {
                var node = new _mathMLTree2.default.MathNode("mo", [new _mathMLTree2.default.TextNode(stretchyCodePoint[label.substr(1)])]);
                node.setAttribute("stretchy", "true");
                return node;
            };

            // Many of the KaTeX SVG images have been adapted from glyphs in KaTeX fonts.
            // Copyright (c) 2009-2010, Design Science, Inc. (<www.mathjax.org>)
            // Copyright (c) 2014-2017 Khan Academy (<www.khanacademy.org>)
            // Licensed under the SIL Open Font License, Version 1.1.
            // See \nhttp://scripts.sil.org/OFL

            // Nested SVGs
            //    Many of the KaTeX SVG images contain a nested SVG. This is done to
            //    achieve a stretchy image while avoiding distortion of arrowheads or
            //    brace corners.

            //    The inner SVG typically contains a very long (400 em) arrow.

            //    The outer SVG acts like a window that exposes only part of the inner SVG.
            //    The outer SVG will grow or shrink to match the dimensions set by CSS.

            //    The inner SVG always has a longer, thinner aspect ratio than the outer
            //    SVG. After the inner SVG fills 100% of the height of the outer SVG,
            //    there is a long arrow shaft left over. That left-over shaft is not shown.
            //    Instead, it is sliced off because the inner SVG is set to
            //    "preserveAspectRatio='... slice'".

            //    Thus, the reader sees an arrow that matches the subject matter width
            //    without distortion.

            //    Some functions, such as \cancel, need to vary their aspect ratio. These
            //    functions do not get the nested SVG treatment.

            // Second Brush Stroke
            //    Low resolution monitors struggle to display images in fine detail.
            //    So browsers apply anti-aliasing. A long straight arrow shaft therefore
            //    will sometimes appear as if it has a blurred edge.

            //    To mitigate this, these SVG files contain a second "brush-stroke" on the
            //    arrow shafts. That is, a second long thin rectangular SVG path has been
            //    written directly on top of each arrow shaft. This reinforcement causes
            //    some of the screen pixels to display as black instead of the anti-aliased
            //    gray pixel that a  single path would generate. So we get arrow shafts
            //    whose edges appear to be sharper.

            // In the katexImagesData object just below, the dimensions all
            // correspond to path geometry inside the relevant SVG.
            // For example, \overrightarrow uses the same arrowhead as glyph U+2192
            // from the KaTeX Main font. The scaling factor is 1000.
            // That is, inside the font, that arrowhead is 522 units tall, which
            // corresponds to 0.522 em inside the document.

            var katexImagesData = {
                //   path(s), minWidth, height, align
                overrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
                overleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
                underrightarrow: [["rightarrow"], 0.888, 522, "xMaxYMin"],
                underleftarrow: [["leftarrow"], 0.888, 522, "xMinYMin"],
                xrightarrow: [["rightarrow"], 1.469, 522, "xMaxYMin"],
                xleftarrow: [["leftarrow"], 1.469, 522, "xMinYMin"],
                Overrightarrow: [["doublerightarrow"], 0.888, 560, "xMaxYMin"],
                xRightarrow: [["doublerightarrow"], 1.526, 560, "xMaxYMin"],
                xLeftarrow: [["doubleleftarrow"], 1.526, 560, "xMinYMin"],
                overleftharpoon: [["leftharpoon"], 0.888, 522, "xMinYMin"],
                xleftharpoonup: [["leftharpoon"], 0.888, 522, "xMinYMin"],
                xleftharpoondown: [["leftharpoondown"], 0.888, 522, "xMinYMin"],
                overrightharpoon: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
                xrightharpoonup: [["rightharpoon"], 0.888, 522, "xMaxYMin"],
                xrightharpoondown: [["rightharpoondown"], 0.888, 522, "xMaxYMin"],
                xLongequal: [["longequal"], 0.888, 334, "xMinYMin"],
                xtwoheadleftarrow: [["twoheadleftarrow"], 0.888, 334, "xMinYMin"],
                xtwoheadrightarrow: [["twoheadrightarrow"], 0.888, 334, "xMaxYMin"],

                overleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
                overbrace: [["leftbrace", "midbrace", "rightbrace"], 1.6, 548],
                underbrace: [["leftbraceunder", "midbraceunder", "rightbraceunder"], 1.6, 548],
                underleftrightarrow: [["leftarrow", "rightarrow"], 0.888, 522],
                xleftrightarrow: [["leftarrow", "rightarrow"], 1.75, 522],
                xLeftrightarrow: [["doubleleftarrow", "doublerightarrow"], 1.75, 560],
                xrightleftharpoons: [["leftharpoondownplus", "rightharpoonplus"], 1.75, 716],
                xleftrightharpoons: [["leftharpoonplus", "rightharpoondownplus"], 1.75, 716],
                xhookleftarrow: [["leftarrow", "righthook"], 1.08, 522],
                xhookrightarrow: [["lefthook", "rightarrow"], 1.08, 522],
                overlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
                underlinesegment: [["leftlinesegment", "rightlinesegment"], 0.888, 522],
                overgroup: [["leftgroup", "rightgroup"], 0.888, 342],
                undergroup: [["leftgroupunder", "rightgroupunder"], 0.888, 342],
                xmapsto: [["leftmapsto", "rightarrow"], 1.5, 522],
                xtofrom: [["leftToFrom", "rightToFrom"], 1.75, 528]
            };

            var groupLength = function groupLength(arg) {
                if (arg.type === "ordgroup") {
                    return arg.value.length;
                } else {
                    return 1;
                }
            };

            var svgSpan = function svgSpan(group, options) {
                // Create a span with inline SVG for the element.
                var label = group.value.label.substr(1);
                var attributes = [];
                var height = void 0;
                var viewBoxWidth = 400000; // default
                var minWidth = 0;
                var path = void 0;
                var pathName = void 0;
                var svgNode = void 0;
                var classNames = [];

                if (_utils2.default.contains(["widehat", "widetilde", "undertilde"], label)) {
                    // There are four SVG images available for each function.
                    // Choose a taller image when there are more characters.
                    var numChars = groupLength(group.value.base);
                    var viewBoxHeight = void 0;

                    if (numChars > 5) {
                        viewBoxHeight = label === "widehat" ? 420 : 312;
                        viewBoxWidth = label === "widehat" ? 2364 : 2340;
                        // Next get the span height, in 1000 ems
                        height = label === "widehat" ? 0.42 : 0.34;
                        pathName = (label === "widehat" ? "widehat" : "tilde") + "4";
                    } else {
                        var imgIndex = [1, 1, 2, 2, 3, 3][numChars];
                        if (label === "widehat") {
                            viewBoxWidth = [0, 1062, 2364, 2364, 2364][imgIndex];
                            viewBoxHeight = [0, 239, 300, 360, 420][imgIndex];
                            height = [0, 0.24, 0.3, 0.3, 0.36, 0.42][imgIndex];
                            pathName = "widehat" + imgIndex;
                        } else {
                            viewBoxWidth = [0, 600, 1033, 2339, 2340][imgIndex];
                            viewBoxHeight = [0, 260, 286, 306, 312][imgIndex];
                            height = [0, 0.26, 0.286, 0.3, 0.306, 0.34][imgIndex];
                            pathName = "tilde" + imgIndex;
                        }
                    }
                    path = new _domTree2.default.pathNode(pathName);
                    attributes.push(["width", "100%"]);
                    attributes.push(["height", height + "em"]);
                    attributes.push(["viewBox", "0 0 " + viewBoxWidth + " " + viewBoxHeight]);
                    attributes.push(["preserveAspectRatio", "none"]);

                    svgNode = new _domTree2.default.svgNode([path], attributes);
                } else {
                    var width = void 0;
                    var align = void 0;

                    var _katexImagesData$labe = (0, _slicedToArray3.default)(katexImagesData[label], 4),
                        paths = _katexImagesData$labe[0],
                        gWidth = _katexImagesData$labe[1],
                        vbHeight = _katexImagesData$labe[2],
                        alignOne = _katexImagesData$labe[3];

                    var numSvgChildren = paths.length;
                    var innerSVGs = [];
                    height = vbHeight / 1000;
                    minWidth = gWidth;

                    for (var i = 0; i < numSvgChildren; i++) {
                        path = new _domTree2.default.pathNode(paths[i]);
                        attributes = [];

                        if (numSvgChildren === 1) {
                            width = "400em";
                            align = alignOne;
                        } else if (numSvgChildren === 2) {
                            // small overlap to prevent a 1 pixel gap.
                            if (i > 0) {
                                attributes.push(["x", "50%"]);
                            }
                            width = ["50.1%", "50%"][i];
                            align = ["xMinYMin", "xMaxYMin"][i];
                        } else {
                            // 3 inner SVGs, as in a brace
                            if (i > 0) {
                                attributes.push(["x", [null, "25%", "74.9%"][i]]);
                            }
                            width = ["25.5%", "50%", "25.1%"][i];
                            align = ["xMinYMin", "xMidYMin", "xMaxYMin"][i];
                        }

                        attributes.push(["width", width]);
                        attributes.push(["height", height + "em"]);
                        attributes.push(["viewBox", "0 0 " + viewBoxWidth + " " + vbHeight]);
                        attributes.push(["preserveAspectRatio", align + " slice"]);

                        if (numSvgChildren > 1) {
                            innerSVGs.push(new _domTree2.default.svgNode([path], attributes));
                        } else {
                            // The single svgChild is a child of a hide-tail span, not the
                            // child of another svg.
                            svgNode = new _domTree2.default.svgNode([path], attributes);
                            classNames.push("hide-tail");
                        }
                    }
                    if (numSvgChildren > 1) {
                        attributes = [["width", "100%"], ["height", height + "em"]];
                        svgNode = new _domTree2.default.svgNode(innerSVGs, attributes);
                    }
                }

                var span = _buildCommon2.default.makeSpan(classNames, [svgNode], options);
                // Note that we are returning span.depth = 0.
                // Any adjustments relative to the baseline must be done in buildHTML.
                span.height = height;
                span.style.height = height + "em";
                if (minWidth > 0) {
                    span.style.minWidth = minWidth + "em";
                }

                return span;
            };

            var encloseSpan = function encloseSpan(inner, label, pad, options) {
                // Return an image span for \cancel, \bcancel, \xcancel, or \fbox
                var img = void 0;
                var totalHeight = inner.height + inner.depth + 2 * pad;

                if (/(fbox)|(color)/.test(label)) {
                    img = _buildCommon2.default.makeSpan(["stretchy", label], [], options);

                    if (label === "fbox" && options.color) {
                        img.style.borderColor = options.getColor();
                    }
                } else {
                    // \cancel, \bcancel, or \xcancel
                    // Since \cancel's SVG is inline and it omits the viewBox attribute,
                    // its stroke-width will not vary with span area.

                    var attributes = [["x1", "0"]];
                    var lines = [];

                    if (label !== "cancel") {
                        attributes.push(["y1", "0"]);
                        attributes.push(["x2", "100%"]);
                        attributes.push(["y2", "100%"]);
                        attributes.push(["stroke-width", "0.046em"]);
                        lines.push(new _domTree2.default.lineNode(attributes));
                    }

                    if (label === "xcancel") {
                        attributes = [["x1", "0"]]; // start a second line.
                    }

                    if (label !== "bcancel") {
                        attributes.push(["y1", "100%"]);
                        attributes.push(["x2", "100%"]);
                        attributes.push(["y2", "0"]);
                        attributes.push(["stroke-width", "0.046em"]);
                        lines.push(new _domTree2.default.lineNode(attributes));
                    }

                    attributes = [["width", "100%"], ["height", totalHeight + "em"]];
                    var svgNode = new _domTree2.default.svgNode(lines, attributes);

                    img = _buildCommon2.default.makeSpan([], [svgNode], options);
                }

                img.height = totalHeight;
                img.style.height = totalHeight + "em";

                return img;
            };

            exports.default = {
                encloseSpan: encloseSpan,
                mathMLnode: mathMLnode,
                svgSpan: svgSpan
            };
        }, { "./buildCommon": 91, "./domTree": 98, "./mathMLTree": 108, "./utils": 115, "babel-runtime/helpers/slicedToArray": 10 }], 111: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * This file provides support to domTree.js
             * It's a storehouse of path geometry for SVG images.
             */

            var path = {
                // sqrtMain path geometry is from glyph U221A in the font KaTeX Main
                sqrtMain: "M95 622c-2.667 0-7.167-2.667-13.5\n-8S72 604 72 600c0-2 .333-3.333 1-4 1.333-2.667 23.833-20.667 67.5-54s\n65.833-50.333 66.5-51c1.333-1.333 3-2 5-2 4.667 0 8.667 3.333 12 10l173\n378c.667 0 35.333-71 104-213s137.5-285 206.5-429S812 17.333 812 14c5.333\n-9.333 12-14 20-14h399166v40H845.272L620 507 385 993c-2.667 4.667-9 7-19\n7-6 0-10-1-12-3L160 575l-65 47zM834 0h399166v40H845z",

                // size1 is from glyph U221A in the font KaTeX_Size1-Regular
                sqrtSize1: "M263 601c.667 0 18 39.667 52 119s68.167\n 158.667 102.5 238 51.833 119.333 52.5 120C810 373.333 980.667 17.667 982 11\nc4.667-7.333 11-11 19-11h398999v40H1012.333L741 607c-38.667 80.667-84 175-136\n 283s-89.167 185.333-111.5 232-33.833 70.333-34.5 71c-4.667 4.667-12.333 7-23\n 7l-12-1-109-253c-72.667-168-109.333-252-110-252-10.667 8-22 16.667-34 26-22\n 17.333-33.333 26-34 26l-26-26 76-59 76-60zM1001 0h398999v40H1012z",

                // size2 is from glyph U221A in the font KaTeX_Size2-Regular
                sqrtSize2: "M1001 0h398999v40H1013.084S929.667 308 749\n 880s-277 876.333-289 913c-4.667 4.667-12.667 7-24 7h-12c-1.333-3.333-3.667\n-11.667-7-25-35.333-125.333-106.667-373.333-214-744-10 12-21 25-33 39l-32 39\nc-6-5.333-15-14-27-26l25-30c26.667-32.667 52-63 76-91l52-60 208 722c56-175.333\n 126.333-397.333 211-666s153.833-488.167 207.5-658.5C944.167 129.167 975 32.667\n 983 10c4-6.667 10-10 18-10zm0 0h398999v40H1013z",

                // size3 is from glyph U221A in the font KaTeX_Size3-Regular
                sqrtSize3: "M424 2398c-1.333-.667-38.5-172-111.5-514 S202.667 1370.667 202\n 1370c0-2-10.667 14.333-32 49-4.667 7.333-9.833 15.667-15.5 25s-9.833 16-12.5\n 20l-5 7c-4-3.333-8.333-7.667-13-13l-13-13 76-122 77-121 209 968c0-2 84.667\n-361.667 254-1079C896.333 373.667 981.667 13.333 983 10c4-6.667 10-10 18-10\nh398999v40H1014.622S927.332 418.667 742 1206c-185.333 787.333-279.333 1182.333\n-282 1185-2 6-10 9-24 9-8 0-12-.667-12-2zM1001 0h398999v40H1014z",

                // size4 is from glyph U221A in the font KaTeX_Size4-Regular
                sqrtSize4: "M473 2713C812.333 913.667 982.333 13 983 11c3.333-7.333 9.333\n-11 18-11h399110v40H1017.698S927.168 518 741.5 1506C555.833 2494 462 2989 460\n 2991c-2 6-10 9-24 9-8 0-12-.667-12-2s-5.333-32-16-92c-50.667-293.333-119.667\n-693.333-207-1200 0-1.333-5.333 8.667-16 30l-32 64-16 33-26-26 76-153 77-151\nc.667.667 35.667 202 105 604 67.333 400.667 102 602.667 104 606z\nM1001 0h398999v40H1017z",

                // The doubleleftarrow geometry is from glyph U+21D0 in the font KaTeX Main
                doubleleftarrow: "M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",

                // doublerightarrow is from glyph U+21D2 in font KaTeX Main
                doublerightarrow: "M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",

                // leftarrow is from glyph U+2190 in font KaTeX Main
                leftarrow: "M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",

                // overbrace is from glyphs U+23A9/23A8/23A7 in font KaTeX_Size4-Regular
                leftbrace: "M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",

                leftbraceunder: "M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",

                // overgroup is from the MnSymbol package (public domain)
                leftgroup: "M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",

                leftgroupunder: "M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",

                // Harpoons are from glyph U+21BD in font KaTeX Main
                leftharpoon: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",

                leftharpoonplus: "M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",

                leftharpoondown: "M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",

                leftharpoondownplus: "M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",

                // hook is from glyph U+21A9 in font KaTeX Main
                lefthook: "M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",

                leftlinesegment: "M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",

                leftmapsto: "M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",

                // tofrom is from glyph U+21C4 in font KaTeX AMS Regular
                leftToFrom: "M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",

                longequal: "M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",

                midbrace: "M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",

                midbraceunder: "M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",

                rightarrow: "M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",

                rightbrace: "M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",

                rightbraceunder: "M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",

                rightgroup: "M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",

                rightgroupunder: "M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",

                rightharpoon: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",

                rightharpoonplus: "M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",

                rightharpoondown: "M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",

                rightharpoondownplus: "M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",

                righthook: "M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",

                rightlinesegment: "M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",

                rightToFrom: "M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",

                // twoheadleftarrow is from glyph U+219E in font KaTeX AMS Regular
                twoheadleftarrow: "M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",

                twoheadrightarrow: "M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",

                // tilde1 is a modified version of a glyph from the MnSymbol package
                tilde1: "M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",

                // ditto tilde2, tilde3, & tilde4
                tilde2: "M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",

                tilde3: "M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",

                tilde4: "M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",

                // widehat1 is a modified version of a glyph from the MnSymbol package
                widehat1: "M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",

                // ditto widehat2, widehat3, & widehat4
                widehat2: "M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",

                widehat3: "M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",

                widehat4: "M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z"
            };

            exports.default = {
                path: path
            };
        }, {}], 112: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            /**
             * This file holds a list of all no-argument functions and single-character
             * symbols (like 'a' or ';').
             *
             * For each of the symbols, there are three properties they can have:
             * - font (required): the font to be used for this symbol. Either "main" (the
                 normal font), or "ams" (the ams fonts).
             * - group (required): the ParseNode group type the symbol should have (i.e.
                 "textord", "mathord", etc).
                 See https://github.com/Khan/KaTeX/wiki/Examining-TeX#group-types
             * - replace: the character that this symbol or function should be
             *   replaced with (i.e. "\phi" has a replace value of "\u03d5", the phi
             *   character in the main font).
             *
             * The outermost map in the table indicates what mode the symbols should be
             * accepted in (e.g. "math" or "text").
             */

            var symbols = {
                "math": {},
                "text": {}
            };
            exports.default = symbols;

            /** `acceptUnicodeChar = true` is only applicable if `replace` is set. */

            function defineSymbol(mode, font, group, replace, name, acceptUnicodeChar) {
                symbols[mode][name] = { font: font, group: group, replace: replace };

                if (acceptUnicodeChar && replace) {
                    symbols[mode][replace] = symbols[mode][name];
                }
            }

            // Some abbreviations for commonly used strings.
            // This helps minify the code, and also spotting typos using jshint.

            // modes:
            var math = "math";
            var text = "text";

            // fonts:
            var main = "main";
            var ams = "ams";

            // groups:
            var accent = "accent";
            var bin = "bin";
            var close = "close";
            var inner = "inner";
            var mathord = "mathord";
            var op = "op";
            var open = "open";
            var punct = "punct";
            var rel = "rel";
            var spacing = "spacing";
            var textord = "textord";

            // Now comes the symbol table

            // Relation Symbols
            defineSymbol(math, main, rel, "\u2261", "\\equiv");
            defineSymbol(math, main, rel, "\u227A", "\\prec");
            defineSymbol(math, main, rel, "\u227B", "\\succ");
            defineSymbol(math, main, rel, "\u223C", "\\sim");
            defineSymbol(math, main, rel, "\u22A5", "\\perp");
            defineSymbol(math, main, rel, "\u2AAF", "\\preceq");
            defineSymbol(math, main, rel, "\u2AB0", "\\succeq");
            defineSymbol(math, main, rel, "\u2243", "\\simeq");
            defineSymbol(math, main, rel, "\u2223", "\\mid");
            defineSymbol(math, main, rel, "\u226A", "\\ll");
            defineSymbol(math, main, rel, "\u226B", "\\gg");
            defineSymbol(math, main, rel, "\u224D", "\\asymp");
            defineSymbol(math, main, rel, "\u2225", "\\parallel");
            defineSymbol(math, main, rel, "\u22C8", "\\bowtie");
            defineSymbol(math, main, rel, "\u2323", "\\smile");
            defineSymbol(math, main, rel, "\u2291", "\\sqsubseteq");
            defineSymbol(math, main, rel, "\u2292", "\\sqsupseteq");
            defineSymbol(math, main, rel, "\u2250", "\\doteq");
            defineSymbol(math, main, rel, "\u2322", "\\frown");
            defineSymbol(math, main, rel, "\u220B", "\\ni");
            defineSymbol(math, main, rel, "\u221D", "\\propto");
            defineSymbol(math, main, rel, "\u22A2", "\\vdash");
            defineSymbol(math, main, rel, "\u22A3", "\\dashv");
            defineSymbol(math, main, rel, "\u220B", "\\owns");

            // Punctuation
            defineSymbol(math, main, punct, ".", "\\ldotp");
            defineSymbol(math, main, punct, "\u22C5", "\\cdotp");

            // Misc Symbols
            defineSymbol(math, main, textord, "#", "\\#");
            defineSymbol(text, main, textord, "#", "\\#");
            defineSymbol(math, main, textord, "&", "\\&");
            defineSymbol(text, main, textord, "&", "\\&");
            defineSymbol(math, main, textord, "\u2135", "\\aleph");
            defineSymbol(math, main, textord, "\u2200", "\\forall");
            defineSymbol(math, main, textord, "\u210F", "\\hbar");
            defineSymbol(math, main, textord, "\u2203", "\\exists");
            defineSymbol(math, main, textord, "\u2207", "\\nabla");
            defineSymbol(math, main, textord, "\u266D", "\\flat");
            defineSymbol(math, main, textord, "\u2113", "\\ell");
            defineSymbol(math, main, textord, "\u266E", "\\natural");
            defineSymbol(math, main, textord, "\u2663", "\\clubsuit");
            defineSymbol(math, main, textord, "\u2118", "\\wp");
            defineSymbol(math, main, textord, "\u266F", "\\sharp");
            defineSymbol(math, main, textord, "\u2662", "\\diamondsuit");
            defineSymbol(math, main, textord, "\u211C", "\\Re");
            defineSymbol(math, main, textord, "\u2661", "\\heartsuit");
            defineSymbol(math, main, textord, "\u2111", "\\Im");
            defineSymbol(math, main, textord, "\u2660", "\\spadesuit");

            // Math and Text
            defineSymbol(math, main, textord, "\u2020", "\\dag");
            defineSymbol(text, main, textord, "\u2020", "\\dag");
            defineSymbol(text, main, textord, "\u2020", "\\textdagger");
            defineSymbol(math, main, textord, "\u2021", "\\ddag");
            defineSymbol(text, main, textord, "\u2021", "\\ddag");
            defineSymbol(text, main, textord, "\u2020", "\\textdaggerdbl");

            // Large Delimiters
            defineSymbol(math, main, close, "\u23B1", "\\rmoustache");
            defineSymbol(math, main, open, "\u23B0", "\\lmoustache");
            defineSymbol(math, main, close, "\u27EF", "\\rgroup");
            defineSymbol(math, main, open, "\u27EE", "\\lgroup");

            // Binary Operators
            defineSymbol(math, main, bin, "\u2213", "\\mp");
            defineSymbol(math, main, bin, "\u2296", "\\ominus");
            defineSymbol(math, main, bin, "\u228E", "\\uplus");
            defineSymbol(math, main, bin, "\u2293", "\\sqcap");
            defineSymbol(math, main, bin, "\u2217", "\\ast");
            defineSymbol(math, main, bin, "\u2294", "\\sqcup");
            defineSymbol(math, main, bin, "\u25EF", "\\bigcirc");
            defineSymbol(math, main, bin, "\u2219", "\\bullet");
            defineSymbol(math, main, bin, "\u2021", "\\ddagger");
            defineSymbol(math, main, bin, "\u2240", "\\wr");
            defineSymbol(math, main, bin, "\u2A3F", "\\amalg");
            defineSymbol(math, main, bin, "&", "\\And"); // from amsmath

            // Arrow Symbols
            defineSymbol(math, main, rel, "\u27F5", "\\longleftarrow");
            defineSymbol(math, main, rel, "\u21D0", "\\Leftarrow");
            defineSymbol(math, main, rel, "\u27F8", "\\Longleftarrow");
            defineSymbol(math, main, rel, "\u27F6", "\\longrightarrow");
            defineSymbol(math, main, rel, "\u21D2", "\\Rightarrow");
            defineSymbol(math, main, rel, "\u27F9", "\\Longrightarrow");
            defineSymbol(math, main, rel, "\u2194", "\\leftrightarrow");
            defineSymbol(math, main, rel, "\u27F7", "\\longleftrightarrow");
            defineSymbol(math, main, rel, "\u21D4", "\\Leftrightarrow");
            defineSymbol(math, main, rel, "\u27FA", "\\Longleftrightarrow");
            defineSymbol(math, main, rel, "\u21A6", "\\mapsto");
            defineSymbol(math, main, rel, "\u27FC", "\\longmapsto");
            defineSymbol(math, main, rel, "\u2197", "\\nearrow");
            defineSymbol(math, main, rel, "\u21A9", "\\hookleftarrow");
            defineSymbol(math, main, rel, "\u21AA", "\\hookrightarrow");
            defineSymbol(math, main, rel, "\u2198", "\\searrow");
            defineSymbol(math, main, rel, "\u21BC", "\\leftharpoonup");
            defineSymbol(math, main, rel, "\u21C0", "\\rightharpoonup");
            defineSymbol(math, main, rel, "\u2199", "\\swarrow");
            defineSymbol(math, main, rel, "\u21BD", "\\leftharpoondown");
            defineSymbol(math, main, rel, "\u21C1", "\\rightharpoondown");
            defineSymbol(math, main, rel, "\u2196", "\\nwarrow");
            defineSymbol(math, main, rel, "\u21CC", "\\rightleftharpoons");

            // AMS Negated Binary Relations
            defineSymbol(math, ams, rel, "\u226E", "\\nless");
            defineSymbol(math, ams, rel, "\uE010", "\\nleqslant");
            defineSymbol(math, ams, rel, "\uE011", "\\nleqq");
            defineSymbol(math, ams, rel, "\u2A87", "\\lneq");
            defineSymbol(math, ams, rel, "\u2268", "\\lneqq");
            defineSymbol(math, ams, rel, "\uE00C", "\\lvertneqq");
            defineSymbol(math, ams, rel, "\u22E6", "\\lnsim");
            defineSymbol(math, ams, rel, "\u2A89", "\\lnapprox");
            defineSymbol(math, ams, rel, "\u2280", "\\nprec");
            defineSymbol(math, ams, rel, "\u22E0", "\\npreceq");
            defineSymbol(math, ams, rel, "\u22E8", "\\precnsim");
            defineSymbol(math, ams, rel, "\u2AB9", "\\precnapprox");
            defineSymbol(math, ams, rel, "\u2241", "\\nsim");
            defineSymbol(math, ams, rel, "\uE006", "\\nshortmid");
            defineSymbol(math, ams, rel, "\u2224", "\\nmid");
            defineSymbol(math, ams, rel, "\u22AC", "\\nvdash");
            defineSymbol(math, ams, rel, "\u22AD", "\\nvDash");
            defineSymbol(math, ams, rel, "\u22EA", "\\ntriangleleft");
            defineSymbol(math, ams, rel, "\u22EC", "\\ntrianglelefteq");
            defineSymbol(math, ams, rel, "\u228A", "\\subsetneq");
            defineSymbol(math, ams, rel, "\uE01A", "\\varsubsetneq");
            defineSymbol(math, ams, rel, "\u2ACB", "\\subsetneqq");
            defineSymbol(math, ams, rel, "\uE017", "\\varsubsetneqq");
            defineSymbol(math, ams, rel, "\u226F", "\\ngtr");
            defineSymbol(math, ams, rel, "\uE00F", "\\ngeqslant");
            defineSymbol(math, ams, rel, "\uE00E", "\\ngeqq");
            defineSymbol(math, ams, rel, "\u2A88", "\\gneq");
            defineSymbol(math, ams, rel, "\u2269", "\\gneqq");
            defineSymbol(math, ams, rel, "\uE00D", "\\gvertneqq");
            defineSymbol(math, ams, rel, "\u22E7", "\\gnsim");
            defineSymbol(math, ams, rel, "\u2A8A", "\\gnapprox");
            defineSymbol(math, ams, rel, "\u2281", "\\nsucc");
            defineSymbol(math, ams, rel, "\u22E1", "\\nsucceq");
            defineSymbol(math, ams, rel, "\u22E9", "\\succnsim");
            defineSymbol(math, ams, rel, "\u2ABA", "\\succnapprox");
            defineSymbol(math, ams, rel, "\u2246", "\\ncong");
            defineSymbol(math, ams, rel, "\uE007", "\\nshortparallel");
            defineSymbol(math, ams, rel, "\u2226", "\\nparallel");
            defineSymbol(math, ams, rel, "\u22AF", "\\nVDash");
            defineSymbol(math, ams, rel, "\u22EB", "\\ntriangleright");
            defineSymbol(math, ams, rel, "\u22ED", "\\ntrianglerighteq");
            defineSymbol(math, ams, rel, "\uE018", "\\nsupseteqq");
            defineSymbol(math, ams, rel, "\u228B", "\\supsetneq");
            defineSymbol(math, ams, rel, "\uE01B", "\\varsupsetneq");
            defineSymbol(math, ams, rel, "\u2ACC", "\\supsetneqq");
            defineSymbol(math, ams, rel, "\uE019", "\\varsupsetneqq");
            defineSymbol(math, ams, rel, "\u22AE", "\\nVdash");
            defineSymbol(math, ams, rel, "\u2AB5", "\\precneqq");
            defineSymbol(math, ams, rel, "\u2AB6", "\\succneqq");
            defineSymbol(math, ams, rel, "\uE016", "\\nsubseteqq");
            defineSymbol(math, ams, bin, "\u22B4", "\\unlhd");
            defineSymbol(math, ams, bin, "\u22B5", "\\unrhd");

            // AMS Negated Arrows
            defineSymbol(math, ams, rel, "\u219A", "\\nleftarrow");
            defineSymbol(math, ams, rel, "\u219B", "\\nrightarrow");
            defineSymbol(math, ams, rel, "\u21CD", "\\nLeftarrow");
            defineSymbol(math, ams, rel, "\u21CF", "\\nRightarrow");
            defineSymbol(math, ams, rel, "\u21AE", "\\nleftrightarrow");
            defineSymbol(math, ams, rel, "\u21CE", "\\nLeftrightarrow");

            // AMS Misc
            defineSymbol(math, ams, rel, "\u25B3", "\\vartriangle");
            defineSymbol(math, ams, textord, "\u210F", "\\hslash");
            defineSymbol(math, ams, textord, "\u25BD", "\\triangledown");
            defineSymbol(math, ams, textord, "\u25CA", "\\lozenge");
            defineSymbol(math, ams, textord, "\u24C8", "\\circledS");
            defineSymbol(math, ams, textord, "\xAE", "\\circledR");
            defineSymbol(text, ams, textord, "\xAE", "\\circledR");
            defineSymbol(math, ams, textord, "\u2221", "\\measuredangle");
            defineSymbol(math, ams, textord, "\u2204", "\\nexists");
            defineSymbol(math, ams, textord, "\u2127", "\\mho");
            defineSymbol(math, ams, textord, "\u2132", "\\Finv");
            defineSymbol(math, ams, textord, "\u2141", "\\Game");
            defineSymbol(math, ams, textord, "k", "\\Bbbk");
            defineSymbol(math, ams, textord, "\u2035", "\\backprime");
            defineSymbol(math, ams, textord, "\u25B2", "\\blacktriangle");
            defineSymbol(math, ams, textord, "\u25BC", "\\blacktriangledown");
            defineSymbol(math, ams, textord, "\u25A0", "\\blacksquare");
            defineSymbol(math, ams, textord, "\u29EB", "\\blacklozenge");
            defineSymbol(math, ams, textord, "\u2605", "\\bigstar");
            defineSymbol(math, ams, textord, "\u2222", "\\sphericalangle");
            defineSymbol(math, ams, textord, "\u2201", "\\complement");
            defineSymbol(math, ams, textord, "\xF0", "\\eth");
            defineSymbol(math, ams, textord, "\u2571", "\\diagup");
            defineSymbol(math, ams, textord, "\u2572", "\\diagdown");
            defineSymbol(math, ams, textord, "\u25A1", "\\square");
            defineSymbol(math, ams, textord, "\u25A1", "\\Box");
            defineSymbol(math, ams, textord, "\u25CA", "\\Diamond");
            defineSymbol(math, ams, textord, "\xA5", "\\yen");
            defineSymbol(math, ams, textord, "\u2713", "\\checkmark");
            defineSymbol(text, ams, textord, "\u2713", "\\checkmark");

            // AMS Hebrew
            defineSymbol(math, ams, textord, "\u2136", "\\beth");
            defineSymbol(math, ams, textord, "\u2138", "\\daleth");
            defineSymbol(math, ams, textord, "\u2137", "\\gimel");

            // AMS Greek
            defineSymbol(math, ams, textord, "\u03DD", "\\digamma");
            defineSymbol(math, ams, textord, "\u03F0", "\\varkappa");

            // AMS Delimiters
            defineSymbol(math, ams, open, "\u250C", "\\ulcorner");
            defineSymbol(math, ams, close, "\u2510", "\\urcorner");
            defineSymbol(math, ams, open, "\u2514", "\\llcorner");
            defineSymbol(math, ams, close, "\u2518", "\\lrcorner");

            // AMS Binary Relations
            defineSymbol(math, ams, rel, "\u2266", "\\leqq");
            defineSymbol(math, ams, rel, "\u2A7D", "\\leqslant");
            defineSymbol(math, ams, rel, "\u2A95", "\\eqslantless");
            defineSymbol(math, ams, rel, "\u2272", "\\lesssim");
            defineSymbol(math, ams, rel, "\u2A85", "\\lessapprox");
            defineSymbol(math, ams, rel, "\u224A", "\\approxeq");
            defineSymbol(math, ams, bin, "\u22D6", "\\lessdot");
            defineSymbol(math, ams, rel, "\u22D8", "\\lll");
            defineSymbol(math, ams, rel, "\u2276", "\\lessgtr");
            defineSymbol(math, ams, rel, "\u22DA", "\\lesseqgtr");
            defineSymbol(math, ams, rel, "\u2A8B", "\\lesseqqgtr");
            defineSymbol(math, ams, rel, "\u2251", "\\doteqdot");
            defineSymbol(math, ams, rel, "\u2253", "\\risingdotseq");
            defineSymbol(math, ams, rel, "\u2252", "\\fallingdotseq");
            defineSymbol(math, ams, rel, "\u223D", "\\backsim");
            defineSymbol(math, ams, rel, "\u22CD", "\\backsimeq");
            defineSymbol(math, ams, rel, "\u2AC5", "\\subseteqq");
            defineSymbol(math, ams, rel, "\u22D0", "\\Subset");
            defineSymbol(math, ams, rel, "\u228F", "\\sqsubset");
            defineSymbol(math, ams, rel, "\u227C", "\\preccurlyeq");
            defineSymbol(math, ams, rel, "\u22DE", "\\curlyeqprec");
            defineSymbol(math, ams, rel, "\u227E", "\\precsim");
            defineSymbol(math, ams, rel, "\u2AB7", "\\precapprox");
            defineSymbol(math, ams, rel, "\u22B2", "\\vartriangleleft");
            defineSymbol(math, ams, rel, "\u22B4", "\\trianglelefteq");
            defineSymbol(math, ams, rel, "\u22A8", "\\vDash");
            defineSymbol(math, ams, rel, "\u22AA", "\\Vvdash");
            defineSymbol(math, ams, rel, "\u2323", "\\smallsmile");
            defineSymbol(math, ams, rel, "\u2322", "\\smallfrown");
            defineSymbol(math, ams, rel, "\u224F", "\\bumpeq");
            defineSymbol(math, ams, rel, "\u224E", "\\Bumpeq");
            defineSymbol(math, ams, rel, "\u2267", "\\geqq");
            defineSymbol(math, ams, rel, "\u2A7E", "\\geqslant");
            defineSymbol(math, ams, rel, "\u2A96", "\\eqslantgtr");
            defineSymbol(math, ams, rel, "\u2273", "\\gtrsim");
            defineSymbol(math, ams, rel, "\u2A86", "\\gtrapprox");
            defineSymbol(math, ams, bin, "\u22D7", "\\gtrdot");
            defineSymbol(math, ams, rel, "\u22D9", "\\ggg");
            defineSymbol(math, ams, rel, "\u2277", "\\gtrless");
            defineSymbol(math, ams, rel, "\u22DB", "\\gtreqless");
            defineSymbol(math, ams, rel, "\u2A8C", "\\gtreqqless");
            defineSymbol(math, ams, rel, "\u2256", "\\eqcirc");
            defineSymbol(math, ams, rel, "\u2257", "\\circeq");
            defineSymbol(math, ams, rel, "\u225C", "\\triangleq");
            defineSymbol(math, ams, rel, "\u223C", "\\thicksim");
            defineSymbol(math, ams, rel, "\u2248", "\\thickapprox");
            defineSymbol(math, ams, rel, "\u2AC6", "\\supseteqq");
            defineSymbol(math, ams, rel, "\u22D1", "\\Supset");
            defineSymbol(math, ams, rel, "\u2290", "\\sqsupset");
            defineSymbol(math, ams, rel, "\u227D", "\\succcurlyeq");
            defineSymbol(math, ams, rel, "\u22DF", "\\curlyeqsucc");
            defineSymbol(math, ams, rel, "\u227F", "\\succsim");
            defineSymbol(math, ams, rel, "\u2AB8", "\\succapprox");
            defineSymbol(math, ams, rel, "\u22B3", "\\vartriangleright");
            defineSymbol(math, ams, rel, "\u22B5", "\\trianglerighteq");
            defineSymbol(math, ams, rel, "\u22A9", "\\Vdash");
            defineSymbol(math, ams, rel, "\u2223", "\\shortmid");
            defineSymbol(math, ams, rel, "\u2225", "\\shortparallel");
            defineSymbol(math, ams, rel, "\u226C", "\\between");
            defineSymbol(math, ams, rel, "\u22D4", "\\pitchfork");
            defineSymbol(math, ams, rel, "\u221D", "\\varpropto");
            defineSymbol(math, ams, rel, "\u25C0", "\\blacktriangleleft");
            defineSymbol(math, ams, rel, "\u2234", "\\therefore");
            defineSymbol(math, ams, rel, "\u220D", "\\backepsilon");
            defineSymbol(math, ams, rel, "\u25B6", "\\blacktriangleright");
            defineSymbol(math, ams, rel, "\u2235", "\\because");
            defineSymbol(math, ams, rel, "\u22D8", "\\llless");
            defineSymbol(math, ams, rel, "\u22D9", "\\gggtr");
            defineSymbol(math, ams, bin, "\u22B2", "\\lhd");
            defineSymbol(math, ams, bin, "\u22B3", "\\rhd");
            defineSymbol(math, ams, rel, "\u2242", "\\eqsim");
            defineSymbol(math, main, rel, "\u22C8", "\\Join");
            defineSymbol(math, ams, rel, "\u2251", "\\Doteq");

            // AMS Binary Operators
            defineSymbol(math, ams, bin, "\u2214", "\\dotplus");
            defineSymbol(math, ams, bin, "\u2216", "\\smallsetminus");
            defineSymbol(math, ams, bin, "\u22D2", "\\Cap");
            defineSymbol(math, ams, bin, "\u22D3", "\\Cup");
            defineSymbol(math, ams, bin, "\u2A5E", "\\doublebarwedge");
            defineSymbol(math, ams, bin, "\u229F", "\\boxminus");
            defineSymbol(math, ams, bin, "\u229E", "\\boxplus");
            defineSymbol(math, ams, bin, "\u22C7", "\\divideontimes");
            defineSymbol(math, ams, bin, "\u22C9", "\\ltimes");
            defineSymbol(math, ams, bin, "\u22CA", "\\rtimes");
            defineSymbol(math, ams, bin, "\u22CB", "\\leftthreetimes");
            defineSymbol(math, ams, bin, "\u22CC", "\\rightthreetimes");
            defineSymbol(math, ams, bin, "\u22CF", "\\curlywedge");
            defineSymbol(math, ams, bin, "\u22CE", "\\curlyvee");
            defineSymbol(math, ams, bin, "\u229D", "\\circleddash");
            defineSymbol(math, ams, bin, "\u229B", "\\circledast");
            defineSymbol(math, ams, bin, "\u22C5", "\\centerdot");
            defineSymbol(math, ams, bin, "\u22BA", "\\intercal");
            defineSymbol(math, ams, bin, "\u22D2", "\\doublecap");
            defineSymbol(math, ams, bin, "\u22D3", "\\doublecup");
            defineSymbol(math, ams, bin, "\u22A0", "\\boxtimes");

            // AMS Arrows
            defineSymbol(math, ams, rel, "\u21E2", "\\dashrightarrow");
            defineSymbol(math, ams, rel, "\u21E0", "\\dashleftarrow");
            defineSymbol(math, ams, rel, "\u21C7", "\\leftleftarrows");
            defineSymbol(math, ams, rel, "\u21C6", "\\leftrightarrows");
            defineSymbol(math, ams, rel, "\u21DA", "\\Lleftarrow");
            defineSymbol(math, ams, rel, "\u219E", "\\twoheadleftarrow");
            defineSymbol(math, ams, rel, "\u21A2", "\\leftarrowtail");
            defineSymbol(math, ams, rel, "\u21AB", "\\looparrowleft");
            defineSymbol(math, ams, rel, "\u21CB", "\\leftrightharpoons");
            defineSymbol(math, ams, rel, "\u21B6", "\\curvearrowleft");
            defineSymbol(math, ams, rel, "\u21BA", "\\circlearrowleft");
            defineSymbol(math, ams, rel, "\u21B0", "\\Lsh");
            defineSymbol(math, ams, rel, "\u21C8", "\\upuparrows");
            defineSymbol(math, ams, rel, "\u21BF", "\\upharpoonleft");
            defineSymbol(math, ams, rel, "\u21C3", "\\downharpoonleft");
            defineSymbol(math, ams, rel, "\u22B8", "\\multimap");
            defineSymbol(math, ams, rel, "\u21AD", "\\leftrightsquigarrow");
            defineSymbol(math, ams, rel, "\u21C9", "\\rightrightarrows");
            defineSymbol(math, ams, rel, "\u21C4", "\\rightleftarrows");
            defineSymbol(math, ams, rel, "\u21A0", "\\twoheadrightarrow");
            defineSymbol(math, ams, rel, "\u21A3", "\\rightarrowtail");
            defineSymbol(math, ams, rel, "\u21AC", "\\looparrowright");
            defineSymbol(math, ams, rel, "\u21B7", "\\curvearrowright");
            defineSymbol(math, ams, rel, "\u21BB", "\\circlearrowright");
            defineSymbol(math, ams, rel, "\u21B1", "\\Rsh");
            defineSymbol(math, ams, rel, "\u21CA", "\\downdownarrows");
            defineSymbol(math, ams, rel, "\u21BE", "\\upharpoonright");
            defineSymbol(math, ams, rel, "\u21C2", "\\downharpoonright");
            defineSymbol(math, ams, rel, "\u21DD", "\\rightsquigarrow");
            defineSymbol(math, ams, rel, "\u21DD", "\\leadsto");
            defineSymbol(math, ams, rel, "\u21DB", "\\Rrightarrow");
            defineSymbol(math, ams, rel, "\u21BE", "\\restriction");

            defineSymbol(math, main, textord, "\u2018", "`");
            defineSymbol(math, main, textord, "$", "\\$");
            defineSymbol(text, main, textord, "$", "\\$");
            defineSymbol(text, main, textord, "$", "\\textdollar");
            defineSymbol(math, main, textord, "%", "\\%");
            defineSymbol(text, main, textord, "%", "\\%");
            defineSymbol(math, main, textord, "_", "\\_");
            defineSymbol(text, main, textord, "_", "\\_");
            defineSymbol(text, main, textord, "_", "\\textunderscore");
            defineSymbol(math, main, textord, "\u2220", "\\angle");
            defineSymbol(math, main, textord, "\u221E", "\\infty");
            defineSymbol(math, main, textord, "\u2032", "\\prime");
            defineSymbol(math, main, textord, "\u25B3", "\\triangle");
            defineSymbol(math, main, textord, "\u0393", "\\Gamma", true);
            defineSymbol(math, main, textord, "\u0394", "\\Delta", true);
            defineSymbol(math, main, textord, "\u0398", "\\Theta", true);
            defineSymbol(math, main, textord, "\u039B", "\\Lambda", true);
            defineSymbol(math, main, textord, "\u039E", "\\Xi", true);
            defineSymbol(math, main, textord, "\u03A0", "\\Pi", true);
            defineSymbol(math, main, textord, "\u03A3", "\\Sigma", true);
            defineSymbol(math, main, textord, "\u03A5", "\\Upsilon", true);
            defineSymbol(math, main, textord, "\u03A6", "\\Phi", true);
            defineSymbol(math, main, textord, "\u03A8", "\\Psi", true);
            defineSymbol(math, main, textord, "\u03A9", "\\Omega", true);
            defineSymbol(math, main, textord, "\xAC", "\\neg");
            defineSymbol(math, main, textord, "\xAC", "\\lnot");
            defineSymbol(math, main, textord, "\u22A4", "\\top");
            defineSymbol(math, main, textord, "\u22A5", "\\bot");
            defineSymbol(math, main, textord, "\u2205", "\\emptyset");
            defineSymbol(math, ams, textord, "\u2205", "\\varnothing");
            defineSymbol(math, main, mathord, "\u03B1", "\\alpha", true);
            defineSymbol(math, main, mathord, "\u03B2", "\\beta", true);
            defineSymbol(math, main, mathord, "\u03B3", "\\gamma", true);
            defineSymbol(math, main, mathord, "\u03B4", "\\delta", true);
            defineSymbol(math, main, mathord, "\u03F5", "\\epsilon", true);
            defineSymbol(math, main, mathord, "\u03B6", "\\zeta", true);
            defineSymbol(math, main, mathord, "\u03B7", "\\eta", true);
            defineSymbol(math, main, mathord, "\u03B8", "\\theta", true);
            defineSymbol(math, main, mathord, "\u03B9", "\\iota", true);
            defineSymbol(math, main, mathord, "\u03BA", "\\kappa", true);
            defineSymbol(math, main, mathord, "\u03BB", "\\lambda", true);
            defineSymbol(math, main, mathord, "\u03BC", "\\mu", true);
            defineSymbol(math, main, mathord, "\u03BD", "\\nu", true);
            defineSymbol(math, main, mathord, "\u03BE", "\\xi", true);
            defineSymbol(math, main, mathord, "\u03BF", "\\omicron", true);
            defineSymbol(math, main, mathord, "\u03C0", "\\pi", true);
            defineSymbol(math, main, mathord, "\u03C1", "\\rho", true);
            defineSymbol(math, main, mathord, "\u03C3", "\\sigma", true);
            defineSymbol(math, main, mathord, "\u03C4", "\\tau", true);
            defineSymbol(math, main, mathord, "\u03C5", "\\upsilon", true);
            defineSymbol(math, main, mathord, "\u03D5", "\\phi", true);
            defineSymbol(math, main, mathord, "\u03C7", "\\chi", true);
            defineSymbol(math, main, mathord, "\u03C8", "\\psi", true);
            defineSymbol(math, main, mathord, "\u03C9", "\\omega", true);
            defineSymbol(math, main, mathord, "\u03B5", "\\varepsilon", true);
            defineSymbol(math, main, mathord, "\u03D1", "\\vartheta", true);
            defineSymbol(math, main, mathord, "\u03D6", "\\varpi", true);
            defineSymbol(math, main, mathord, "\u03F1", "\\varrho", true);
            defineSymbol(math, main, mathord, "\u03C2", "\\varsigma", true);
            defineSymbol(math, main, mathord, "\u03C6", "\\varphi", true);
            defineSymbol(math, main, bin, "\u2217", "*");
            defineSymbol(math, main, bin, "+", "+");
            defineSymbol(math, main, bin, "\u2212", "-");
            defineSymbol(math, main, bin, "\u22C5", "\\cdot");
            defineSymbol(math, main, bin, "\u2218", "\\circ");
            defineSymbol(math, main, bin, "\xF7", "\\div");
            defineSymbol(math, main, bin, "\xB1", "\\pm");
            defineSymbol(math, main, bin, "\xD7", "\\times");
            defineSymbol(math, main, bin, "\u2229", "\\cap");
            defineSymbol(math, main, bin, "\u222A", "\\cup");
            defineSymbol(math, main, bin, "\u2216", "\\setminus");
            defineSymbol(math, main, bin, "\u2227", "\\land");
            defineSymbol(math, main, bin, "\u2228", "\\lor");
            defineSymbol(math, main, bin, "\u2227", "\\wedge");
            defineSymbol(math, main, bin, "\u2228", "\\vee");
            defineSymbol(math, main, textord, "\u221A", "\\surd");
            defineSymbol(math, main, open, "(", "(");
            defineSymbol(math, main, open, "[", "[");
            defineSymbol(math, main, open, "\u27E8", "\\langle");
            defineSymbol(math, main, open, "\u2223", "\\lvert");
            defineSymbol(math, main, open, "\u2225", "\\lVert");
            defineSymbol(math, main, close, ")", ")");
            defineSymbol(math, main, close, "]", "]");
            defineSymbol(math, main, close, "?", "?");
            defineSymbol(math, main, close, "!", "!");
            defineSymbol(math, main, close, "\u27E9", "\\rangle");
            defineSymbol(math, main, close, "\u2223", "\\rvert");
            defineSymbol(math, main, close, "\u2225", "\\rVert");
            defineSymbol(math, main, rel, "=", "=");
            defineSymbol(math, main, rel, "<", "<");
            defineSymbol(math, main, rel, ">", ">");
            defineSymbol(math, main, rel, ":", ":");
            defineSymbol(math, main, rel, "\u2248", "\\approx");
            defineSymbol(math, main, rel, "\u2245", "\\cong");
            defineSymbol(math, main, rel, "\u2265", "\\ge");
            defineSymbol(math, main, rel, "\u2265", "\\geq");
            defineSymbol(math, main, rel, "\u2190", "\\gets");
            defineSymbol(math, main, rel, ">", "\\gt");
            defineSymbol(math, main, rel, "\u2208", "\\in");
            defineSymbol(math, main, rel, "\u2209", "\\notin");
            defineSymbol(math, main, rel, "\u0338", "\\not");
            defineSymbol(math, main, rel, "\u2282", "\\subset");
            defineSymbol(math, main, rel, "\u2283", "\\supset");
            defineSymbol(math, main, rel, "\u2286", "\\subseteq");
            defineSymbol(math, main, rel, "\u2287", "\\supseteq");
            defineSymbol(math, ams, rel, "\u2288", "\\nsubseteq");
            defineSymbol(math, ams, rel, "\u2289", "\\nsupseteq");
            defineSymbol(math, main, rel, "\u22A8", "\\models");
            defineSymbol(math, main, rel, "\u2190", "\\leftarrow");
            defineSymbol(math, main, rel, "\u2264", "\\le");
            defineSymbol(math, main, rel, "\u2264", "\\leq");
            defineSymbol(math, main, rel, "<", "\\lt");
            defineSymbol(math, main, rel, "\u2260", "\\ne");
            defineSymbol(math, main, rel, "\u2260", "\\neq");
            defineSymbol(math, main, rel, "\u2192", "\\rightarrow");
            defineSymbol(math, main, rel, "\u2192", "\\to");
            defineSymbol(math, ams, rel, "\u2271", "\\ngeq");
            defineSymbol(math, ams, rel, "\u2270", "\\nleq");
            defineSymbol(math, main, spacing, null, "\\!");
            defineSymbol(math, main, spacing, "\xA0", "\\ ");
            defineSymbol(math, main, spacing, "\xA0", "~");
            defineSymbol(math, main, spacing, null, "\\,");
            defineSymbol(math, main, spacing, null, "\\:");
            defineSymbol(math, main, spacing, null, "\\;");
            defineSymbol(math, main, spacing, null, "\\enspace");
            defineSymbol(math, main, spacing, null, "\\qquad");
            defineSymbol(math, main, spacing, null, "\\quad");
            defineSymbol(math, main, spacing, "\xA0", "\\space");
            defineSymbol(math, main, punct, ",", ",");
            defineSymbol(math, main, punct, ";", ";");
            defineSymbol(math, main, punct, ":", "\\colon");
            defineSymbol(math, ams, bin, "\u22BC", "\\barwedge");
            defineSymbol(math, ams, bin, "\u22BB", "\\veebar");
            defineSymbol(math, main, bin, "\u2299", "\\odot");
            defineSymbol(math, main, bin, "\u2295", "\\oplus");
            defineSymbol(math, main, bin, "\u2297", "\\otimes");
            defineSymbol(math, main, textord, "\u2202", "\\partial");
            defineSymbol(math, main, bin, "\u2298", "\\oslash");
            defineSymbol(math, ams, bin, "\u229A", "\\circledcirc");
            defineSymbol(math, ams, bin, "\u22A1", "\\boxdot");
            defineSymbol(math, main, bin, "\u25B3", "\\bigtriangleup");
            defineSymbol(math, main, bin, "\u25BD", "\\bigtriangledown");
            defineSymbol(math, main, bin, "\u2020", "\\dagger");
            defineSymbol(math, main, bin, "\u22C4", "\\diamond");
            defineSymbol(math, main, bin, "\u22C6", "\\star");
            defineSymbol(math, main, bin, "\u25C3", "\\triangleleft");
            defineSymbol(math, main, bin, "\u25B9", "\\triangleright");
            defineSymbol(math, main, open, "{", "\\{");
            defineSymbol(text, main, textord, "{", "\\{");
            defineSymbol(text, main, textord, "{", "\\textbraceleft");
            defineSymbol(math, main, close, "}", "\\}");
            defineSymbol(text, main, textord, "}", "\\}");
            defineSymbol(text, main, textord, "}", "\\textbraceright");
            defineSymbol(math, main, open, "{", "\\lbrace");
            defineSymbol(math, main, close, "}", "\\rbrace");
            defineSymbol(math, main, open, "[", "\\lbrack");
            defineSymbol(math, main, close, "]", "\\rbrack");
            defineSymbol(text, main, textord, "<", "\\textless"); // in T1 fontenc
            defineSymbol(text, main, textord, ">", "\\textgreater"); // in T1 fontenc
            defineSymbol(math, main, open, "\u230A", "\\lfloor");
            defineSymbol(math, main, close, "\u230B", "\\rfloor");
            defineSymbol(math, main, open, "\u2308", "\\lceil");
            defineSymbol(math, main, close, "\u2309", "\\rceil");
            defineSymbol(math, main, textord, "\\", "\\backslash");
            defineSymbol(math, main, textord, "\u2223", "|");
            defineSymbol(math, main, textord, "\u2223", "\\vert");
            defineSymbol(text, main, textord, "|", "\\textbar"); // in T1 fontenc
            defineSymbol(math, main, textord, "\u2225", "\\|");
            defineSymbol(math, main, textord, "\u2225", "\\Vert");
            defineSymbol(text, main, textord, "\u2225", "\\textbardbl");
            defineSymbol(math, main, rel, "\u2191", "\\uparrow");
            defineSymbol(math, main, rel, "\u21D1", "\\Uparrow");
            defineSymbol(math, main, rel, "\u2193", "\\downarrow");
            defineSymbol(math, main, rel, "\u21D3", "\\Downarrow");
            defineSymbol(math, main, rel, "\u2195", "\\updownarrow");
            defineSymbol(math, main, rel, "\u21D5", "\\Updownarrow");
            defineSymbol(math, main, op, "\u2210", "\\coprod");
            defineSymbol(math, main, op, "\u22C1", "\\bigvee");
            defineSymbol(math, main, op, "\u22C0", "\\bigwedge");
            defineSymbol(math, main, op, "\u2A04", "\\biguplus");
            defineSymbol(math, main, op, "\u22C2", "\\bigcap");
            defineSymbol(math, main, op, "\u22C3", "\\bigcup");
            defineSymbol(math, main, op, "\u222B", "\\int");
            defineSymbol(math, main, op, "\u222B", "\\intop");
            defineSymbol(math, main, op, "\u222C", "\\iint");
            defineSymbol(math, main, op, "\u222D", "\\iiint");
            defineSymbol(math, main, op, "\u220F", "\\prod");
            defineSymbol(math, main, op, "\u2211", "\\sum");
            defineSymbol(math, main, op, "\u2A02", "\\bigotimes");
            defineSymbol(math, main, op, "\u2A01", "\\bigoplus");
            defineSymbol(math, main, op, "\u2A00", "\\bigodot");
            defineSymbol(math, main, op, "\u222E", "\\oint");
            defineSymbol(math, main, op, "\u2A06", "\\bigsqcup");
            defineSymbol(math, main, op, "\u222B", "\\smallint");
            defineSymbol(text, main, inner, "\u2026", "\\textellipsis");
            defineSymbol(math, main, inner, "\u2026", "\\mathellipsis");
            defineSymbol(text, main, inner, "\u2026", "\\ldots", true);
            defineSymbol(math, main, inner, "\u2026", "\\ldots", true);
            defineSymbol(math, main, inner, "\u22EF", "\\@cdots", true);
            defineSymbol(math, main, inner, "\u22F1", "\\ddots", true);
            defineSymbol(math, main, textord, "\u22EE", "\\vdots", true);
            defineSymbol(math, main, accent, "\xB4", "\\acute");
            defineSymbol(math, main, accent, "`", "\\grave");
            defineSymbol(math, main, accent, "\xA8", "\\ddot");
            defineSymbol(math, main, accent, "~", "\\tilde");
            defineSymbol(math, main, accent, "\xAF", "\\bar");
            defineSymbol(math, main, accent, "\u02D8", "\\breve");
            defineSymbol(math, main, accent, "\u02C7", "\\check");
            defineSymbol(math, main, accent, "^", "\\hat");
            defineSymbol(math, main, accent, "\u20D7", "\\vec");
            defineSymbol(math, main, accent, "\u02D9", "\\dot");
            defineSymbol(math, main, mathord, "\u0131", "\\imath");
            defineSymbol(math, main, mathord, "\u0237", "\\jmath");
            defineSymbol(text, main, accent, "\u02CA", "\\'"); // acute
            defineSymbol(text, main, accent, "\u02CB", "\\`"); // grave
            defineSymbol(text, main, accent, "\u02C6", "\\^"); // circumflex
            defineSymbol(text, main, accent, "\u02DC", "\\~"); // tilde
            defineSymbol(text, main, accent, "\u02C9", "\\="); // macron
            defineSymbol(text, main, accent, "\u02D8", "\\u"); // breve
            defineSymbol(text, main, accent, "\u02D9", "\\."); // dot above
            defineSymbol(text, main, accent, "\u02DA", "\\r"); // ring above
            defineSymbol(text, main, accent, "\u02C7", "\\v"); // caron
            defineSymbol(text, main, accent, "\xA8", '\\"'); // diaresis
            defineSymbol(text, main, accent, "\u030B", "\\H"); // double acute

            defineSymbol(text, main, textord, "\u2013", "--");
            defineSymbol(text, main, textord, "\u2013", "\\textendash");
            defineSymbol(text, main, textord, "\u2014", "---");
            defineSymbol(text, main, textord, "\u2014", "\\textemdash");
            defineSymbol(text, main, textord, "\u2018", "`");
            defineSymbol(text, main, textord, "\u2018", "\\textquoteleft");
            defineSymbol(text, main, textord, "\u2019", "'");
            defineSymbol(text, main, textord, "\u2019", "\\textquoteright");
            defineSymbol(text, main, textord, "\u201C", "``");
            defineSymbol(text, main, textord, "\u201C", "\\textquotedblleft");
            defineSymbol(text, main, textord, "\u201D", "''");
            defineSymbol(text, main, textord, "\u201D", "\\textquotedblright");
            defineSymbol(math, main, textord, "\xB0", "\\degree");
            defineSymbol(text, main, textord, "\xB0", "\\degree");
            // TODO: In LaTeX, \pounds can generate a different character in text and math
            // mode, but among our fonts, only Main-Italic defines this character "163".
            defineSymbol(math, main, mathord, "\xA3", "\\pounds");
            defineSymbol(math, main, mathord, "\xA3", "\\mathsterling");
            defineSymbol(text, main, mathord, "\xA3", "\\pounds");
            defineSymbol(text, main, mathord, "\xA3", "\\textsterling");
            defineSymbol(math, ams, textord, "\u2720", "\\maltese");
            defineSymbol(text, ams, textord, "\u2720", "\\maltese");

            defineSymbol(text, main, spacing, "\xA0", "\\ ");
            defineSymbol(text, main, spacing, "\xA0", " ");
            defineSymbol(text, main, spacing, "\xA0", "~");

            // There are lots of symbols which are the same, so we add them in afterwards.

            // All of these are textords in math mode
            var mathTextSymbols = "0123456789/@.\"";
            for (var i = 0; i < mathTextSymbols.length; i++) {
                var ch = mathTextSymbols.charAt(i);
                defineSymbol(math, main, textord, ch, ch);
            }

            // All of these are textords in text mode
            var textSymbols = "0123456789!@*()-=+[]<>|\";:?/.,";
            for (var _i = 0; _i < textSymbols.length; _i++) {
                var _ch = textSymbols.charAt(_i);
                defineSymbol(text, main, textord, _ch, _ch);
            }

            // All of these are textords in text mode, and mathords in math mode
            var letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
            for (var _i2 = 0; _i2 < letters.length; _i2++) {
                var _ch2 = letters.charAt(_i2);
                defineSymbol(math, main, mathord, _ch2, _ch2);
                defineSymbol(text, main, textord, _ch2, _ch2);
            }

            // Latin-1 letters
            for (var _i3 = 0x00C0; _i3 <= 0x00D6; _i3++) {
                var _ch3 = String.fromCharCode(_i3);
                defineSymbol(math, main, mathord, _ch3, _ch3);
                defineSymbol(text, main, textord, _ch3, _ch3);
            }

            for (var _i4 = 0x00D8; _i4 <= 0x00F6; _i4++) {
                var _ch4 = String.fromCharCode(_i4);
                defineSymbol(math, main, mathord, _ch4, _ch4);
                defineSymbol(text, main, textord, _ch4, _ch4);
            }

            for (var _i5 = 0x00F8; _i5 <= 0x00FF; _i5++) {
                var _ch5 = String.fromCharCode(_i5);
                defineSymbol(math, main, mathord, _ch5, _ch5);
                defineSymbol(text, main, textord, _ch5, _ch5);
            }

            // Cyrillic
            for (var _i6 = 0x0410; _i6 <= 0x044F; _i6++) {
                var _ch6 = String.fromCharCode(_i6);
                defineSymbol(text, main, textord, _ch6, _ch6);
            }

            // Unicode versions of existing characters
            defineSymbol(text, main, textord, "\u2013", "–");
            defineSymbol(text, main, textord, "\u2014", "—");
            defineSymbol(text, main, textord, "\u2018", "‘");
            defineSymbol(text, main, textord, "\u2019", "’");
            defineSymbol(text, main, textord, "\u201C", "“");
            defineSymbol(text, main, textord, "\u201D", "”");
        }, {}], 113: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            var hangulRegex = exports.hangulRegex = /[\uAC00-\uD7AF]/;

            // This regex combines
            // - CJK symbols and punctuation: [\u3000-\u303F]
            // - Hiragana: [\u3040-\u309F]
            // - Katakana: [\u30A0-\u30FF]
            // - CJK ideograms: [\u4E00-\u9FAF]
            // - Hangul syllables: [\uAC00-\uD7AF]
            // - Fullwidth punctuation: [\uFF00-\uFF60]
            // Notably missing are halfwidth Katakana and Romanji glyphs.
            var cjkRegex = exports.cjkRegex = /[\u3000-\u30FF\u4E00-\u9FAF\uAC00-\uD7AF\uFF00-\uFF60]/;
        }, {}], 114: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.calculateSize = exports.validUnit = undefined;

            var _ParseError = require("./ParseError");

            var _ParseError2 = _interopRequireDefault(_ParseError);

            var _Options = require("./Options");

            var _Options2 = _interopRequireDefault(_Options);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            // This table gives the number of TeX pts in one of each *absolute* TeX unit.
            // Thus, multiplying a length by this number converts the length from units
            // into pts.  Dividing the result by ptPerEm gives the number of ems
            // *assuming* a font size of ptPerEm (normal size, normal style).


            /**
             * This file does conversion between units.  In particular, it provides
             * calculateSize to convert other units into ems.
             */

            var ptPerUnit = {
                // https://en.wikibooks.org/wiki/LaTeX/Lengths and
                // https://tex.stackexchange.com/a/8263
                "pt": 1, // TeX point
                "mm": 7227 / 2540, // millimeter
                "cm": 7227 / 254, // centimeter
                "in": 72.27, // inch
                "bp": 803 / 800, // big (PostScript) points
                "pc": 12, // pica
                "dd": 1238 / 1157, // didot
                "cc": 14856 / 1157, // cicero (12 didot)
                "nd": 685 / 642, // new didot
                "nc": 1370 / 107, // new cicero (12 new didot)
                "sp": 1 / 65536, // scaled point (TeX's internal smallest unit)
                // https://tex.stackexchange.com/a/41371
                "px": 803 / 800 // \pdfpxdimen defaults to 1 bp in pdfTeX and LuaTeX
            };

            // Dictionary of relative units, for fast validity testing.
            var relativeUnit = {
                "ex": true,
                "em": true,
                "mu": true
            };

            /**
             * Determine whether the specified unit (either a string defining the unit
             * or a "size" parse node containing a unit field) is valid.
             */
            var validUnit = exports.validUnit = function validUnit(unit) {
                if (typeof unit !== "string") {
                    unit = unit.unit;
                }
                return unit in ptPerUnit || unit in relativeUnit || unit === "ex";
            };

            /*
             * Convert a "size" parse node (with numeric "number" and string "unit" fields,
             * as parsed by functions.js argType "size") into a CSS em value for the
             * current style/scale.  `options` gives the current options.
             */
            var calculateSize = exports.calculateSize = function calculateSize(sizeValue, options) {
                var scale = void 0;
                if (sizeValue.unit in ptPerUnit) {
                    // Absolute units
                    scale = ptPerUnit[sizeValue.unit] // Convert unit to pt
                    / options.fontMetrics().ptPerEm // Convert pt to CSS em
                    / options.sizeMultiplier; // Unscale to make absolute units
                } else if (sizeValue.unit === "mu") {
                    // `mu` units scale with scriptstyle/scriptscriptstyle.
                    scale = options.fontMetrics().cssEmPerMu;
                } else {
                    // Other relative units always refer to the *textstyle* font
                    // in the current size.
                    var unitOptions = void 0;
                    if (options.style.isTight()) {
                        // isTight() means current style is script/scriptscript.
                        unitOptions = options.havingStyle(options.style.text());
                    } else {
                        unitOptions = options;
                    }
                    // TODO: In TeX these units are relative to the quad of the current
                    // *text* font, e.g. cmr10. KaTeX instead uses values from the
                    // comparably-sized *Computer Modern symbol* font. At 10pt, these
                    // match. At 7pt and 5pt, they differ: cmr7=1.138894, cmsy7=1.170641;
                    // cmr5=1.361133, cmsy5=1.472241. Consider $\scriptsize a\kern1emb$.
                    // TeX \showlists shows a kern of 1.13889 * fontsize;
                    // KaTeX shows a kern of 1.171 * fontsize.
                    if (sizeValue.unit === "ex") {
                        scale = unitOptions.fontMetrics().xHeight;
                    } else if (sizeValue.unit === "em") {
                        scale = unitOptions.fontMetrics().quad;
                    } else {
                        throw new _ParseError2.default("Invalid unit: '" + sizeValue.unit + "'");
                    }
                    if (unitOptions !== options) {
                        scale *= unitOptions.sizeMultiplier / options.sizeMultiplier;
                    }
                }
                return Math.min(sizeValue.number * scale, options.maxSize);
            };
        }, { "./Options": 83, "./ParseError": 84 }], 115: [function (require, module, exports) {
            "use strict";

            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            /**
             * This file contains a list of utility functions which are useful in other
             * files.
             */

            /**
             * Provide an `indexOf` function which works in IE8, but defers to native if
             * possible.
             */
            var nativeIndexOf = Array.prototype.indexOf;
            var indexOf = function indexOf(list, elem) {
                if (list == null) {
                    return -1;
                }
                if (nativeIndexOf && list.indexOf === nativeIndexOf) {
                    return list.indexOf(elem);
                }
                var l = list.length;
                for (var i = 0; i < l; i++) {
                    if (list[i] === elem) {
                        return i;
                    }
                }
                return -1;
            };

            /**
             * Return whether an element is contained in a list
             */
            var contains = function contains(list, elem) {
                return indexOf(list, elem) !== -1;
            };

            /**
             * Provide a default value if a setting is undefined
             */
            var deflt = function deflt(setting, defaultIfUndefined) {
                return setting === undefined ? defaultIfUndefined : setting;
            };

            // hyphenate and escape adapted from Facebook's React under Apache 2 license

            var uppercase = /([A-Z])/g;
            var hyphenate = function hyphenate(str) {
                return str.replace(uppercase, "-$1").toLowerCase();
            };

            var ESCAPE_LOOKUP = {
                "&": "&amp;",
                ">": "&gt;",
                "<": "&lt;",
                "\"": "&quot;",
                "'": "&#x27;"
            };

            var ESCAPE_REGEX = /[&><"']/g;

            function escaper(match) {
                return ESCAPE_LOOKUP[match];
            }

            /**
             * Escapes text to prevent scripting attacks.
             *
             * @param {*} text Text value to escape.
             * @return {string} An escaped string.
             */
            function escape(text) {
                return ("" + text).replace(ESCAPE_REGEX, escaper);
            }

            /**
             * A function to set the text content of a DOM element in all supported
             * browsers. Note that we don't define this if there is no document.
             */
            var setTextContent = void 0;
            if (typeof document !== "undefined") {
                var testNode = document.createElement("span");
                if ("textContent" in testNode) {
                    setTextContent = function setTextContent(node, text) {
                        node.textContent = text;
                    };
                } else {
                    setTextContent = function setTextContent(node, text) {
                        node.innerText = text;
                    };
                }
            }

            /**
             * A function to clear a node.
             */
            function clearNode(node) {
                setTextContent(node, "");
            }

            exports.default = {
                contains: contains,
                deflt: deflt,
                escape: escape,
                hyphenate: hyphenate,
                indexOf: indexOf,
                setTextContent: setTextContent,
                clearNode: clearNode
            };
        }, {}] }, {}, [1])(1);
});

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */;(function(){/** Used as a safe reference for `undefined` in pre-ES5 environments. */var undefined;/** Used as the semantic version number. */var VERSION='4.17.4';/** Used as the size to enable large array optimizations. */var LARGE_ARRAY_SIZE=200;/** Error message constants. */var CORE_ERROR_TEXT='Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',FUNC_ERROR_TEXT='Expected a function';/** Used to stand-in for `undefined` hash values. */var HASH_UNDEFINED='__lodash_hash_undefined__';/** Used as the maximum memoize cache size. */var MAX_MEMOIZE_SIZE=500;/** Used as the internal argument placeholder. */var PLACEHOLDER='__lodash_placeholder__';/** Used to compose bitmasks for cloning. */var CLONE_DEEP_FLAG=1,CLONE_FLAT_FLAG=2,CLONE_SYMBOLS_FLAG=4;/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;/** Used to compose bitmasks for function metadata. */var WRAP_BIND_FLAG=1,WRAP_BIND_KEY_FLAG=2,WRAP_CURRY_BOUND_FLAG=4,WRAP_CURRY_FLAG=8,WRAP_CURRY_RIGHT_FLAG=16,WRAP_PARTIAL_FLAG=32,WRAP_PARTIAL_RIGHT_FLAG=64,WRAP_ARY_FLAG=128,WRAP_REARG_FLAG=256,WRAP_FLIP_FLAG=512;/** Used as default options for `_.truncate`. */var DEFAULT_TRUNC_LENGTH=30,DEFAULT_TRUNC_OMISSION='...';/** Used to detect hot functions by number of calls within a span of milliseconds. */var HOT_COUNT=800,HOT_SPAN=16;/** Used to indicate the type of lazy iteratees. */var LAZY_FILTER_FLAG=1,LAZY_MAP_FLAG=2,LAZY_WHILE_FLAG=3;/** Used as references for various `Number` constants. */var INFINITY=1/0,MAX_SAFE_INTEGER=9007199254740991,MAX_INTEGER=1.7976931348623157e+308,NAN=0/0;/** Used as references for the maximum length and index of an array. */var MAX_ARRAY_LENGTH=4294967295,MAX_ARRAY_INDEX=MAX_ARRAY_LENGTH-1,HALF_MAX_ARRAY_LENGTH=MAX_ARRAY_LENGTH>>>1;/** Used to associate wrap methods with their bit flags. */var wrapFlags=[['ary',WRAP_ARY_FLAG],['bind',WRAP_BIND_FLAG],['bindKey',WRAP_BIND_KEY_FLAG],['curry',WRAP_CURRY_FLAG],['curryRight',WRAP_CURRY_RIGHT_FLAG],['flip',WRAP_FLIP_FLAG],['partial',WRAP_PARTIAL_FLAG],['partialRight',WRAP_PARTIAL_RIGHT_FLAG],['rearg',WRAP_REARG_FLAG]];/** `Object#toString` result references. */var argsTag='[object Arguments]',arrayTag='[object Array]',asyncTag='[object AsyncFunction]',boolTag='[object Boolean]',dateTag='[object Date]',domExcTag='[object DOMException]',errorTag='[object Error]',funcTag='[object Function]',genTag='[object GeneratorFunction]',mapTag='[object Map]',numberTag='[object Number]',nullTag='[object Null]',objectTag='[object Object]',promiseTag='[object Promise]',proxyTag='[object Proxy]',regexpTag='[object RegExp]',setTag='[object Set]',stringTag='[object String]',symbolTag='[object Symbol]',undefinedTag='[object Undefined]',weakMapTag='[object WeakMap]',weakSetTag='[object WeakSet]';var arrayBufferTag='[object ArrayBuffer]',dataViewTag='[object DataView]',float32Tag='[object Float32Array]',float64Tag='[object Float64Array]',int8Tag='[object Int8Array]',int16Tag='[object Int16Array]',int32Tag='[object Int32Array]',uint8Tag='[object Uint8Array]',uint8ClampedTag='[object Uint8ClampedArray]',uint16Tag='[object Uint16Array]',uint32Tag='[object Uint32Array]';/** Used to match empty string literals in compiled template source. */var reEmptyStringLeading=/\b__p \+= '';/g,reEmptyStringMiddle=/\b(__p \+=) '' \+/g,reEmptyStringTrailing=/(__e\(.*?\)|\b__t\)) \+\n'';/g;/** Used to match HTML entities and HTML characters. */var reEscapedHtml=/&(?:amp|lt|gt|quot|#39);/g,reUnescapedHtml=/[&<>"']/g,reHasEscapedHtml=RegExp(reEscapedHtml.source),reHasUnescapedHtml=RegExp(reUnescapedHtml.source);/** Used to match template delimiters. */var reEscape=/<%-([\s\S]+?)%>/g,reEvaluate=/<%([\s\S]+?)%>/g,reInterpolate=/<%=([\s\S]+?)%>/g;/** Used to match property names within property paths. */var reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/,reLeadingDot=/^\./,rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;/**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */var reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reHasRegExpChar=RegExp(reRegExpChar.source);/** Used to match leading and trailing whitespace. */var reTrim=/^\s+|\s+$/g,reTrimStart=/^\s+/,reTrimEnd=/\s+$/;/** Used to match wrap detail comments. */var reWrapComment=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,reWrapDetails=/\{\n\/\* \[wrapped with (.+)\] \*/,reSplitDetails=/,? & /;/** Used to match words composed of alphanumeric characters. */var reAsciiWord=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;/** Used to match backslashes in property paths. */var reEscapeChar=/\\(\\)?/g;/**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */var reEsTemplate=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;/** Used to match `RegExp` flags from their coerced string values. */var reFlags=/\w*$/;/** Used to detect bad signed hexadecimal string values. */var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;/** Used to detect binary string values. */var reIsBinary=/^0b[01]+$/i;/** Used to detect host constructors (Safari). */var reIsHostCtor=/^\[object .+?Constructor\]$/;/** Used to detect octal string values. */var reIsOctal=/^0o[0-7]+$/i;/** Used to detect unsigned integer values. */var reIsUint=/^(?:0|[1-9]\d*)$/;/** Used to match Latin Unicode letters (excluding mathematical operators). */var reLatin=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;/** Used to ensure capturing order of template delimiters. */var reNoMatch=/($^)/;/** Used to match unescaped characters in compiled string literals. */var reUnescapedString=/['\n\r\u2028\u2029\\]/g;/** Used to compose unicode character classes. */var rsAstralRange='\\ud800-\\udfff',rsComboMarksRange='\\u0300-\\u036f',reComboHalfMarksRange='\\ufe20-\\ufe2f',rsComboSymbolsRange='\\u20d0-\\u20ff',rsComboRange=rsComboMarksRange+reComboHalfMarksRange+rsComboSymbolsRange,rsDingbatRange='\\u2700-\\u27bf',rsLowerRange='a-z\\xdf-\\xf6\\xf8-\\xff',rsMathOpRange='\\xac\\xb1\\xd7\\xf7',rsNonCharRange='\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',rsPunctuationRange='\\u2000-\\u206f',rsSpaceRange=' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',rsUpperRange='A-Z\\xc0-\\xd6\\xd8-\\xde',rsVarRange='\\ufe0e\\ufe0f',rsBreakRange=rsMathOpRange+rsNonCharRange+rsPunctuationRange+rsSpaceRange;/** Used to compose unicode capture groups. */var rsApos='[\'\u2019]',rsAstral='['+rsAstralRange+']',rsBreak='['+rsBreakRange+']',rsCombo='['+rsComboRange+']',rsDigits='\\d+',rsDingbat='['+rsDingbatRange+']',rsLower='['+rsLowerRange+']',rsMisc='[^'+rsAstralRange+rsBreakRange+rsDigits+rsDingbatRange+rsLowerRange+rsUpperRange+']',rsFitz='\\ud83c[\\udffb-\\udfff]',rsModifier='(?:'+rsCombo+'|'+rsFitz+')',rsNonAstral='[^'+rsAstralRange+']',rsRegional='(?:\\ud83c[\\udde6-\\uddff]){2}',rsSurrPair='[\\ud800-\\udbff][\\udc00-\\udfff]',rsUpper='['+rsUpperRange+']',rsZWJ='\\u200d';/** Used to compose unicode regexes. */var rsMiscLower='(?:'+rsLower+'|'+rsMisc+')',rsMiscUpper='(?:'+rsUpper+'|'+rsMisc+')',rsOptContrLower='(?:'+rsApos+'(?:d|ll|m|re|s|t|ve))?',rsOptContrUpper='(?:'+rsApos+'(?:D|LL|M|RE|S|T|VE))?',reOptMod=rsModifier+'?',rsOptVar='['+rsVarRange+']?',rsOptJoin='(?:'+rsZWJ+'(?:'+[rsNonAstral,rsRegional,rsSurrPair].join('|')+')'+rsOptVar+reOptMod+')*',rsOrdLower='\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',rsOrdUpper='\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',rsSeq=rsOptVar+reOptMod+rsOptJoin,rsEmoji='(?:'+[rsDingbat,rsRegional,rsSurrPair].join('|')+')'+rsSeq,rsSymbol='(?:'+[rsNonAstral+rsCombo+'?',rsCombo,rsRegional,rsSurrPair,rsAstral].join('|')+')';/** Used to match apostrophes. */var reApos=RegExp(rsApos,'g');/**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */var reComboMark=RegExp(rsCombo,'g');/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */var reUnicode=RegExp(rsFitz+'(?='+rsFitz+')|'+rsSymbol+rsSeq,'g');/** Used to match complex or compound words. */var reUnicodeWord=RegExp([rsUpper+'?'+rsLower+'+'+rsOptContrLower+'(?='+[rsBreak,rsUpper,'$'].join('|')+')',rsMiscUpper+'+'+rsOptContrUpper+'(?='+[rsBreak,rsUpper+rsMiscLower,'$'].join('|')+')',rsUpper+'?'+rsMiscLower+'+'+rsOptContrLower,rsUpper+'+'+rsOptContrUpper,rsOrdUpper,rsOrdLower,rsDigits,rsEmoji].join('|'),'g');/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */var reHasUnicode=RegExp('['+rsZWJ+rsAstralRange+rsComboRange+rsVarRange+']');/** Used to detect strings that need a more robust regexp to match words. */var reHasUnicodeWord=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;/** Used to assign default `context` object properties. */var contextProps=['Array','Buffer','DataView','Date','Error','Float32Array','Float64Array','Function','Int8Array','Int16Array','Int32Array','Map','Math','Object','Promise','RegExp','Set','String','Symbol','TypeError','Uint8Array','Uint8ClampedArray','Uint16Array','Uint32Array','WeakMap','_','clearTimeout','isFinite','parseInt','setTimeout'];/** Used to make template sourceURLs easier to identify. */var templateCounter=-1;/** Used to identify `toStringTag` values of typed arrays. */var typedArrayTags={};typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=true;typedArrayTags[argsTag]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=false;/** Used to identify `toStringTag` values supported by `_.clone`. */var cloneableTags={};cloneableTags[argsTag]=cloneableTags[arrayTag]=cloneableTags[arrayBufferTag]=cloneableTags[dataViewTag]=cloneableTags[boolTag]=cloneableTags[dateTag]=cloneableTags[float32Tag]=cloneableTags[float64Tag]=cloneableTags[int8Tag]=cloneableTags[int16Tag]=cloneableTags[int32Tag]=cloneableTags[mapTag]=cloneableTags[numberTag]=cloneableTags[objectTag]=cloneableTags[regexpTag]=cloneableTags[setTag]=cloneableTags[stringTag]=cloneableTags[symbolTag]=cloneableTags[uint8Tag]=cloneableTags[uint8ClampedTag]=cloneableTags[uint16Tag]=cloneableTags[uint32Tag]=true;cloneableTags[errorTag]=cloneableTags[funcTag]=cloneableTags[weakMapTag]=false;/** Used to map Latin Unicode letters to basic Latin letters. */var deburredLetters={// Latin-1 Supplement block.
'\xc0':'A','\xc1':'A','\xc2':'A','\xc3':'A','\xc4':'A','\xc5':'A','\xe0':'a','\xe1':'a','\xe2':'a','\xe3':'a','\xe4':'a','\xe5':'a','\xc7':'C','\xe7':'c','\xd0':'D','\xf0':'d','\xc8':'E','\xc9':'E','\xca':'E','\xcb':'E','\xe8':'e','\xe9':'e','\xea':'e','\xeb':'e','\xcc':'I','\xcd':'I','\xce':'I','\xcf':'I','\xec':'i','\xed':'i','\xee':'i','\xef':'i','\xd1':'N','\xf1':'n','\xd2':'O','\xd3':'O','\xd4':'O','\xd5':'O','\xd6':'O','\xd8':'O','\xf2':'o','\xf3':'o','\xf4':'o','\xf5':'o','\xf6':'o','\xf8':'o','\xd9':'U','\xda':'U','\xdb':'U','\xdc':'U','\xf9':'u','\xfa':'u','\xfb':'u','\xfc':'u','\xdd':'Y','\xfd':'y','\xff':'y','\xc6':'Ae','\xe6':'ae','\xde':'Th','\xfe':'th','\xdf':'ss',// Latin Extended-A block.
'\u0100':'A','\u0102':'A','\u0104':'A','\u0101':'a','\u0103':'a','\u0105':'a','\u0106':'C','\u0108':'C','\u010A':'C','\u010C':'C','\u0107':'c','\u0109':'c','\u010B':'c','\u010D':'c','\u010E':'D','\u0110':'D','\u010F':'d','\u0111':'d','\u0112':'E','\u0114':'E','\u0116':'E','\u0118':'E','\u011A':'E','\u0113':'e','\u0115':'e','\u0117':'e','\u0119':'e','\u011B':'e','\u011C':'G','\u011E':'G','\u0120':'G','\u0122':'G','\u011D':'g','\u011F':'g','\u0121':'g','\u0123':'g','\u0124':'H','\u0126':'H','\u0125':'h','\u0127':'h','\u0128':'I','\u012A':'I','\u012C':'I','\u012E':'I','\u0130':'I','\u0129':'i','\u012B':'i','\u012D':'i','\u012F':'i','\u0131':'i','\u0134':'J','\u0135':'j','\u0136':'K','\u0137':'k','\u0138':'k','\u0139':'L','\u013B':'L','\u013D':'L','\u013F':'L','\u0141':'L','\u013A':'l','\u013C':'l','\u013E':'l','\u0140':'l','\u0142':'l','\u0143':'N','\u0145':'N','\u0147':'N','\u014A':'N','\u0144':'n','\u0146':'n','\u0148':'n','\u014B':'n','\u014C':'O','\u014E':'O','\u0150':'O','\u014D':'o','\u014F':'o','\u0151':'o','\u0154':'R','\u0156':'R','\u0158':'R','\u0155':'r','\u0157':'r','\u0159':'r','\u015A':'S','\u015C':'S','\u015E':'S','\u0160':'S','\u015B':'s','\u015D':'s','\u015F':'s','\u0161':'s','\u0162':'T','\u0164':'T','\u0166':'T','\u0163':'t','\u0165':'t','\u0167':'t','\u0168':'U','\u016A':'U','\u016C':'U','\u016E':'U','\u0170':'U','\u0172':'U','\u0169':'u','\u016B':'u','\u016D':'u','\u016F':'u','\u0171':'u','\u0173':'u','\u0174':'W','\u0175':'w','\u0176':'Y','\u0177':'y','\u0178':'Y','\u0179':'Z','\u017B':'Z','\u017D':'Z','\u017A':'z','\u017C':'z','\u017E':'z','\u0132':'IJ','\u0133':'ij','\u0152':'Oe','\u0153':'oe','\u0149':"'n",'\u017F':'s'};/** Used to map characters to HTML entities. */var htmlEscapes={'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'};/** Used to map HTML entities to characters. */var htmlUnescapes={'&amp;':'&','&lt;':'<','&gt;':'>','&quot;':'"','&#39;':"'"};/** Used to escape characters for inclusion in compiled string literals. */var stringEscapes={'\\':'\\',"'":"'",'\n':'n','\r':'r','\u2028':'u2028','\u2029':'u2029'};/** Built-in method references without a dependency on `root`. */var freeParseFloat=parseFloat,freeParseInt=parseInt;/** Detect free variable `global` from Node.js. */var freeGlobal=(typeof global==='undefined'?'undefined':_typeof(global))=='object'&&global&&global.Object===Object&&global;/** Detect free variable `self`. */var freeSelf=(typeof self==='undefined'?'undefined':_typeof(self))=='object'&&self&&self.Object===Object&&self;/** Used as a reference to the global object. */var root=freeGlobal||freeSelf||Function('return this')();/** Detect free variable `exports`. */var freeExports=( false?'undefined':_typeof(exports))=='object'&&exports&&!exports.nodeType&&exports;/** Detect free variable `module`. */var freeModule=freeExports&&( false?'undefined':_typeof(module))=='object'&&module&&!module.nodeType&&module;/** Detect the popular CommonJS extension `module.exports`. */var moduleExports=freeModule&&freeModule.exports===freeExports;/** Detect free variable `process` from Node.js. */var freeProcess=moduleExports&&freeGlobal.process;/** Used to access faster Node.js helpers. */var nodeUtil=function(){try{return freeProcess&&freeProcess.binding&&freeProcess.binding('util');}catch(e){}}();/* Node.js helper references. */var nodeIsArrayBuffer=nodeUtil&&nodeUtil.isArrayBuffer,nodeIsDate=nodeUtil&&nodeUtil.isDate,nodeIsMap=nodeUtil&&nodeUtil.isMap,nodeIsRegExp=nodeUtil&&nodeUtil.isRegExp,nodeIsSet=nodeUtil&&nodeUtil.isSet,nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray;/*--------------------------------------------------------------------------*//**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */function addMapEntry(map,pair){// Don't return `map.set` because it's not chainable in IE 11.
map.set(pair[0],pair[1]);return map;}/**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */function addSetEntry(set,value){// Don't return `set.add` because it's not chainable in IE 11.
set.add(value);return set;}/**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */function apply(func,thisArg,args){switch(args.length){case 0:return func.call(thisArg);case 1:return func.call(thisArg,args[0]);case 2:return func.call(thisArg,args[0],args[1]);case 3:return func.call(thisArg,args[0],args[1],args[2]);}return func.apply(thisArg,args);}/**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */function arrayAggregator(array,setter,iteratee,accumulator){var index=-1,length=array==null?0:array.length;while(++index<length){var value=array[index];setter(accumulator,value,iteratee(value),array);}return accumulator;}/**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */function arrayEach(array,iteratee){var index=-1,length=array==null?0:array.length;while(++index<length){if(iteratee(array[index],index,array)===false){break;}}return array;}/**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */function arrayEachRight(array,iteratee){var length=array==null?0:array.length;while(length--){if(iteratee(array[length],length,array)===false){break;}}return array;}/**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */function arrayEvery(array,predicate){var index=-1,length=array==null?0:array.length;while(++index<length){if(!predicate(array[index],index,array)){return false;}}return true;}/**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */function arrayFilter(array,predicate){var index=-1,length=array==null?0:array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(predicate(value,index,array)){result[resIndex++]=value;}}return result;}/**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */function arrayIncludes(array,value){var length=array==null?0:array.length;return!!length&&baseIndexOf(array,value,0)>-1;}/**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */function arrayIncludesWith(array,value,comparator){var index=-1,length=array==null?0:array.length;while(++index<length){if(comparator(value,array[index])){return true;}}return false;}/**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */function arrayMap(array,iteratee){var index=-1,length=array==null?0:array.length,result=Array(length);while(++index<length){result[index]=iteratee(array[index],index,array);}return result;}/**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */function arrayPush(array,values){var index=-1,length=values.length,offset=array.length;while(++index<length){array[offset+index]=values[index];}return array;}/**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */function arrayReduce(array,iteratee,accumulator,initAccum){var index=-1,length=array==null?0:array.length;if(initAccum&&length){accumulator=array[++index];}while(++index<length){accumulator=iteratee(accumulator,array[index],index,array);}return accumulator;}/**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */function arrayReduceRight(array,iteratee,accumulator,initAccum){var length=array==null?0:array.length;if(initAccum&&length){accumulator=array[--length];}while(length--){accumulator=iteratee(accumulator,array[length],length,array);}return accumulator;}/**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */function arraySome(array,predicate){var index=-1,length=array==null?0:array.length;while(++index<length){if(predicate(array[index],index,array)){return true;}}return false;}/**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */var asciiSize=baseProperty('length');/**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */function asciiToArray(string){return string.split('');}/**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */function asciiWords(string){return string.match(reAsciiWord)||[];}/**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */function baseFindKey(collection,predicate,eachFunc){var result;eachFunc(collection,function(value,key,collection){if(predicate(value,key,collection)){result=key;return false;}});return result;}/**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */function baseFindIndex(array,predicate,fromIndex,fromRight){var length=array.length,index=fromIndex+(fromRight?1:-1);while(fromRight?index--:++index<length){if(predicate(array[index],index,array)){return index;}}return-1;}/**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */function baseIndexOf(array,value,fromIndex){return value===value?strictIndexOf(array,value,fromIndex):baseFindIndex(array,baseIsNaN,fromIndex);}/**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */function baseIndexOfWith(array,value,fromIndex,comparator){var index=fromIndex-1,length=array.length;while(++index<length){if(comparator(array[index],value)){return index;}}return-1;}/**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */function baseIsNaN(value){return value!==value;}/**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */function baseMean(array,iteratee){var length=array==null?0:array.length;return length?baseSum(array,iteratee)/length:NAN;}/**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */function baseProperty(key){return function(object){return object==null?undefined:object[key];};}/**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */function basePropertyOf(object){return function(key){return object==null?undefined:object[key];};}/**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */function baseReduce(collection,iteratee,accumulator,initAccum,eachFunc){eachFunc(collection,function(value,index,collection){accumulator=initAccum?(initAccum=false,value):iteratee(accumulator,value,index,collection);});return accumulator;}/**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */function baseSortBy(array,comparer){var length=array.length;array.sort(comparer);while(length--){array[length]=array[length].value;}return array;}/**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */function baseSum(array,iteratee){var result,index=-1,length=array.length;while(++index<length){var current=iteratee(array[index]);if(current!==undefined){result=result===undefined?current:result+current;}}return result;}/**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */function baseTimes(n,iteratee){var index=-1,result=Array(n);while(++index<n){result[index]=iteratee(index);}return result;}/**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */function baseToPairs(object,props){return arrayMap(props,function(key){return[key,object[key]];});}/**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */function baseUnary(func){return function(value){return func(value);};}/**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */function baseValues(object,props){return arrayMap(props,function(key){return object[key];});}/**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */function cacheHas(cache,key){return cache.has(key);}/**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */function charsStartIndex(strSymbols,chrSymbols){var index=-1,length=strSymbols.length;while(++index<length&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}return index;}/**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */function charsEndIndex(strSymbols,chrSymbols){var index=strSymbols.length;while(index--&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}return index;}/**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */function countHolders(array,placeholder){var length=array.length,result=0;while(length--){if(array[length]===placeholder){++result;}}return result;}/**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */var deburrLetter=basePropertyOf(deburredLetters);/**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */var escapeHtmlChar=basePropertyOf(htmlEscapes);/**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */function escapeStringChar(chr){return'\\'+stringEscapes[chr];}/**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */function getValue(object,key){return object==null?undefined:object[key];}/**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */function hasUnicode(string){return reHasUnicode.test(string);}/**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */function hasUnicodeWord(string){return reHasUnicodeWord.test(string);}/**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */function iteratorToArray(iterator){var data,result=[];while(!(data=iterator.next()).done){result.push(data.value);}return result;}/**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */function mapToArray(map){var index=-1,result=Array(map.size);map.forEach(function(value,key){result[++index]=[key,value];});return result;}/**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */function overArg(func,transform){return function(arg){return func(transform(arg));};}/**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */function replaceHolders(array,placeholder){var index=-1,length=array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(value===placeholder||value===PLACEHOLDER){array[index]=PLACEHOLDER;result[resIndex++]=index;}}return result;}/**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */function setToArray(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=value;});return result;}/**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */function setToPairs(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=[value,value];});return result;}/**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */function strictIndexOf(array,value,fromIndex){var index=fromIndex-1,length=array.length;while(++index<length){if(array[index]===value){return index;}}return-1;}/**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */function strictLastIndexOf(array,value,fromIndex){var index=fromIndex+1;while(index--){if(array[index]===value){return index;}}return index;}/**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */function stringSize(string){return hasUnicode(string)?unicodeSize(string):asciiSize(string);}/**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */function stringToArray(string){return hasUnicode(string)?unicodeToArray(string):asciiToArray(string);}/**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */var unescapeHtmlChar=basePropertyOf(htmlUnescapes);/**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */function unicodeSize(string){var result=reUnicode.lastIndex=0;while(reUnicode.test(string)){++result;}return result;}/**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */function unicodeToArray(string){return string.match(reUnicode)||[];}/**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */function unicodeWords(string){return string.match(reUnicodeWord)||[];}/*--------------------------------------------------------------------------*//**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */var runInContext=function runInContext(context){context=context==null?root:_.defaults(root.Object(),context,_.pick(root,contextProps));/** Built-in constructor references. */var Array=context.Array,Date=context.Date,Error=context.Error,Function=context.Function,Math=context.Math,Object=context.Object,RegExp=context.RegExp,String=context.String,TypeError=context.TypeError;/** Used for built-in method references. */var arrayProto=Array.prototype,funcProto=Function.prototype,objectProto=Object.prototype;/** Used to detect overreaching core-js shims. */var coreJsData=context['__core-js_shared__'];/** Used to resolve the decompiled source of functions. */var funcToString=funcProto.toString;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/** Used to generate unique IDs. */var idCounter=0;/** Used to detect methods masquerading as native. */var maskSrcKey=function(){var uid=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||'');return uid?'Symbol(src)_1.'+uid:'';}();/**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */var nativeObjectToString=objectProto.toString;/** Used to infer the `Object` constructor. */var objectCtorString=funcToString.call(Object);/** Used to restore the original `_` reference in `_.noConflict`. */var oldDash=root._;/** Used to detect if a method is native. */var reIsNative=RegExp('^'+funcToString.call(hasOwnProperty).replace(reRegExpChar,'\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,'$1.*?')+'$');/** Built-in value references. */var Buffer=moduleExports?context.Buffer:undefined,_Symbol=context.Symbol,Uint8Array=context.Uint8Array,allocUnsafe=Buffer?Buffer.allocUnsafe:undefined,getPrototype=overArg(Object.getPrototypeOf,Object),objectCreate=Object.create,propertyIsEnumerable=objectProto.propertyIsEnumerable,splice=arrayProto.splice,spreadableSymbol=_Symbol?_Symbol.isConcatSpreadable:undefined,symIterator=_Symbol?_Symbol.iterator:undefined,symToStringTag=_Symbol?_Symbol.toStringTag:undefined;var defineProperty=function(){try{var func=getNative(Object,'defineProperty');func({},'',{});return func;}catch(e){}}();/** Mocked built-ins. */var ctxClearTimeout=context.clearTimeout!==root.clearTimeout&&context.clearTimeout,ctxNow=Date&&Date.now!==root.Date.now&&Date.now,ctxSetTimeout=context.setTimeout!==root.setTimeout&&context.setTimeout;/* Built-in method references for those with the same name as other `lodash` methods. */var nativeCeil=Math.ceil,nativeFloor=Math.floor,nativeGetSymbols=Object.getOwnPropertySymbols,nativeIsBuffer=Buffer?Buffer.isBuffer:undefined,nativeIsFinite=context.isFinite,nativeJoin=arrayProto.join,nativeKeys=overArg(Object.keys,Object),nativeMax=Math.max,nativeMin=Math.min,nativeNow=Date.now,nativeParseInt=context.parseInt,nativeRandom=Math.random,nativeReverse=arrayProto.reverse;/* Built-in method references that are verified to be native. */var DataView=getNative(context,'DataView'),Map=getNative(context,'Map'),Promise=getNative(context,'Promise'),Set=getNative(context,'Set'),WeakMap=getNative(context,'WeakMap'),nativeCreate=getNative(Object,'create');/** Used to store function metadata. */var metaMap=WeakMap&&new WeakMap();/** Used to lookup unminified function names. */var realNames={};/** Used to detect maps, sets, and weakmaps. */var dataViewCtorString=toSource(DataView),mapCtorString=toSource(Map),promiseCtorString=toSource(Promise),setCtorString=toSource(Set),weakMapCtorString=toSource(WeakMap);/** Used to convert symbols to primitives and strings. */var symbolProto=_Symbol?_Symbol.prototype:undefined,symbolValueOf=symbolProto?symbolProto.valueOf:undefined,symbolToString=symbolProto?symbolProto.toString:undefined;/*------------------------------------------------------------------------*//**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */function lodash(value){if(isObjectLike(value)&&!isArray(value)&&!(value instanceof LazyWrapper)){if(value instanceof LodashWrapper){return value;}if(hasOwnProperty.call(value,'__wrapped__')){return wrapperClone(value);}}return new LodashWrapper(value);}/**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */var baseCreate=function(){function object(){}return function(proto){if(!isObject(proto)){return{};}if(objectCreate){return objectCreate(proto);}object.prototype=proto;var result=new object();object.prototype=undefined;return result;};}();/**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */function baseLodash(){}// No operation performed.
/**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */function LodashWrapper(value,chainAll){this.__wrapped__=value;this.__actions__=[];this.__chain__=!!chainAll;this.__index__=0;this.__values__=undefined;}/**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */lodash.templateSettings={/**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */'escape':reEscape,/**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */'evaluate':reEvaluate,/**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */'interpolate':reInterpolate,/**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */'variable':'',/**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */'imports':{/**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */'_':lodash}};// Ensure wrappers are instances of `baseLodash`.
lodash.prototype=baseLodash.prototype;lodash.prototype.constructor=lodash;LodashWrapper.prototype=baseCreate(baseLodash.prototype);LodashWrapper.prototype.constructor=LodashWrapper;/*------------------------------------------------------------------------*//**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */function LazyWrapper(value){this.__wrapped__=value;this.__actions__=[];this.__dir__=1;this.__filtered__=false;this.__iteratees__=[];this.__takeCount__=MAX_ARRAY_LENGTH;this.__views__=[];}/**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */function lazyClone(){var result=new LazyWrapper(this.__wrapped__);result.__actions__=copyArray(this.__actions__);result.__dir__=this.__dir__;result.__filtered__=this.__filtered__;result.__iteratees__=copyArray(this.__iteratees__);result.__takeCount__=this.__takeCount__;result.__views__=copyArray(this.__views__);return result;}/**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */function lazyReverse(){if(this.__filtered__){var result=new LazyWrapper(this);result.__dir__=-1;result.__filtered__=true;}else{result=this.clone();result.__dir__*=-1;}return result;}/**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */function lazyValue(){var array=this.__wrapped__.value(),dir=this.__dir__,isArr=isArray(array),isRight=dir<0,arrLength=isArr?array.length:0,view=getView(0,arrLength,this.__views__),start=view.start,end=view.end,length=end-start,index=isRight?end:start-1,iteratees=this.__iteratees__,iterLength=iteratees.length,resIndex=0,takeCount=nativeMin(length,this.__takeCount__);if(!isArr||!isRight&&arrLength==length&&takeCount==length){return baseWrapperValue(array,this.__actions__);}var result=[];outer:while(length--&&resIndex<takeCount){index+=dir;var iterIndex=-1,value=array[index];while(++iterIndex<iterLength){var data=iteratees[iterIndex],iteratee=data.iteratee,type=data.type,computed=iteratee(value);if(type==LAZY_MAP_FLAG){value=computed;}else if(!computed){if(type==LAZY_FILTER_FLAG){continue outer;}else{break outer;}}}result[resIndex++]=value;}return result;}// Ensure `LazyWrapper` is an instance of `baseLodash`.
LazyWrapper.prototype=baseCreate(baseLodash.prototype);LazyWrapper.prototype.constructor=LazyWrapper;/*------------------------------------------------------------------------*//**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */function Hash(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */function hashClear(){this.__data__=nativeCreate?nativeCreate(null):{};this.size=0;}/**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */function hashDelete(key){var result=this.has(key)&&delete this.__data__[key];this.size-=result?1:0;return result;}/**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */function hashGet(key){var data=this.__data__;if(nativeCreate){var result=data[key];return result===HASH_UNDEFINED?undefined:result;}return hasOwnProperty.call(data,key)?data[key]:undefined;}/**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */function hashHas(key){var data=this.__data__;return nativeCreate?data[key]!==undefined:hasOwnProperty.call(data,key);}/**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */function hashSet(key,value){var data=this.__data__;this.size+=this.has(key)?0:1;data[key]=nativeCreate&&value===undefined?HASH_UNDEFINED:value;return this;}// Add methods to `Hash`.
Hash.prototype.clear=hashClear;Hash.prototype['delete']=hashDelete;Hash.prototype.get=hashGet;Hash.prototype.has=hashHas;Hash.prototype.set=hashSet;/*------------------------------------------------------------------------*//**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */function ListCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */function listCacheClear(){this.__data__=[];this.size=0;}/**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */function listCacheDelete(key){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){return false;}var lastIndex=data.length-1;if(index==lastIndex){data.pop();}else{splice.call(data,index,1);}--this.size;return true;}/**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */function listCacheGet(key){var data=this.__data__,index=assocIndexOf(data,key);return index<0?undefined:data[index][1];}/**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */function listCacheHas(key){return assocIndexOf(this.__data__,key)>-1;}/**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */function listCacheSet(key,value){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){++this.size;data.push([key,value]);}else{data[index][1]=value;}return this;}// Add methods to `ListCache`.
ListCache.prototype.clear=listCacheClear;ListCache.prototype['delete']=listCacheDelete;ListCache.prototype.get=listCacheGet;ListCache.prototype.has=listCacheHas;ListCache.prototype.set=listCacheSet;/*------------------------------------------------------------------------*//**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */function MapCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */function mapCacheClear(){this.size=0;this.__data__={'hash':new Hash(),'map':new(Map||ListCache)(),'string':new Hash()};}/**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */function mapCacheDelete(key){var result=getMapData(this,key)['delete'](key);this.size-=result?1:0;return result;}/**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */function mapCacheGet(key){return getMapData(this,key).get(key);}/**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */function mapCacheHas(key){return getMapData(this,key).has(key);}/**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */function mapCacheSet(key,value){var data=getMapData(this,key),size=data.size;data.set(key,value);this.size+=data.size==size?0:1;return this;}// Add methods to `MapCache`.
MapCache.prototype.clear=mapCacheClear;MapCache.prototype['delete']=mapCacheDelete;MapCache.prototype.get=mapCacheGet;MapCache.prototype.has=mapCacheHas;MapCache.prototype.set=mapCacheSet;/*------------------------------------------------------------------------*//**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */function SetCache(values){var index=-1,length=values==null?0:values.length;this.__data__=new MapCache();while(++index<length){this.add(values[index]);}}/**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */function setCacheAdd(value){this.__data__.set(value,HASH_UNDEFINED);return this;}/**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */function setCacheHas(value){return this.__data__.has(value);}// Add methods to `SetCache`.
SetCache.prototype.add=SetCache.prototype.push=setCacheAdd;SetCache.prototype.has=setCacheHas;/*------------------------------------------------------------------------*//**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */function Stack(entries){var data=this.__data__=new ListCache(entries);this.size=data.size;}/**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */function stackClear(){this.__data__=new ListCache();this.size=0;}/**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */function stackDelete(key){var data=this.__data__,result=data['delete'](key);this.size=data.size;return result;}/**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */function stackGet(key){return this.__data__.get(key);}/**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */function stackHas(key){return this.__data__.has(key);}/**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */function stackSet(key,value){var data=this.__data__;if(data instanceof ListCache){var pairs=data.__data__;if(!Map||pairs.length<LARGE_ARRAY_SIZE-1){pairs.push([key,value]);this.size=++data.size;return this;}data=this.__data__=new MapCache(pairs);}data.set(key,value);this.size=data.size;return this;}// Add methods to `Stack`.
Stack.prototype.clear=stackClear;Stack.prototype['delete']=stackDelete;Stack.prototype.get=stackGet;Stack.prototype.has=stackHas;Stack.prototype.set=stackSet;/*------------------------------------------------------------------------*//**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */function arrayLikeKeys(value,inherited){var isArr=isArray(value),isArg=!isArr&&isArguments(value),isBuff=!isArr&&!isArg&&isBuffer(value),isType=!isArr&&!isArg&&!isBuff&&isTypedArray(value),skipIndexes=isArr||isArg||isBuff||isType,result=skipIndexes?baseTimes(value.length,String):[],length=result.length;for(var key in value){if((inherited||hasOwnProperty.call(value,key))&&!(skipIndexes&&(// Safari 9 has enumerable `arguments.length` in strict mode.
key=='length'||// Node.js 0.10 has enumerable non-index properties on buffers.
isBuff&&(key=='offset'||key=='parent')||// PhantomJS 2 has enumerable non-index properties on typed arrays.
isType&&(key=='buffer'||key=='byteLength'||key=='byteOffset')||// Skip index properties.
isIndex(key,length)))){result.push(key);}}return result;}/**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */function arraySample(array){var length=array.length;return length?array[baseRandom(0,length-1)]:undefined;}/**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */function arraySampleSize(array,n){return shuffleSelf(copyArray(array),baseClamp(n,0,array.length));}/**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */function arrayShuffle(array){return shuffleSelf(copyArray(array));}/**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */function assignMergeValue(object,key,value){if(value!==undefined&&!eq(object[key],value)||value===undefined&&!(key in object)){baseAssignValue(object,key,value);}}/**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */function assignValue(object,key,value){var objValue=object[key];if(!(hasOwnProperty.call(object,key)&&eq(objValue,value))||value===undefined&&!(key in object)){baseAssignValue(object,key,value);}}/**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */function assocIndexOf(array,key){var length=array.length;while(length--){if(eq(array[length][0],key)){return length;}}return-1;}/**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */function baseAggregator(collection,setter,iteratee,accumulator){baseEach(collection,function(value,key,collection){setter(accumulator,value,iteratee(value),collection);});return accumulator;}/**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */function baseAssign(object,source){return object&&copyObject(source,keys(source),object);}/**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */function baseAssignIn(object,source){return object&&copyObject(source,keysIn(source),object);}/**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */function baseAssignValue(object,key,value){if(key=='__proto__'&&defineProperty){defineProperty(object,key,{'configurable':true,'enumerable':true,'value':value,'writable':true});}else{object[key]=value;}}/**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */function baseAt(object,paths){var index=-1,length=paths.length,result=Array(length),skip=object==null;while(++index<length){result[index]=skip?undefined:get(object,paths[index]);}return result;}/**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */function baseClamp(number,lower,upper){if(number===number){if(upper!==undefined){number=number<=upper?number:upper;}if(lower!==undefined){number=number>=lower?number:lower;}}return number;}/**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */function baseClone(value,bitmask,customizer,key,object,stack){var result,isDeep=bitmask&CLONE_DEEP_FLAG,isFlat=bitmask&CLONE_FLAT_FLAG,isFull=bitmask&CLONE_SYMBOLS_FLAG;if(customizer){result=object?customizer(value,key,object,stack):customizer(value);}if(result!==undefined){return result;}if(!isObject(value)){return value;}var isArr=isArray(value);if(isArr){result=initCloneArray(value);if(!isDeep){return copyArray(value,result);}}else{var tag=getTag(value),isFunc=tag==funcTag||tag==genTag;if(isBuffer(value)){return cloneBuffer(value,isDeep);}if(tag==objectTag||tag==argsTag||isFunc&&!object){result=isFlat||isFunc?{}:initCloneObject(value);if(!isDeep){return isFlat?copySymbolsIn(value,baseAssignIn(result,value)):copySymbols(value,baseAssign(result,value));}}else{if(!cloneableTags[tag]){return object?value:{};}result=initCloneByTag(value,tag,baseClone,isDeep);}}// Check for circular references and return its corresponding clone.
stack||(stack=new Stack());var stacked=stack.get(value);if(stacked){return stacked;}stack.set(value,result);var keysFunc=isFull?isFlat?getAllKeysIn:getAllKeys:isFlat?keysIn:keys;var props=isArr?undefined:keysFunc(value);arrayEach(props||value,function(subValue,key){if(props){key=subValue;subValue=value[key];}// Recursively populate clone (susceptible to call stack limits).
assignValue(result,key,baseClone(subValue,bitmask,customizer,key,value,stack));});return result;}/**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */function baseConforms(source){var props=keys(source);return function(object){return baseConformsTo(object,source,props);};}/**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */function baseConformsTo(object,source,props){var length=props.length;if(object==null){return!length;}object=Object(object);while(length--){var key=props[length],predicate=source[key],value=object[key];if(value===undefined&&!(key in object)||!predicate(value)){return false;}}return true;}/**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */function baseDelay(func,wait,args){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return setTimeout(function(){func.apply(undefined,args);},wait);}/**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */function baseDifference(array,values,iteratee,comparator){var index=-1,includes=arrayIncludes,isCommon=true,length=array.length,result=[],valuesLength=values.length;if(!length){return result;}if(iteratee){values=arrayMap(values,baseUnary(iteratee));}if(comparator){includes=arrayIncludesWith;isCommon=false;}else if(values.length>=LARGE_ARRAY_SIZE){includes=cacheHas;isCommon=false;values=new SetCache(values);}outer:while(++index<length){var value=array[index],computed=iteratee==null?value:iteratee(value);value=comparator||value!==0?value:0;if(isCommon&&computed===computed){var valuesIndex=valuesLength;while(valuesIndex--){if(values[valuesIndex]===computed){continue outer;}}result.push(value);}else if(!includes(values,computed,comparator)){result.push(value);}}return result;}/**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */var baseEach=createBaseEach(baseForOwn);/**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */var baseEachRight=createBaseEach(baseForOwnRight,true);/**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */function baseEvery(collection,predicate){var result=true;baseEach(collection,function(value,index,collection){result=!!predicate(value,index,collection);return result;});return result;}/**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */function baseExtremum(array,iteratee,comparator){var index=-1,length=array.length;while(++index<length){var value=array[index],current=iteratee(value);if(current!=null&&(computed===undefined?current===current&&!isSymbol(current):comparator(current,computed))){var computed=current,result=value;}}return result;}/**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */function baseFill(array,value,start,end){var length=array.length;start=toInteger(start);if(start<0){start=-start>length?0:length+start;}end=end===undefined||end>length?length:toInteger(end);if(end<0){end+=length;}end=start>end?0:toLength(end);while(start<end){array[start++]=value;}return array;}/**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */function baseFilter(collection,predicate){var result=[];baseEach(collection,function(value,index,collection){if(predicate(value,index,collection)){result.push(value);}});return result;}/**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */function baseFlatten(array,depth,predicate,isStrict,result){var index=-1,length=array.length;predicate||(predicate=isFlattenable);result||(result=[]);while(++index<length){var value=array[index];if(depth>0&&predicate(value)){if(depth>1){// Recursively flatten arrays (susceptible to call stack limits).
baseFlatten(value,depth-1,predicate,isStrict,result);}else{arrayPush(result,value);}}else if(!isStrict){result[result.length]=value;}}return result;}/**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */var baseFor=createBaseFor();/**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */var baseForRight=createBaseFor(true);/**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */function baseForOwn(object,iteratee){return object&&baseFor(object,iteratee,keys);}/**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */function baseForOwnRight(object,iteratee){return object&&baseForRight(object,iteratee,keys);}/**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */function baseFunctions(object,props){return arrayFilter(props,function(key){return isFunction(object[key]);});}/**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */function baseGet(object,path){path=castPath(path,object);var index=0,length=path.length;while(object!=null&&index<length){object=object[toKey(path[index++])];}return index&&index==length?object:undefined;}/**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */function baseGetAllKeys(object,keysFunc,symbolsFunc){var result=keysFunc(object);return isArray(object)?result:arrayPush(result,symbolsFunc(object));}/**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */function baseGetTag(value){if(value==null){return value===undefined?undefinedTag:nullTag;}return symToStringTag&&symToStringTag in Object(value)?getRawTag(value):objectToString(value);}/**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */function baseGt(value,other){return value>other;}/**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */function baseHas(object,key){return object!=null&&hasOwnProperty.call(object,key);}/**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */function baseHasIn(object,key){return object!=null&&key in Object(object);}/**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */function baseInRange(number,start,end){return number>=nativeMin(start,end)&&number<nativeMax(start,end);}/**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */function baseIntersection(arrays,iteratee,comparator){var includes=comparator?arrayIncludesWith:arrayIncludes,length=arrays[0].length,othLength=arrays.length,othIndex=othLength,caches=Array(othLength),maxLength=Infinity,result=[];while(othIndex--){var array=arrays[othIndex];if(othIndex&&iteratee){array=arrayMap(array,baseUnary(iteratee));}maxLength=nativeMin(array.length,maxLength);caches[othIndex]=!comparator&&(iteratee||length>=120&&array.length>=120)?new SetCache(othIndex&&array):undefined;}array=arrays[0];var index=-1,seen=caches[0];outer:while(++index<length&&result.length<maxLength){var value=array[index],computed=iteratee?iteratee(value):value;value=comparator||value!==0?value:0;if(!(seen?cacheHas(seen,computed):includes(result,computed,comparator))){othIndex=othLength;while(--othIndex){var cache=caches[othIndex];if(!(cache?cacheHas(cache,computed):includes(arrays[othIndex],computed,comparator))){continue outer;}}if(seen){seen.push(computed);}result.push(value);}}return result;}/**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */function baseInverter(object,setter,iteratee,accumulator){baseForOwn(object,function(value,key,object){setter(accumulator,iteratee(value),key,object);});return accumulator;}/**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */function baseInvoke(object,path,args){path=castPath(path,object);object=parent(object,path);var func=object==null?object:object[toKey(last(path))];return func==null?undefined:apply(func,object,args);}/**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */function baseIsArguments(value){return isObjectLike(value)&&baseGetTag(value)==argsTag;}/**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */function baseIsArrayBuffer(value){return isObjectLike(value)&&baseGetTag(value)==arrayBufferTag;}/**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */function baseIsDate(value){return isObjectLike(value)&&baseGetTag(value)==dateTag;}/**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */function baseIsEqual(value,other,bitmask,customizer,stack){if(value===other){return true;}if(value==null||other==null||!isObjectLike(value)&&!isObjectLike(other)){return value!==value&&other!==other;}return baseIsEqualDeep(value,other,bitmask,customizer,baseIsEqual,stack);}/**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */function baseIsEqualDeep(object,other,bitmask,customizer,equalFunc,stack){var objIsArr=isArray(object),othIsArr=isArray(other),objTag=objIsArr?arrayTag:getTag(object),othTag=othIsArr?arrayTag:getTag(other);objTag=objTag==argsTag?objectTag:objTag;othTag=othTag==argsTag?objectTag:othTag;var objIsObj=objTag==objectTag,othIsObj=othTag==objectTag,isSameTag=objTag==othTag;if(isSameTag&&isBuffer(object)){if(!isBuffer(other)){return false;}objIsArr=true;objIsObj=false;}if(isSameTag&&!objIsObj){stack||(stack=new Stack());return objIsArr||isTypedArray(object)?equalArrays(object,other,bitmask,customizer,equalFunc,stack):equalByTag(object,other,objTag,bitmask,customizer,equalFunc,stack);}if(!(bitmask&COMPARE_PARTIAL_FLAG)){var objIsWrapped=objIsObj&&hasOwnProperty.call(object,'__wrapped__'),othIsWrapped=othIsObj&&hasOwnProperty.call(other,'__wrapped__');if(objIsWrapped||othIsWrapped){var objUnwrapped=objIsWrapped?object.value():object,othUnwrapped=othIsWrapped?other.value():other;stack||(stack=new Stack());return equalFunc(objUnwrapped,othUnwrapped,bitmask,customizer,stack);}}if(!isSameTag){return false;}stack||(stack=new Stack());return equalObjects(object,other,bitmask,customizer,equalFunc,stack);}/**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */function baseIsMap(value){return isObjectLike(value)&&getTag(value)==mapTag;}/**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */function baseIsMatch(object,source,matchData,customizer){var index=matchData.length,length=index,noCustomizer=!customizer;if(object==null){return!length;}object=Object(object);while(index--){var data=matchData[index];if(noCustomizer&&data[2]?data[1]!==object[data[0]]:!(data[0]in object)){return false;}}while(++index<length){data=matchData[index];var key=data[0],objValue=object[key],srcValue=data[1];if(noCustomizer&&data[2]){if(objValue===undefined&&!(key in object)){return false;}}else{var stack=new Stack();if(customizer){var result=customizer(objValue,srcValue,key,object,source,stack);}if(!(result===undefined?baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG,customizer,stack):result)){return false;}}}return true;}/**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */function baseIsNative(value){if(!isObject(value)||isMasked(value)){return false;}var pattern=isFunction(value)?reIsNative:reIsHostCtor;return pattern.test(toSource(value));}/**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */function baseIsRegExp(value){return isObjectLike(value)&&baseGetTag(value)==regexpTag;}/**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */function baseIsSet(value){return isObjectLike(value)&&getTag(value)==setTag;}/**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */function baseIsTypedArray(value){return isObjectLike(value)&&isLength(value.length)&&!!typedArrayTags[baseGetTag(value)];}/**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */function baseIteratee(value){// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
// See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
if(typeof value=='function'){return value;}if(value==null){return identity;}if((typeof value==='undefined'?'undefined':_typeof(value))=='object'){return isArray(value)?baseMatchesProperty(value[0],value[1]):baseMatches(value);}return property(value);}/**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */function baseKeys(object){if(!isPrototype(object)){return nativeKeys(object);}var result=[];for(var key in Object(object)){if(hasOwnProperty.call(object,key)&&key!='constructor'){result.push(key);}}return result;}/**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */function baseKeysIn(object){if(!isObject(object)){return nativeKeysIn(object);}var isProto=isPrototype(object),result=[];for(var key in object){if(!(key=='constructor'&&(isProto||!hasOwnProperty.call(object,key)))){result.push(key);}}return result;}/**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */function baseLt(value,other){return value<other;}/**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */function baseMap(collection,iteratee){var index=-1,result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value,key,collection){result[++index]=iteratee(value,key,collection);});return result;}/**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */function baseMatches(source){var matchData=getMatchData(source);if(matchData.length==1&&matchData[0][2]){return matchesStrictComparable(matchData[0][0],matchData[0][1]);}return function(object){return object===source||baseIsMatch(object,source,matchData);};}/**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */function baseMatchesProperty(path,srcValue){if(isKey(path)&&isStrictComparable(srcValue)){return matchesStrictComparable(toKey(path),srcValue);}return function(object){var objValue=get(object,path);return objValue===undefined&&objValue===srcValue?hasIn(object,path):baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG);};}/**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */function baseMerge(object,source,srcIndex,customizer,stack){if(object===source){return;}baseFor(source,function(srcValue,key){if(isObject(srcValue)){stack||(stack=new Stack());baseMergeDeep(object,source,key,srcIndex,baseMerge,customizer,stack);}else{var newValue=customizer?customizer(object[key],srcValue,key+'',object,source,stack):undefined;if(newValue===undefined){newValue=srcValue;}assignMergeValue(object,key,newValue);}},keysIn);}/**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */function baseMergeDeep(object,source,key,srcIndex,mergeFunc,customizer,stack){var objValue=object[key],srcValue=source[key],stacked=stack.get(srcValue);if(stacked){assignMergeValue(object,key,stacked);return;}var newValue=customizer?customizer(objValue,srcValue,key+'',object,source,stack):undefined;var isCommon=newValue===undefined;if(isCommon){var isArr=isArray(srcValue),isBuff=!isArr&&isBuffer(srcValue),isTyped=!isArr&&!isBuff&&isTypedArray(srcValue);newValue=srcValue;if(isArr||isBuff||isTyped){if(isArray(objValue)){newValue=objValue;}else if(isArrayLikeObject(objValue)){newValue=copyArray(objValue);}else if(isBuff){isCommon=false;newValue=cloneBuffer(srcValue,true);}else if(isTyped){isCommon=false;newValue=cloneTypedArray(srcValue,true);}else{newValue=[];}}else if(isPlainObject(srcValue)||isArguments(srcValue)){newValue=objValue;if(isArguments(objValue)){newValue=toPlainObject(objValue);}else if(!isObject(objValue)||srcIndex&&isFunction(objValue)){newValue=initCloneObject(srcValue);}}else{isCommon=false;}}if(isCommon){// Recursively merge objects and arrays (susceptible to call stack limits).
stack.set(srcValue,newValue);mergeFunc(newValue,srcValue,srcIndex,customizer,stack);stack['delete'](srcValue);}assignMergeValue(object,key,newValue);}/**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */function baseNth(array,n){var length=array.length;if(!length){return;}n+=n<0?length:0;return isIndex(n,length)?array[n]:undefined;}/**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */function baseOrderBy(collection,iteratees,orders){var index=-1;iteratees=arrayMap(iteratees.length?iteratees:[identity],baseUnary(getIteratee()));var result=baseMap(collection,function(value,key,collection){var criteria=arrayMap(iteratees,function(iteratee){return iteratee(value);});return{'criteria':criteria,'index':++index,'value':value};});return baseSortBy(result,function(object,other){return compareMultiple(object,other,orders);});}/**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */function basePick(object,paths){return basePickBy(object,paths,function(value,path){return hasIn(object,path);});}/**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */function basePickBy(object,paths,predicate){var index=-1,length=paths.length,result={};while(++index<length){var path=paths[index],value=baseGet(object,path);if(predicate(value,path)){baseSet(result,castPath(path,object),value);}}return result;}/**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */function basePropertyDeep(path){return function(object){return baseGet(object,path);};}/**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */function basePullAll(array,values,iteratee,comparator){var indexOf=comparator?baseIndexOfWith:baseIndexOf,index=-1,length=values.length,seen=array;if(array===values){values=copyArray(values);}if(iteratee){seen=arrayMap(array,baseUnary(iteratee));}while(++index<length){var fromIndex=0,value=values[index],computed=iteratee?iteratee(value):value;while((fromIndex=indexOf(seen,computed,fromIndex,comparator))>-1){if(seen!==array){splice.call(seen,fromIndex,1);}splice.call(array,fromIndex,1);}}return array;}/**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */function basePullAt(array,indexes){var length=array?indexes.length:0,lastIndex=length-1;while(length--){var index=indexes[length];if(length==lastIndex||index!==previous){var previous=index;if(isIndex(index)){splice.call(array,index,1);}else{baseUnset(array,index);}}}return array;}/**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */function baseRandom(lower,upper){return lower+nativeFloor(nativeRandom()*(upper-lower+1));}/**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */function baseRange(start,end,step,fromRight){var index=-1,length=nativeMax(nativeCeil((end-start)/(step||1)),0),result=Array(length);while(length--){result[fromRight?length:++index]=start;start+=step;}return result;}/**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */function baseRepeat(string,n){var result='';if(!string||n<1||n>MAX_SAFE_INTEGER){return result;}// Leverage the exponentiation by squaring algorithm for a faster repeat.
// See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
do{if(n%2){result+=string;}n=nativeFloor(n/2);if(n){string+=string;}}while(n);return result;}/**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */function baseRest(func,start){return setToString(overRest(func,start,identity),func+'');}/**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */function baseSample(collection){return arraySample(values(collection));}/**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */function baseSampleSize(collection,n){var array=values(collection);return shuffleSelf(array,baseClamp(n,0,array.length));}/**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */function baseSet(object,path,value,customizer){if(!isObject(object)){return object;}path=castPath(path,object);var index=-1,length=path.length,lastIndex=length-1,nested=object;while(nested!=null&&++index<length){var key=toKey(path[index]),newValue=value;if(index!=lastIndex){var objValue=nested[key];newValue=customizer?customizer(objValue,key,nested):undefined;if(newValue===undefined){newValue=isObject(objValue)?objValue:isIndex(path[index+1])?[]:{};}}assignValue(nested,key,newValue);nested=nested[key];}return object;}/**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */var baseSetData=!metaMap?identity:function(func,data){metaMap.set(func,data);return func;};/**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */var baseSetToString=!defineProperty?identity:function(func,string){return defineProperty(func,'toString',{'configurable':true,'enumerable':false,'value':constant(string),'writable':true});};/**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */function baseShuffle(collection){return shuffleSelf(values(collection));}/**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */function baseSlice(array,start,end){var index=-1,length=array.length;if(start<0){start=-start>length?0:length+start;}end=end>length?length:end;if(end<0){end+=length;}length=start>end?0:end-start>>>0;start>>>=0;var result=Array(length);while(++index<length){result[index]=array[index+start];}return result;}/**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */function baseSome(collection,predicate){var result;baseEach(collection,function(value,index,collection){result=predicate(value,index,collection);return!result;});return!!result;}/**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */function baseSortedIndex(array,value,retHighest){var low=0,high=array==null?low:array.length;if(typeof value=='number'&&value===value&&high<=HALF_MAX_ARRAY_LENGTH){while(low<high){var mid=low+high>>>1,computed=array[mid];if(computed!==null&&!isSymbol(computed)&&(retHighest?computed<=value:computed<value)){low=mid+1;}else{high=mid;}}return high;}return baseSortedIndexBy(array,value,identity,retHighest);}/**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */function baseSortedIndexBy(array,value,iteratee,retHighest){value=iteratee(value);var low=0,high=array==null?0:array.length,valIsNaN=value!==value,valIsNull=value===null,valIsSymbol=isSymbol(value),valIsUndefined=value===undefined;while(low<high){var mid=nativeFloor((low+high)/2),computed=iteratee(array[mid]),othIsDefined=computed!==undefined,othIsNull=computed===null,othIsReflexive=computed===computed,othIsSymbol=isSymbol(computed);if(valIsNaN){var setLow=retHighest||othIsReflexive;}else if(valIsUndefined){setLow=othIsReflexive&&(retHighest||othIsDefined);}else if(valIsNull){setLow=othIsReflexive&&othIsDefined&&(retHighest||!othIsNull);}else if(valIsSymbol){setLow=othIsReflexive&&othIsDefined&&!othIsNull&&(retHighest||!othIsSymbol);}else if(othIsNull||othIsSymbol){setLow=false;}else{setLow=retHighest?computed<=value:computed<value;}if(setLow){low=mid+1;}else{high=mid;}}return nativeMin(high,MAX_ARRAY_INDEX);}/**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */function baseSortedUniq(array,iteratee){var index=-1,length=array.length,resIndex=0,result=[];while(++index<length){var value=array[index],computed=iteratee?iteratee(value):value;if(!index||!eq(computed,seen)){var seen=computed;result[resIndex++]=value===0?0:value;}}return result;}/**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */function baseToNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}return+value;}/**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */function baseToString(value){// Exit early for strings to avoid a performance hit in some environments.
if(typeof value=='string'){return value;}if(isArray(value)){// Recursively convert values (susceptible to call stack limits).
return arrayMap(value,baseToString)+'';}if(isSymbol(value)){return symbolToString?symbolToString.call(value):'';}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}/**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */function baseUniq(array,iteratee,comparator){var index=-1,includes=arrayIncludes,length=array.length,isCommon=true,result=[],seen=result;if(comparator){isCommon=false;includes=arrayIncludesWith;}else if(length>=LARGE_ARRAY_SIZE){var set=iteratee?null:createSet(array);if(set){return setToArray(set);}isCommon=false;includes=cacheHas;seen=new SetCache();}else{seen=iteratee?[]:result;}outer:while(++index<length){var value=array[index],computed=iteratee?iteratee(value):value;value=comparator||value!==0?value:0;if(isCommon&&computed===computed){var seenIndex=seen.length;while(seenIndex--){if(seen[seenIndex]===computed){continue outer;}}if(iteratee){seen.push(computed);}result.push(value);}else if(!includes(seen,computed,comparator)){if(seen!==result){seen.push(computed);}result.push(value);}}return result;}/**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */function baseUnset(object,path){path=castPath(path,object);object=parent(object,path);return object==null||delete object[toKey(last(path))];}/**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */function baseUpdate(object,path,updater,customizer){return baseSet(object,path,updater(baseGet(object,path)),customizer);}/**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */function baseWhile(array,predicate,isDrop,fromRight){var length=array.length,index=fromRight?length:-1;while((fromRight?index--:++index<length)&&predicate(array[index],index,array)){}return isDrop?baseSlice(array,fromRight?0:index,fromRight?index+1:length):baseSlice(array,fromRight?index+1:0,fromRight?length:index);}/**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */function baseWrapperValue(value,actions){var result=value;if(result instanceof LazyWrapper){result=result.value();}return arrayReduce(actions,function(result,action){return action.func.apply(action.thisArg,arrayPush([result],action.args));},result);}/**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */function baseXor(arrays,iteratee,comparator){var length=arrays.length;if(length<2){return length?baseUniq(arrays[0]):[];}var index=-1,result=Array(length);while(++index<length){var array=arrays[index],othIndex=-1;while(++othIndex<length){if(othIndex!=index){result[index]=baseDifference(result[index]||array,arrays[othIndex],iteratee,comparator);}}}return baseUniq(baseFlatten(result,1),iteratee,comparator);}/**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */function baseZipObject(props,values,assignFunc){var index=-1,length=props.length,valsLength=values.length,result={};while(++index<length){var value=index<valsLength?values[index]:undefined;assignFunc(result,props[index],value);}return result;}/**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */function castArrayLikeObject(value){return isArrayLikeObject(value)?value:[];}/**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */function castFunction(value){return typeof value=='function'?value:identity;}/**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */function castPath(value,object){if(isArray(value)){return value;}return isKey(value,object)?[value]:stringToPath(toString(value));}/**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */var castRest=baseRest;/**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */function castSlice(array,start,end){var length=array.length;end=end===undefined?length:end;return!start&&end>=length?array:baseSlice(array,start,end);}/**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */var clearTimeout=ctxClearTimeout||function(id){return root.clearTimeout(id);};/**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */function cloneBuffer(buffer,isDeep){if(isDeep){return buffer.slice();}var length=buffer.length,result=allocUnsafe?allocUnsafe(length):new buffer.constructor(length);buffer.copy(result);return result;}/**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */function cloneArrayBuffer(arrayBuffer){var result=new arrayBuffer.constructor(arrayBuffer.byteLength);new Uint8Array(result).set(new Uint8Array(arrayBuffer));return result;}/**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */function cloneDataView(dataView,isDeep){var buffer=isDeep?cloneArrayBuffer(dataView.buffer):dataView.buffer;return new dataView.constructor(buffer,dataView.byteOffset,dataView.byteLength);}/**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */function cloneMap(map,isDeep,cloneFunc){var array=isDeep?cloneFunc(mapToArray(map),CLONE_DEEP_FLAG):mapToArray(map);return arrayReduce(array,addMapEntry,new map.constructor());}/**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */function cloneRegExp(regexp){var result=new regexp.constructor(regexp.source,reFlags.exec(regexp));result.lastIndex=regexp.lastIndex;return result;}/**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */function cloneSet(set,isDeep,cloneFunc){var array=isDeep?cloneFunc(setToArray(set),CLONE_DEEP_FLAG):setToArray(set);return arrayReduce(array,addSetEntry,new set.constructor());}/**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */function cloneSymbol(symbol){return symbolValueOf?Object(symbolValueOf.call(symbol)):{};}/**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */function cloneTypedArray(typedArray,isDeep){var buffer=isDeep?cloneArrayBuffer(typedArray.buffer):typedArray.buffer;return new typedArray.constructor(buffer,typedArray.byteOffset,typedArray.length);}/**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */function compareAscending(value,other){if(value!==other){var valIsDefined=value!==undefined,valIsNull=value===null,valIsReflexive=value===value,valIsSymbol=isSymbol(value);var othIsDefined=other!==undefined,othIsNull=other===null,othIsReflexive=other===other,othIsSymbol=isSymbol(other);if(!othIsNull&&!othIsSymbol&&!valIsSymbol&&value>other||valIsSymbol&&othIsDefined&&othIsReflexive&&!othIsNull&&!othIsSymbol||valIsNull&&othIsDefined&&othIsReflexive||!valIsDefined&&othIsReflexive||!valIsReflexive){return 1;}if(!valIsNull&&!valIsSymbol&&!othIsSymbol&&value<other||othIsSymbol&&valIsDefined&&valIsReflexive&&!valIsNull&&!valIsSymbol||othIsNull&&valIsDefined&&valIsReflexive||!othIsDefined&&valIsReflexive||!othIsReflexive){return-1;}}return 0;}/**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */function compareMultiple(object,other,orders){var index=-1,objCriteria=object.criteria,othCriteria=other.criteria,length=objCriteria.length,ordersLength=orders.length;while(++index<length){var result=compareAscending(objCriteria[index],othCriteria[index]);if(result){if(index>=ordersLength){return result;}var order=orders[index];return result*(order=='desc'?-1:1);}}// Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
// that causes it, under certain circumstances, to provide the same value for
// `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
// for more details.
//
// This also ensures a stable sort in V8 and other engines.
// See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
return object.index-other.index;}/**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */function composeArgs(args,partials,holders,isCurried){var argsIndex=-1,argsLength=args.length,holdersLength=holders.length,leftIndex=-1,leftLength=partials.length,rangeLength=nativeMax(argsLength-holdersLength,0),result=Array(leftLength+rangeLength),isUncurried=!isCurried;while(++leftIndex<leftLength){result[leftIndex]=partials[leftIndex];}while(++argsIndex<holdersLength){if(isUncurried||argsIndex<argsLength){result[holders[argsIndex]]=args[argsIndex];}}while(rangeLength--){result[leftIndex++]=args[argsIndex++];}return result;}/**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */function composeArgsRight(args,partials,holders,isCurried){var argsIndex=-1,argsLength=args.length,holdersIndex=-1,holdersLength=holders.length,rightIndex=-1,rightLength=partials.length,rangeLength=nativeMax(argsLength-holdersLength,0),result=Array(rangeLength+rightLength),isUncurried=!isCurried;while(++argsIndex<rangeLength){result[argsIndex]=args[argsIndex];}var offset=argsIndex;while(++rightIndex<rightLength){result[offset+rightIndex]=partials[rightIndex];}while(++holdersIndex<holdersLength){if(isUncurried||argsIndex<argsLength){result[offset+holders[holdersIndex]]=args[argsIndex++];}}return result;}/**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */function copyArray(source,array){var index=-1,length=source.length;array||(array=Array(length));while(++index<length){array[index]=source[index];}return array;}/**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */function copyObject(source,props,object,customizer){var isNew=!object;object||(object={});var index=-1,length=props.length;while(++index<length){var key=props[index];var newValue=customizer?customizer(object[key],source[key],key,object,source):undefined;if(newValue===undefined){newValue=source[key];}if(isNew){baseAssignValue(object,key,newValue);}else{assignValue(object,key,newValue);}}return object;}/**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */function copySymbols(source,object){return copyObject(source,getSymbols(source),object);}/**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */function copySymbolsIn(source,object){return copyObject(source,getSymbolsIn(source),object);}/**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */function createAggregator(setter,initializer){return function(collection,iteratee){var func=isArray(collection)?arrayAggregator:baseAggregator,accumulator=initializer?initializer():{};return func(collection,setter,getIteratee(iteratee,2),accumulator);};}/**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */function createAssigner(assigner){return baseRest(function(object,sources){var index=-1,length=sources.length,customizer=length>1?sources[length-1]:undefined,guard=length>2?sources[2]:undefined;customizer=assigner.length>3&&typeof customizer=='function'?(length--,customizer):undefined;if(guard&&isIterateeCall(sources[0],sources[1],guard)){customizer=length<3?undefined:customizer;length=1;}object=Object(object);while(++index<length){var source=sources[index];if(source){assigner(object,source,index,customizer);}}return object;});}/**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */function createBaseEach(eachFunc,fromRight){return function(collection,iteratee){if(collection==null){return collection;}if(!isArrayLike(collection)){return eachFunc(collection,iteratee);}var length=collection.length,index=fromRight?length:-1,iterable=Object(collection);while(fromRight?index--:++index<length){if(iteratee(iterable[index],index,iterable)===false){break;}}return collection;};}/**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */function createBaseFor(fromRight){return function(object,iteratee,keysFunc){var index=-1,iterable=Object(object),props=keysFunc(object),length=props.length;while(length--){var key=props[fromRight?length:++index];if(iteratee(iterable[key],key,iterable)===false){break;}}return object;};}/**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */function createBind(func,bitmask,thisArg){var isBind=bitmask&WRAP_BIND_FLAG,Ctor=createCtor(func);function wrapper(){var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;return fn.apply(isBind?thisArg:this,arguments);}return wrapper;}/**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */function createCaseFirst(methodName){return function(string){string=toString(string);var strSymbols=hasUnicode(string)?stringToArray(string):undefined;var chr=strSymbols?strSymbols[0]:string.charAt(0);var trailing=strSymbols?castSlice(strSymbols,1).join(''):string.slice(1);return chr[methodName]()+trailing;};}/**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */function createCompounder(callback){return function(string){return arrayReduce(words(deburr(string).replace(reApos,'')),callback,'');};}/**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */function createCtor(Ctor){return function(){// Use a `switch` statement to work with class constructors. See
// http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
// for more details.
var args=arguments;switch(args.length){case 0:return new Ctor();case 1:return new Ctor(args[0]);case 2:return new Ctor(args[0],args[1]);case 3:return new Ctor(args[0],args[1],args[2]);case 4:return new Ctor(args[0],args[1],args[2],args[3]);case 5:return new Ctor(args[0],args[1],args[2],args[3],args[4]);case 6:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5]);case 7:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);}var thisBinding=baseCreate(Ctor.prototype),result=Ctor.apply(thisBinding,args);// Mimic the constructor's `return` behavior.
// See https://es5.github.io/#x13.2.2 for more details.
return isObject(result)?result:thisBinding;};}/**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */function createCurry(func,bitmask,arity){var Ctor=createCtor(func);function wrapper(){var length=arguments.length,args=Array(length),index=length,placeholder=getHolder(wrapper);while(index--){args[index]=arguments[index];}var holders=length<3&&args[0]!==placeholder&&args[length-1]!==placeholder?[]:replaceHolders(args,placeholder);length-=holders.length;if(length<arity){return createRecurry(func,bitmask,createHybrid,wrapper.placeholder,undefined,args,holders,undefined,undefined,arity-length);}var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;return apply(fn,this,args);}return wrapper;}/**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */function createFind(findIndexFunc){return function(collection,predicate,fromIndex){var iterable=Object(collection);if(!isArrayLike(collection)){var iteratee=getIteratee(predicate,3);collection=keys(collection);predicate=function predicate(key){return iteratee(iterable[key],key,iterable);};}var index=findIndexFunc(collection,predicate,fromIndex);return index>-1?iterable[iteratee?collection[index]:index]:undefined;};}/**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */function createFlow(fromRight){return flatRest(function(funcs){var length=funcs.length,index=length,prereq=LodashWrapper.prototype.thru;if(fromRight){funcs.reverse();}while(index--){var func=funcs[index];if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(prereq&&!wrapper&&getFuncName(func)=='wrapper'){var wrapper=new LodashWrapper([],true);}}index=wrapper?index:length;while(++index<length){func=funcs[index];var funcName=getFuncName(func),data=funcName=='wrapper'?getData(func):undefined;if(data&&isLaziable(data[0])&&data[1]==(WRAP_ARY_FLAG|WRAP_CURRY_FLAG|WRAP_PARTIAL_FLAG|WRAP_REARG_FLAG)&&!data[4].length&&data[9]==1){wrapper=wrapper[getFuncName(data[0])].apply(wrapper,data[3]);}else{wrapper=func.length==1&&isLaziable(func)?wrapper[funcName]():wrapper.thru(func);}}return function(){var args=arguments,value=args[0];if(wrapper&&args.length==1&&isArray(value)){return wrapper.plant(value).value();}var index=0,result=length?funcs[index].apply(this,args):value;while(++index<length){result=funcs[index].call(this,result);}return result;};});}/**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */function createHybrid(func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity){var isAry=bitmask&WRAP_ARY_FLAG,isBind=bitmask&WRAP_BIND_FLAG,isBindKey=bitmask&WRAP_BIND_KEY_FLAG,isCurried=bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG),isFlip=bitmask&WRAP_FLIP_FLAG,Ctor=isBindKey?undefined:createCtor(func);function wrapper(){var length=arguments.length,args=Array(length),index=length;while(index--){args[index]=arguments[index];}if(isCurried){var placeholder=getHolder(wrapper),holdersCount=countHolders(args,placeholder);}if(partials){args=composeArgs(args,partials,holders,isCurried);}if(partialsRight){args=composeArgsRight(args,partialsRight,holdersRight,isCurried);}length-=holdersCount;if(isCurried&&length<arity){var newHolders=replaceHolders(args,placeholder);return createRecurry(func,bitmask,createHybrid,wrapper.placeholder,thisArg,args,newHolders,argPos,ary,arity-length);}var thisBinding=isBind?thisArg:this,fn=isBindKey?thisBinding[func]:func;length=args.length;if(argPos){args=reorder(args,argPos);}else if(isFlip&&length>1){args.reverse();}if(isAry&&ary<length){args.length=ary;}if(this&&this!==root&&this instanceof wrapper){fn=Ctor||createCtor(fn);}return fn.apply(thisBinding,args);}return wrapper;}/**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */function createInverter(setter,toIteratee){return function(object,iteratee){return baseInverter(object,setter,toIteratee(iteratee),{});};}/**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */function createMathOperation(operator,defaultValue){return function(value,other){var result;if(value===undefined&&other===undefined){return defaultValue;}if(value!==undefined){result=value;}if(other!==undefined){if(result===undefined){return other;}if(typeof value=='string'||typeof other=='string'){value=baseToString(value);other=baseToString(other);}else{value=baseToNumber(value);other=baseToNumber(other);}result=operator(value,other);}return result;};}/**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */function createOver(arrayFunc){return flatRest(function(iteratees){iteratees=arrayMap(iteratees,baseUnary(getIteratee()));return baseRest(function(args){var thisArg=this;return arrayFunc(iteratees,function(iteratee){return apply(iteratee,thisArg,args);});});});}/**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */function createPadding(length,chars){chars=chars===undefined?' ':baseToString(chars);var charsLength=chars.length;if(charsLength<2){return charsLength?baseRepeat(chars,length):chars;}var result=baseRepeat(chars,nativeCeil(length/stringSize(chars)));return hasUnicode(chars)?castSlice(stringToArray(result),0,length).join(''):result.slice(0,length);}/**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */function createPartial(func,bitmask,thisArg,partials){var isBind=bitmask&WRAP_BIND_FLAG,Ctor=createCtor(func);function wrapper(){var argsIndex=-1,argsLength=arguments.length,leftIndex=-1,leftLength=partials.length,args=Array(leftLength+argsLength),fn=this&&this!==root&&this instanceof wrapper?Ctor:func;while(++leftIndex<leftLength){args[leftIndex]=partials[leftIndex];}while(argsLength--){args[leftIndex++]=arguments[++argsIndex];}return apply(fn,isBind?thisArg:this,args);}return wrapper;}/**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */function createRange(fromRight){return function(start,end,step){if(step&&typeof step!='number'&&isIterateeCall(start,end,step)){end=step=undefined;}// Ensure the sign of `-0` is preserved.
start=toFinite(start);if(end===undefined){end=start;start=0;}else{end=toFinite(end);}step=step===undefined?start<end?1:-1:toFinite(step);return baseRange(start,end,step,fromRight);};}/**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */function createRelationalOperation(operator){return function(value,other){if(!(typeof value=='string'&&typeof other=='string')){value=toNumber(value);other=toNumber(other);}return operator(value,other);};}/**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */function createRecurry(func,bitmask,wrapFunc,placeholder,thisArg,partials,holders,argPos,ary,arity){var isCurry=bitmask&WRAP_CURRY_FLAG,newHolders=isCurry?holders:undefined,newHoldersRight=isCurry?undefined:holders,newPartials=isCurry?partials:undefined,newPartialsRight=isCurry?undefined:partials;bitmask|=isCurry?WRAP_PARTIAL_FLAG:WRAP_PARTIAL_RIGHT_FLAG;bitmask&=~(isCurry?WRAP_PARTIAL_RIGHT_FLAG:WRAP_PARTIAL_FLAG);if(!(bitmask&WRAP_CURRY_BOUND_FLAG)){bitmask&=~(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG);}var newData=[func,bitmask,thisArg,newPartials,newHolders,newPartialsRight,newHoldersRight,argPos,ary,arity];var result=wrapFunc.apply(undefined,newData);if(isLaziable(func)){setData(result,newData);}result.placeholder=placeholder;return setWrapToString(result,func,bitmask);}/**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */function createRound(methodName){var func=Math[methodName];return function(number,precision){number=toNumber(number);precision=precision==null?0:nativeMin(toInteger(precision),292);if(precision){// Shift with exponential notation to avoid floating-point issues.
// See [MDN](https://mdn.io/round#Examples) for more details.
var pair=(toString(number)+'e').split('e'),value=func(pair[0]+'e'+(+pair[1]+precision));pair=(toString(value)+'e').split('e');return+(pair[0]+'e'+(+pair[1]-precision));}return func(number);};}/**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */var createSet=!(Set&&1/setToArray(new Set([,-0]))[1]==INFINITY)?noop:function(values){return new Set(values);};/**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */function createToPairs(keysFunc){return function(object){var tag=getTag(object);if(tag==mapTag){return mapToArray(object);}if(tag==setTag){return setToPairs(object);}return baseToPairs(object,keysFunc(object));};}/**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */function createWrap(func,bitmask,thisArg,partials,holders,argPos,ary,arity){var isBindKey=bitmask&WRAP_BIND_KEY_FLAG;if(!isBindKey&&typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}var length=partials?partials.length:0;if(!length){bitmask&=~(WRAP_PARTIAL_FLAG|WRAP_PARTIAL_RIGHT_FLAG);partials=holders=undefined;}ary=ary===undefined?ary:nativeMax(toInteger(ary),0);arity=arity===undefined?arity:toInteger(arity);length-=holders?holders.length:0;if(bitmask&WRAP_PARTIAL_RIGHT_FLAG){var partialsRight=partials,holdersRight=holders;partials=holders=undefined;}var data=isBindKey?undefined:getData(func);var newData=[func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity];if(data){mergeData(newData,data);}func=newData[0];bitmask=newData[1];thisArg=newData[2];partials=newData[3];holders=newData[4];arity=newData[9]=newData[9]===undefined?isBindKey?0:func.length:nativeMax(newData[9]-length,0);if(!arity&&bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG)){bitmask&=~(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG);}if(!bitmask||bitmask==WRAP_BIND_FLAG){var result=createBind(func,bitmask,thisArg);}else if(bitmask==WRAP_CURRY_FLAG||bitmask==WRAP_CURRY_RIGHT_FLAG){result=createCurry(func,bitmask,arity);}else if((bitmask==WRAP_PARTIAL_FLAG||bitmask==(WRAP_BIND_FLAG|WRAP_PARTIAL_FLAG))&&!holders.length){result=createPartial(func,bitmask,thisArg,partials);}else{result=createHybrid.apply(undefined,newData);}var setter=data?baseSetData:setData;return setWrapToString(setter(result,newData),func,bitmask);}/**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */function customDefaultsAssignIn(objValue,srcValue,key,object){if(objValue===undefined||eq(objValue,objectProto[key])&&!hasOwnProperty.call(object,key)){return srcValue;}return objValue;}/**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */function customDefaultsMerge(objValue,srcValue,key,object,source,stack){if(isObject(objValue)&&isObject(srcValue)){// Recursively merge objects and arrays (susceptible to call stack limits).
stack.set(srcValue,objValue);baseMerge(objValue,srcValue,undefined,customDefaultsMerge,stack);stack['delete'](srcValue);}return objValue;}/**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */function customOmitClone(value){return isPlainObject(value)?undefined:value;}/**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */function equalArrays(array,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,arrLength=array.length,othLength=other.length;if(arrLength!=othLength&&!(isPartial&&othLength>arrLength)){return false;}// Assume cyclic values are equal.
var stacked=stack.get(array);if(stacked&&stack.get(other)){return stacked==other;}var index=-1,result=true,seen=bitmask&COMPARE_UNORDERED_FLAG?new SetCache():undefined;stack.set(array,other);stack.set(other,array);// Ignore non-index properties.
while(++index<arrLength){var arrValue=array[index],othValue=other[index];if(customizer){var compared=isPartial?customizer(othValue,arrValue,index,other,array,stack):customizer(arrValue,othValue,index,array,other,stack);}if(compared!==undefined){if(compared){continue;}result=false;break;}// Recursively compare arrays (susceptible to call stack limits).
if(seen){if(!arraySome(other,function(othValue,othIndex){if(!cacheHas(seen,othIndex)&&(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){return seen.push(othIndex);}})){result=false;break;}}else if(!(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){result=false;break;}}stack['delete'](array);stack['delete'](other);return result;}/**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */function equalByTag(object,other,tag,bitmask,customizer,equalFunc,stack){switch(tag){case dataViewTag:if(object.byteLength!=other.byteLength||object.byteOffset!=other.byteOffset){return false;}object=object.buffer;other=other.buffer;case arrayBufferTag:if(object.byteLength!=other.byteLength||!equalFunc(new Uint8Array(object),new Uint8Array(other))){return false;}return true;case boolTag:case dateTag:case numberTag:// Coerce booleans to `1` or `0` and dates to milliseconds.
// Invalid dates are coerced to `NaN`.
return eq(+object,+other);case errorTag:return object.name==other.name&&object.message==other.message;case regexpTag:case stringTag:// Coerce regexes to strings and treat strings, primitives and objects,
// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
// for more details.
return object==other+'';case mapTag:var convert=mapToArray;case setTag:var isPartial=bitmask&COMPARE_PARTIAL_FLAG;convert||(convert=setToArray);if(object.size!=other.size&&!isPartial){return false;}// Assume cyclic values are equal.
var stacked=stack.get(object);if(stacked){return stacked==other;}bitmask|=COMPARE_UNORDERED_FLAG;// Recursively compare objects (susceptible to call stack limits).
stack.set(object,other);var result=equalArrays(convert(object),convert(other),bitmask,customizer,equalFunc,stack);stack['delete'](object);return result;case symbolTag:if(symbolValueOf){return symbolValueOf.call(object)==symbolValueOf.call(other);}}return false;}/**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */function equalObjects(object,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,objProps=getAllKeys(object),objLength=objProps.length,othProps=getAllKeys(other),othLength=othProps.length;if(objLength!=othLength&&!isPartial){return false;}var index=objLength;while(index--){var key=objProps[index];if(!(isPartial?key in other:hasOwnProperty.call(other,key))){return false;}}// Assume cyclic values are equal.
var stacked=stack.get(object);if(stacked&&stack.get(other)){return stacked==other;}var result=true;stack.set(object,other);stack.set(other,object);var skipCtor=isPartial;while(++index<objLength){key=objProps[index];var objValue=object[key],othValue=other[key];if(customizer){var compared=isPartial?customizer(othValue,objValue,key,other,object,stack):customizer(objValue,othValue,key,object,other,stack);}// Recursively compare objects (susceptible to call stack limits).
if(!(compared===undefined?objValue===othValue||equalFunc(objValue,othValue,bitmask,customizer,stack):compared)){result=false;break;}skipCtor||(skipCtor=key=='constructor');}if(result&&!skipCtor){var objCtor=object.constructor,othCtor=other.constructor;// Non `Object` object instances with different constructors are not equal.
if(objCtor!=othCtor&&'constructor'in object&&'constructor'in other&&!(typeof objCtor=='function'&&objCtor instanceof objCtor&&typeof othCtor=='function'&&othCtor instanceof othCtor)){result=false;}}stack['delete'](object);stack['delete'](other);return result;}/**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */function flatRest(func){return setToString(overRest(func,undefined,flatten),func+'');}/**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */function getAllKeys(object){return baseGetAllKeys(object,keys,getSymbols);}/**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */function getAllKeysIn(object){return baseGetAllKeys(object,keysIn,getSymbolsIn);}/**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */var getData=!metaMap?noop:function(func){return metaMap.get(func);};/**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */function getFuncName(func){var result=func.name+'',array=realNames[result],length=hasOwnProperty.call(realNames,result)?array.length:0;while(length--){var data=array[length],otherFunc=data.func;if(otherFunc==null||otherFunc==func){return data.name;}}return result;}/**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */function getHolder(func){var object=hasOwnProperty.call(lodash,'placeholder')?lodash:func;return object.placeholder;}/**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */function getIteratee(){var result=lodash.iteratee||iteratee;result=result===iteratee?baseIteratee:result;return arguments.length?result(arguments[0],arguments[1]):result;}/**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */function getMapData(map,key){var data=map.__data__;return isKeyable(key)?data[typeof key=='string'?'string':'hash']:data.map;}/**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */function getMatchData(object){var result=keys(object),length=result.length;while(length--){var key=result[length],value=object[key];result[length]=[key,value,isStrictComparable(value)];}return result;}/**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */function getNative(object,key){var value=getValue(object,key);return baseIsNative(value)?value:undefined;}/**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */function getRawTag(value){var isOwn=hasOwnProperty.call(value,symToStringTag),tag=value[symToStringTag];try{value[symToStringTag]=undefined;var unmasked=true;}catch(e){}var result=nativeObjectToString.call(value);if(unmasked){if(isOwn){value[symToStringTag]=tag;}else{delete value[symToStringTag];}}return result;}/**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */var getSymbols=!nativeGetSymbols?stubArray:function(object){if(object==null){return[];}object=Object(object);return arrayFilter(nativeGetSymbols(object),function(symbol){return propertyIsEnumerable.call(object,symbol);});};/**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */var getSymbolsIn=!nativeGetSymbols?stubArray:function(object){var result=[];while(object){arrayPush(result,getSymbols(object));object=getPrototype(object);}return result;};/**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */var getTag=baseGetTag;// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag||Map&&getTag(new Map())!=mapTag||Promise&&getTag(Promise.resolve())!=promiseTag||Set&&getTag(new Set())!=setTag||WeakMap&&getTag(new WeakMap())!=weakMapTag){getTag=function getTag(value){var result=baseGetTag(value),Ctor=result==objectTag?value.constructor:undefined,ctorString=Ctor?toSource(Ctor):'';if(ctorString){switch(ctorString){case dataViewCtorString:return dataViewTag;case mapCtorString:return mapTag;case promiseCtorString:return promiseTag;case setCtorString:return setTag;case weakMapCtorString:return weakMapTag;}}return result;};}/**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */function getView(start,end,transforms){var index=-1,length=transforms.length;while(++index<length){var data=transforms[index],size=data.size;switch(data.type){case'drop':start+=size;break;case'dropRight':end-=size;break;case'take':end=nativeMin(end,start+size);break;case'takeRight':start=nativeMax(start,end-size);break;}}return{'start':start,'end':end};}/**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */function getWrapDetails(source){var match=source.match(reWrapDetails);return match?match[1].split(reSplitDetails):[];}/**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */function hasPath(object,path,hasFunc){path=castPath(path,object);var index=-1,length=path.length,result=false;while(++index<length){var key=toKey(path[index]);if(!(result=object!=null&&hasFunc(object,key))){break;}object=object[key];}if(result||++index!=length){return result;}length=object==null?0:object.length;return!!length&&isLength(length)&&isIndex(key,length)&&(isArray(object)||isArguments(object));}/**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */function initCloneArray(array){var length=array.length,result=array.constructor(length);// Add properties assigned by `RegExp#exec`.
if(length&&typeof array[0]=='string'&&hasOwnProperty.call(array,'index')){result.index=array.index;result.input=array.input;}return result;}/**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */function initCloneObject(object){return typeof object.constructor=='function'&&!isPrototype(object)?baseCreate(getPrototype(object)):{};}/**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */function initCloneByTag(object,tag,cloneFunc,isDeep){var Ctor=object.constructor;switch(tag){case arrayBufferTag:return cloneArrayBuffer(object);case boolTag:case dateTag:return new Ctor(+object);case dataViewTag:return cloneDataView(object,isDeep);case float32Tag:case float64Tag:case int8Tag:case int16Tag:case int32Tag:case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:return cloneTypedArray(object,isDeep);case mapTag:return cloneMap(object,isDeep,cloneFunc);case numberTag:case stringTag:return new Ctor(object);case regexpTag:return cloneRegExp(object);case setTag:return cloneSet(object,isDeep,cloneFunc);case symbolTag:return cloneSymbol(object);}}/**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */function insertWrapDetails(source,details){var length=details.length;if(!length){return source;}var lastIndex=length-1;details[lastIndex]=(length>1?'& ':'')+details[lastIndex];details=details.join(length>2?', ':' ');return source.replace(reWrapComment,'{\n/* [wrapped with '+details+'] */\n');}/**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */function isFlattenable(value){return isArray(value)||isArguments(value)||!!(spreadableSymbol&&value&&value[spreadableSymbol]);}/**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */function isIndex(value,length){length=length==null?MAX_SAFE_INTEGER:length;return!!length&&(typeof value=='number'||reIsUint.test(value))&&value>-1&&value%1==0&&value<length;}/**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */function isIterateeCall(value,index,object){if(!isObject(object)){return false;}var type=typeof index==='undefined'?'undefined':_typeof(index);if(type=='number'?isArrayLike(object)&&isIndex(index,object.length):type=='string'&&index in object){return eq(object[index],value);}return false;}/**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */function isKey(value,object){if(isArray(value)){return false;}var type=typeof value==='undefined'?'undefined':_typeof(value);if(type=='number'||type=='symbol'||type=='boolean'||value==null||isSymbol(value)){return true;}return reIsPlainProp.test(value)||!reIsDeepProp.test(value)||object!=null&&value in Object(object);}/**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */function isKeyable(value){var type=typeof value==='undefined'?'undefined':_typeof(value);return type=='string'||type=='number'||type=='symbol'||type=='boolean'?value!=='__proto__':value===null;}/**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */function isLaziable(func){var funcName=getFuncName(func),other=lodash[funcName];if(typeof other!='function'||!(funcName in LazyWrapper.prototype)){return false;}if(func===other){return true;}var data=getData(other);return!!data&&func===data[0];}/**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */function isMasked(func){return!!maskSrcKey&&maskSrcKey in func;}/**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */var isMaskable=coreJsData?isFunction:stubFalse;/**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */function isPrototype(value){var Ctor=value&&value.constructor,proto=typeof Ctor=='function'&&Ctor.prototype||objectProto;return value===proto;}/**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */function isStrictComparable(value){return value===value&&!isObject(value);}/**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */function matchesStrictComparable(key,srcValue){return function(object){if(object==null){return false;}return object[key]===srcValue&&(srcValue!==undefined||key in Object(object));};}/**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */function memoizeCapped(func){var result=memoize(func,function(key){if(cache.size===MAX_MEMOIZE_SIZE){cache.clear();}return key;});var cache=result.cache;return result;}/**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */function mergeData(data,source){var bitmask=data[1],srcBitmask=source[1],newBitmask=bitmask|srcBitmask,isCommon=newBitmask<(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG|WRAP_ARY_FLAG);var isCombo=srcBitmask==WRAP_ARY_FLAG&&bitmask==WRAP_CURRY_FLAG||srcBitmask==WRAP_ARY_FLAG&&bitmask==WRAP_REARG_FLAG&&data[7].length<=source[8]||srcBitmask==(WRAP_ARY_FLAG|WRAP_REARG_FLAG)&&source[7].length<=source[8]&&bitmask==WRAP_CURRY_FLAG;// Exit early if metadata can't be merged.
if(!(isCommon||isCombo)){return data;}// Use source `thisArg` if available.
if(srcBitmask&WRAP_BIND_FLAG){data[2]=source[2];// Set when currying a bound function.
newBitmask|=bitmask&WRAP_BIND_FLAG?0:WRAP_CURRY_BOUND_FLAG;}// Compose partial arguments.
var value=source[3];if(value){var partials=data[3];data[3]=partials?composeArgs(partials,value,source[4]):value;data[4]=partials?replaceHolders(data[3],PLACEHOLDER):source[4];}// Compose partial right arguments.
value=source[5];if(value){partials=data[5];data[5]=partials?composeArgsRight(partials,value,source[6]):value;data[6]=partials?replaceHolders(data[5],PLACEHOLDER):source[6];}// Use source `argPos` if available.
value=source[7];if(value){data[7]=value;}// Use source `ary` if it's smaller.
if(srcBitmask&WRAP_ARY_FLAG){data[8]=data[8]==null?source[8]:nativeMin(data[8],source[8]);}// Use source `arity` if one is not provided.
if(data[9]==null){data[9]=source[9];}// Use source `func` and merge bitmasks.
data[0]=source[0];data[1]=newBitmask;return data;}/**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */function nativeKeysIn(object){var result=[];if(object!=null){for(var key in Object(object)){result.push(key);}}return result;}/**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */function objectToString(value){return nativeObjectToString.call(value);}/**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */function overRest(func,start,transform){start=nativeMax(start===undefined?func.length-1:start,0);return function(){var args=arguments,index=-1,length=nativeMax(args.length-start,0),array=Array(length);while(++index<length){array[index]=args[start+index];}index=-1;var otherArgs=Array(start+1);while(++index<start){otherArgs[index]=args[index];}otherArgs[start]=transform(array);return apply(func,this,otherArgs);};}/**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */function parent(object,path){return path.length<2?object:baseGet(object,baseSlice(path,0,-1));}/**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */function reorder(array,indexes){var arrLength=array.length,length=nativeMin(indexes.length,arrLength),oldArray=copyArray(array);while(length--){var index=indexes[length];array[length]=isIndex(index,arrLength)?oldArray[index]:undefined;}return array;}/**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */var setData=shortOut(baseSetData);/**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */var setTimeout=ctxSetTimeout||function(func,wait){return root.setTimeout(func,wait);};/**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */var setToString=shortOut(baseSetToString);/**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */function setWrapToString(wrapper,reference,bitmask){var source=reference+'';return setToString(wrapper,insertWrapDetails(source,updateWrapDetails(getWrapDetails(source),bitmask)));}/**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */function shortOut(func){var count=0,lastCalled=0;return function(){var stamp=nativeNow(),remaining=HOT_SPAN-(stamp-lastCalled);lastCalled=stamp;if(remaining>0){if(++count>=HOT_COUNT){return arguments[0];}}else{count=0;}return func.apply(undefined,arguments);};}/**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */function shuffleSelf(array,size){var index=-1,length=array.length,lastIndex=length-1;size=size===undefined?length:size;while(++index<size){var rand=baseRandom(index,lastIndex),value=array[rand];array[rand]=array[index];array[index]=value;}array.length=size;return array;}/**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */var stringToPath=memoizeCapped(function(string){var result=[];if(reLeadingDot.test(string)){result.push('');}string.replace(rePropName,function(match,number,quote,string){result.push(quote?string.replace(reEscapeChar,'$1'):number||match);});return result;});/**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */function toKey(value){if(typeof value=='string'||isSymbol(value)){return value;}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}/**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */function toSource(func){if(func!=null){try{return funcToString.call(func);}catch(e){}try{return func+'';}catch(e){}}return'';}/**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */function updateWrapDetails(details,bitmask){arrayEach(wrapFlags,function(pair){var value='_.'+pair[0];if(bitmask&pair[1]&&!arrayIncludes(details,value)){details.push(value);}});return details.sort();}/**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */function wrapperClone(wrapper){if(wrapper instanceof LazyWrapper){return wrapper.clone();}var result=new LodashWrapper(wrapper.__wrapped__,wrapper.__chain__);result.__actions__=copyArray(wrapper.__actions__);result.__index__=wrapper.__index__;result.__values__=wrapper.__values__;return result;}/*------------------------------------------------------------------------*//**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */function chunk(array,size,guard){if(guard?isIterateeCall(array,size,guard):size===undefined){size=1;}else{size=nativeMax(toInteger(size),0);}var length=array==null?0:array.length;if(!length||size<1){return[];}var index=0,resIndex=0,result=Array(nativeCeil(length/size));while(index<length){result[resIndex++]=baseSlice(array,index,index+=size);}return result;}/**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */function compact(array){var index=-1,length=array==null?0:array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(value){result[resIndex++]=value;}}return result;}/**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */function concat(){var length=arguments.length;if(!length){return[];}var args=Array(length-1),array=arguments[0],index=length;while(index--){args[index-1]=arguments[index];}return arrayPush(isArray(array)?copyArray(array):[array],baseFlatten(args,1));}/**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */var difference=baseRest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true)):[];});/**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */var differenceBy=baseRest(function(array,values){var iteratee=last(values);if(isArrayLikeObject(iteratee)){iteratee=undefined;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),getIteratee(iteratee,2)):[];});/**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */var differenceWith=baseRest(function(array,values){var comparator=last(values);if(isArrayLikeObject(comparator)){comparator=undefined;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),undefined,comparator):[];});/**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */function drop(array,n,guard){var length=array==null?0:array.length;if(!length){return[];}n=guard||n===undefined?1:toInteger(n);return baseSlice(array,n<0?0:n,length);}/**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */function dropRight(array,n,guard){var length=array==null?0:array.length;if(!length){return[];}n=guard||n===undefined?1:toInteger(n);n=length-n;return baseSlice(array,0,n<0?0:n);}/**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */function dropRightWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),true,true):[];}/**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */function dropWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),true):[];}/**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */function fill(array,value,start,end){var length=array==null?0:array.length;if(!length){return[];}if(start&&typeof start!='number'&&isIterateeCall(array,value,start)){start=0;end=length;}return baseFill(array,value,start,end);}/**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */function findIndex(array,predicate,fromIndex){var length=array==null?0:array.length;if(!length){return-1;}var index=fromIndex==null?0:toInteger(fromIndex);if(index<0){index=nativeMax(length+index,0);}return baseFindIndex(array,getIteratee(predicate,3),index);}/**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */function findLastIndex(array,predicate,fromIndex){var length=array==null?0:array.length;if(!length){return-1;}var index=length-1;if(fromIndex!==undefined){index=toInteger(fromIndex);index=fromIndex<0?nativeMax(length+index,0):nativeMin(index,length-1);}return baseFindIndex(array,getIteratee(predicate,3),index,true);}/**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */function flatten(array){var length=array==null?0:array.length;return length?baseFlatten(array,1):[];}/**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */function flattenDeep(array){var length=array==null?0:array.length;return length?baseFlatten(array,INFINITY):[];}/**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */function flattenDepth(array,depth){var length=array==null?0:array.length;if(!length){return[];}depth=depth===undefined?1:toInteger(depth);return baseFlatten(array,depth);}/**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */function fromPairs(pairs){var index=-1,length=pairs==null?0:pairs.length,result={};while(++index<length){var pair=pairs[index];result[pair[0]]=pair[1];}return result;}/**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */function head(array){return array&&array.length?array[0]:undefined;}/**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */function indexOf(array,value,fromIndex){var length=array==null?0:array.length;if(!length){return-1;}var index=fromIndex==null?0:toInteger(fromIndex);if(index<0){index=nativeMax(length+index,0);}return baseIndexOf(array,value,index);}/**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */function initial(array){var length=array==null?0:array.length;return length?baseSlice(array,0,-1):[];}/**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */var intersection=baseRest(function(arrays){var mapped=arrayMap(arrays,castArrayLikeObject);return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped):[];});/**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */var intersectionBy=baseRest(function(arrays){var iteratee=last(arrays),mapped=arrayMap(arrays,castArrayLikeObject);if(iteratee===last(mapped)){iteratee=undefined;}else{mapped.pop();}return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped,getIteratee(iteratee,2)):[];});/**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */var intersectionWith=baseRest(function(arrays){var comparator=last(arrays),mapped=arrayMap(arrays,castArrayLikeObject);comparator=typeof comparator=='function'?comparator:undefined;if(comparator){mapped.pop();}return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped,undefined,comparator):[];});/**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */function join(array,separator){return array==null?'':nativeJoin.call(array,separator);}/**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */function last(array){var length=array==null?0:array.length;return length?array[length-1]:undefined;}/**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */function lastIndexOf(array,value,fromIndex){var length=array==null?0:array.length;if(!length){return-1;}var index=length;if(fromIndex!==undefined){index=toInteger(fromIndex);index=index<0?nativeMax(length+index,0):nativeMin(index,length-1);}return value===value?strictLastIndexOf(array,value,index):baseFindIndex(array,baseIsNaN,index,true);}/**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */function nth(array,n){return array&&array.length?baseNth(array,toInteger(n)):undefined;}/**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */var pull=baseRest(pullAll);/**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */function pullAll(array,values){return array&&array.length&&values&&values.length?basePullAll(array,values):array;}/**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */function pullAllBy(array,values,iteratee){return array&&array.length&&values&&values.length?basePullAll(array,values,getIteratee(iteratee,2)):array;}/**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */function pullAllWith(array,values,comparator){return array&&array.length&&values&&values.length?basePullAll(array,values,undefined,comparator):array;}/**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */var pullAt=flatRest(function(array,indexes){var length=array==null?0:array.length,result=baseAt(array,indexes);basePullAt(array,arrayMap(indexes,function(index){return isIndex(index,length)?+index:index;}).sort(compareAscending));return result;});/**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */function remove(array,predicate){var result=[];if(!(array&&array.length)){return result;}var index=-1,indexes=[],length=array.length;predicate=getIteratee(predicate,3);while(++index<length){var value=array[index];if(predicate(value,index,array)){result.push(value);indexes.push(index);}}basePullAt(array,indexes);return result;}/**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */function reverse(array){return array==null?array:nativeReverse.call(array);}/**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */function slice(array,start,end){var length=array==null?0:array.length;if(!length){return[];}if(end&&typeof end!='number'&&isIterateeCall(array,start,end)){start=0;end=length;}else{start=start==null?0:toInteger(start);end=end===undefined?length:toInteger(end);}return baseSlice(array,start,end);}/**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */function sortedIndex(array,value){return baseSortedIndex(array,value);}/**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */function sortedIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee,2));}/**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */function sortedIndexOf(array,value){var length=array==null?0:array.length;if(length){var index=baseSortedIndex(array,value);if(index<length&&eq(array[index],value)){return index;}}return-1;}/**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */function sortedLastIndex(array,value){return baseSortedIndex(array,value,true);}/**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */function sortedLastIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee,2),true);}/**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */function sortedLastIndexOf(array,value){var length=array==null?0:array.length;if(length){var index=baseSortedIndex(array,value,true)-1;if(eq(array[index],value)){return index;}}return-1;}/**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */function sortedUniq(array){return array&&array.length?baseSortedUniq(array):[];}/**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */function sortedUniqBy(array,iteratee){return array&&array.length?baseSortedUniq(array,getIteratee(iteratee,2)):[];}/**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */function tail(array){var length=array==null?0:array.length;return length?baseSlice(array,1,length):[];}/**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */function take(array,n,guard){if(!(array&&array.length)){return[];}n=guard||n===undefined?1:toInteger(n);return baseSlice(array,0,n<0?0:n);}/**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */function takeRight(array,n,guard){var length=array==null?0:array.length;if(!length){return[];}n=guard||n===undefined?1:toInteger(n);n=length-n;return baseSlice(array,n<0?0:n,length);}/**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */function takeRightWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),false,true):[];}/**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */function takeWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3)):[];}/**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */var union=baseRest(function(arrays){return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true));});/**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */var unionBy=baseRest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee=undefined;}return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),getIteratee(iteratee,2));});/**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */var unionWith=baseRest(function(arrays){var comparator=last(arrays);comparator=typeof comparator=='function'?comparator:undefined;return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),undefined,comparator);});/**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */function uniq(array){return array&&array.length?baseUniq(array):[];}/**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */function uniqBy(array,iteratee){return array&&array.length?baseUniq(array,getIteratee(iteratee,2)):[];}/**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */function uniqWith(array,comparator){comparator=typeof comparator=='function'?comparator:undefined;return array&&array.length?baseUniq(array,undefined,comparator):[];}/**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */function unzip(array){if(!(array&&array.length)){return[];}var length=0;array=arrayFilter(array,function(group){if(isArrayLikeObject(group)){length=nativeMax(group.length,length);return true;}});return baseTimes(length,function(index){return arrayMap(array,baseProperty(index));});}/**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */function unzipWith(array,iteratee){if(!(array&&array.length)){return[];}var result=unzip(array);if(iteratee==null){return result;}return arrayMap(result,function(group){return apply(iteratee,undefined,group);});}/**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */var without=baseRest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,values):[];});/**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */var xor=baseRest(function(arrays){return baseXor(arrayFilter(arrays,isArrayLikeObject));});/**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */var xorBy=baseRest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee=undefined;}return baseXor(arrayFilter(arrays,isArrayLikeObject),getIteratee(iteratee,2));});/**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */var xorWith=baseRest(function(arrays){var comparator=last(arrays);comparator=typeof comparator=='function'?comparator:undefined;return baseXor(arrayFilter(arrays,isArrayLikeObject),undefined,comparator);});/**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */var zip=baseRest(unzip);/**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */function zipObject(props,values){return baseZipObject(props||[],values||[],assignValue);}/**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */function zipObjectDeep(props,values){return baseZipObject(props||[],values||[],baseSet);}/**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */var zipWith=baseRest(function(arrays){var length=arrays.length,iteratee=length>1?arrays[length-1]:undefined;iteratee=typeof iteratee=='function'?(arrays.pop(),iteratee):undefined;return unzipWith(arrays,iteratee);});/*------------------------------------------------------------------------*//**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */function chain(value){var result=lodash(value);result.__chain__=true;return result;}/**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */function tap(value,interceptor){interceptor(value);return value;}/**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */function thru(value,interceptor){return interceptor(value);}/**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */var wrapperAt=flatRest(function(paths){var length=paths.length,start=length?paths[0]:0,value=this.__wrapped__,interceptor=function interceptor(object){return baseAt(object,paths);};if(length>1||this.__actions__.length||!(value instanceof LazyWrapper)||!isIndex(start)){return this.thru(interceptor);}value=value.slice(start,+start+(length?1:0));value.__actions__.push({'func':thru,'args':[interceptor],'thisArg':undefined});return new LodashWrapper(value,this.__chain__).thru(function(array){if(length&&!array.length){array.push(undefined);}return array;});});/**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */function wrapperChain(){return chain(this);}/**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */function wrapperCommit(){return new LodashWrapper(this.value(),this.__chain__);}/**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */function wrapperNext(){if(this.__values__===undefined){this.__values__=toArray(this.value());}var done=this.__index__>=this.__values__.length,value=done?undefined:this.__values__[this.__index__++];return{'done':done,'value':value};}/**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */function wrapperToIterator(){return this;}/**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */function wrapperPlant(value){var result,parent=this;while(parent instanceof baseLodash){var clone=wrapperClone(parent);clone.__index__=0;clone.__values__=undefined;if(result){previous.__wrapped__=clone;}else{result=clone;}var previous=clone;parent=parent.__wrapped__;}previous.__wrapped__=value;return result;}/**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */function wrapperReverse(){var value=this.__wrapped__;if(value instanceof LazyWrapper){var wrapped=value;if(this.__actions__.length){wrapped=new LazyWrapper(this);}wrapped=wrapped.reverse();wrapped.__actions__.push({'func':thru,'args':[reverse],'thisArg':undefined});return new LodashWrapper(wrapped,this.__chain__);}return this.thru(reverse);}/**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */function wrapperValue(){return baseWrapperValue(this.__wrapped__,this.__actions__);}/*------------------------------------------------------------------------*//**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */var countBy=createAggregator(function(result,value,key){if(hasOwnProperty.call(result,key)){++result[key];}else{baseAssignValue(result,key,1);}});/**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */function every(collection,predicate,guard){var func=isArray(collection)?arrayEvery:baseEvery;if(guard&&isIterateeCall(collection,predicate,guard)){predicate=undefined;}return func(collection,getIteratee(predicate,3));}/**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */function filter(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;return func(collection,getIteratee(predicate,3));}/**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */var find=createFind(findIndex);/**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */var findLast=createFind(findLastIndex);/**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */function flatMap(collection,iteratee){return baseFlatten(map(collection,iteratee),1);}/**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */function flatMapDeep(collection,iteratee){return baseFlatten(map(collection,iteratee),INFINITY);}/**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */function flatMapDepth(collection,iteratee,depth){depth=depth===undefined?1:toInteger(depth);return baseFlatten(map(collection,iteratee),depth);}/**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */function forEach(collection,iteratee){var func=isArray(collection)?arrayEach:baseEach;return func(collection,getIteratee(iteratee,3));}/**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */function forEachRight(collection,iteratee){var func=isArray(collection)?arrayEachRight:baseEachRight;return func(collection,getIteratee(iteratee,3));}/**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */var groupBy=createAggregator(function(result,value,key){if(hasOwnProperty.call(result,key)){result[key].push(value);}else{baseAssignValue(result,key,[value]);}});/**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */function includes(collection,value,fromIndex,guard){collection=isArrayLike(collection)?collection:values(collection);fromIndex=fromIndex&&!guard?toInteger(fromIndex):0;var length=collection.length;if(fromIndex<0){fromIndex=nativeMax(length+fromIndex,0);}return isString(collection)?fromIndex<=length&&collection.indexOf(value,fromIndex)>-1:!!length&&baseIndexOf(collection,value,fromIndex)>-1;}/**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */var invokeMap=baseRest(function(collection,path,args){var index=-1,isFunc=typeof path=='function',result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value){result[++index]=isFunc?apply(path,value,args):baseInvoke(value,path,args);});return result;});/**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */var keyBy=createAggregator(function(result,value,key){baseAssignValue(result,key,value);});/**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */function map(collection,iteratee){var func=isArray(collection)?arrayMap:baseMap;return func(collection,getIteratee(iteratee,3));}/**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */function orderBy(collection,iteratees,orders,guard){if(collection==null){return[];}if(!isArray(iteratees)){iteratees=iteratees==null?[]:[iteratees];}orders=guard?undefined:orders;if(!isArray(orders)){orders=orders==null?[]:[orders];}return baseOrderBy(collection,iteratees,orders);}/**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */var partition=createAggregator(function(result,value,key){result[key?0:1].push(value);},function(){return[[],[]];});/**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */function reduce(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduce:baseReduce,initAccum=arguments.length<3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEach);}/**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */function reduceRight(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduceRight:baseReduce,initAccum=arguments.length<3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEachRight);}/**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */function reject(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;return func(collection,negate(getIteratee(predicate,3)));}/**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */function sample(collection){var func=isArray(collection)?arraySample:baseSample;return func(collection);}/**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */function sampleSize(collection,n,guard){if(guard?isIterateeCall(collection,n,guard):n===undefined){n=1;}else{n=toInteger(n);}var func=isArray(collection)?arraySampleSize:baseSampleSize;return func(collection,n);}/**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */function shuffle(collection){var func=isArray(collection)?arrayShuffle:baseShuffle;return func(collection);}/**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */function size(collection){if(collection==null){return 0;}if(isArrayLike(collection)){return isString(collection)?stringSize(collection):collection.length;}var tag=getTag(collection);if(tag==mapTag||tag==setTag){return collection.size;}return baseKeys(collection).length;}/**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */function some(collection,predicate,guard){var func=isArray(collection)?arraySome:baseSome;if(guard&&isIterateeCall(collection,predicate,guard)){predicate=undefined;}return func(collection,getIteratee(predicate,3));}/**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */var sortBy=baseRest(function(collection,iteratees){if(collection==null){return[];}var length=iteratees.length;if(length>1&&isIterateeCall(collection,iteratees[0],iteratees[1])){iteratees=[];}else if(length>2&&isIterateeCall(iteratees[0],iteratees[1],iteratees[2])){iteratees=[iteratees[0]];}return baseOrderBy(collection,baseFlatten(iteratees,1),[]);});/*------------------------------------------------------------------------*//**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */var now=ctxNow||function(){return root.Date.now();};/*------------------------------------------------------------------------*//**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */function after(n,func){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}n=toInteger(n);return function(){if(--n<1){return func.apply(this,arguments);}};}/**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */function ary(func,n,guard){n=guard?undefined:n;n=func&&n==null?func.length:n;return createWrap(func,WRAP_ARY_FLAG,undefined,undefined,undefined,undefined,n);}/**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */function before(n,func){var result;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}n=toInteger(n);return function(){if(--n>0){result=func.apply(this,arguments);}if(n<=1){func=undefined;}return result;};}/**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */var bind=baseRest(function(func,thisArg,partials){var bitmask=WRAP_BIND_FLAG;if(partials.length){var holders=replaceHolders(partials,getHolder(bind));bitmask|=WRAP_PARTIAL_FLAG;}return createWrap(func,bitmask,thisArg,partials,holders);});/**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */var bindKey=baseRest(function(object,key,partials){var bitmask=WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG;if(partials.length){var holders=replaceHolders(partials,getHolder(bindKey));bitmask|=WRAP_PARTIAL_FLAG;}return createWrap(key,bitmask,object,partials,holders);});/**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */function curry(func,arity,guard){arity=guard?undefined:arity;var result=createWrap(func,WRAP_CURRY_FLAG,undefined,undefined,undefined,undefined,undefined,arity);result.placeholder=curry.placeholder;return result;}/**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */function curryRight(func,arity,guard){arity=guard?undefined:arity;var result=createWrap(func,WRAP_CURRY_RIGHT_FLAG,undefined,undefined,undefined,undefined,undefined,arity);result.placeholder=curryRight.placeholder;return result;}/**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */function debounce(func,wait,options){var lastArgs,lastThis,maxWait,result,timerId,lastCallTime,lastInvokeTime=0,leading=false,maxing=false,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}wait=toNumber(wait)||0;if(isObject(options)){leading=!!options.leading;maxing='maxWait'in options;maxWait=maxing?nativeMax(toNumber(options.maxWait)||0,wait):maxWait;trailing='trailing'in options?!!options.trailing:trailing;}function invokeFunc(time){var args=lastArgs,thisArg=lastThis;lastArgs=lastThis=undefined;lastInvokeTime=time;result=func.apply(thisArg,args);return result;}function leadingEdge(time){// Reset any `maxWait` timer.
lastInvokeTime=time;// Start the timer for the trailing edge.
timerId=setTimeout(timerExpired,wait);// Invoke the leading edge.
return leading?invokeFunc(time):result;}function remainingWait(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime,result=wait-timeSinceLastCall;return maxing?nativeMin(result,maxWait-timeSinceLastInvoke):result;}function shouldInvoke(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime;// Either this is the first call, activity has stopped and we're at the
// trailing edge, the system time has gone backwards and we're treating
// it as the trailing edge, or we've hit the `maxWait` limit.
return lastCallTime===undefined||timeSinceLastCall>=wait||timeSinceLastCall<0||maxing&&timeSinceLastInvoke>=maxWait;}function timerExpired(){var time=now();if(shouldInvoke(time)){return trailingEdge(time);}// Restart the timer.
timerId=setTimeout(timerExpired,remainingWait(time));}function trailingEdge(time){timerId=undefined;// Only invoke if we have `lastArgs` which means `func` has been
// debounced at least once.
if(trailing&&lastArgs){return invokeFunc(time);}lastArgs=lastThis=undefined;return result;}function cancel(){if(timerId!==undefined){clearTimeout(timerId);}lastInvokeTime=0;lastArgs=lastCallTime=lastThis=timerId=undefined;}function flush(){return timerId===undefined?result:trailingEdge(now());}function debounced(){var time=now(),isInvoking=shouldInvoke(time);lastArgs=arguments;lastThis=this;lastCallTime=time;if(isInvoking){if(timerId===undefined){return leadingEdge(lastCallTime);}if(maxing){// Handle invocations in a tight loop.
timerId=setTimeout(timerExpired,wait);return invokeFunc(lastCallTime);}}if(timerId===undefined){timerId=setTimeout(timerExpired,wait);}return result;}debounced.cancel=cancel;debounced.flush=flush;return debounced;}/**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */var defer=baseRest(function(func,args){return baseDelay(func,1,args);});/**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */var delay=baseRest(function(func,wait,args){return baseDelay(func,toNumber(wait)||0,args);});/**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */function flip(func){return createWrap(func,WRAP_FLIP_FLAG);}/**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */function memoize(func,resolver){if(typeof func!='function'||resolver!=null&&typeof resolver!='function'){throw new TypeError(FUNC_ERROR_TEXT);}var memoized=function memoized(){var args=arguments,key=resolver?resolver.apply(this,args):args[0],cache=memoized.cache;if(cache.has(key)){return cache.get(key);}var result=func.apply(this,args);memoized.cache=cache.set(key,result)||cache;return result;};memoized.cache=new(memoize.Cache||MapCache)();return memoized;}// Expose `MapCache`.
memoize.Cache=MapCache;/**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */function negate(predicate){if(typeof predicate!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return function(){var args=arguments;switch(args.length){case 0:return!predicate.call(this);case 1:return!predicate.call(this,args[0]);case 2:return!predicate.call(this,args[0],args[1]);case 3:return!predicate.call(this,args[0],args[1],args[2]);}return!predicate.apply(this,args);};}/**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */function once(func){return before(2,func);}/**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */var overArgs=castRest(function(func,transforms){transforms=transforms.length==1&&isArray(transforms[0])?arrayMap(transforms[0],baseUnary(getIteratee())):arrayMap(baseFlatten(transforms,1),baseUnary(getIteratee()));var funcsLength=transforms.length;return baseRest(function(args){var index=-1,length=nativeMin(args.length,funcsLength);while(++index<length){args[index]=transforms[index].call(this,args[index]);}return apply(func,this,args);});});/**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */var partial=baseRest(function(func,partials){var holders=replaceHolders(partials,getHolder(partial));return createWrap(func,WRAP_PARTIAL_FLAG,undefined,partials,holders);});/**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */var partialRight=baseRest(function(func,partials){var holders=replaceHolders(partials,getHolder(partialRight));return createWrap(func,WRAP_PARTIAL_RIGHT_FLAG,undefined,partials,holders);});/**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */var rearg=flatRest(function(func,indexes){return createWrap(func,WRAP_REARG_FLAG,undefined,undefined,undefined,indexes);});/**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */function rest(func,start){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}start=start===undefined?start:toInteger(start);return baseRest(func,start);}/**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */function spread(func,start){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}start=start==null?0:nativeMax(toInteger(start),0);return baseRest(function(args){var array=args[start],otherArgs=castSlice(args,0,start);if(array){arrayPush(otherArgs,array);}return apply(func,this,otherArgs);});}/**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */function throttle(func,wait,options){var leading=true,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(isObject(options)){leading='leading'in options?!!options.leading:leading;trailing='trailing'in options?!!options.trailing:trailing;}return debounce(func,wait,{'leading':leading,'maxWait':wait,'trailing':trailing});}/**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */function unary(func){return ary(func,1);}/**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */function wrap(value,wrapper){return partial(castFunction(wrapper),value);}/*------------------------------------------------------------------------*//**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */function castArray(){if(!arguments.length){return[];}var value=arguments[0];return isArray(value)?value:[value];}/**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */function clone(value){return baseClone(value,CLONE_SYMBOLS_FLAG);}/**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */function cloneWith(value,customizer){customizer=typeof customizer=='function'?customizer:undefined;return baseClone(value,CLONE_SYMBOLS_FLAG,customizer);}/**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */function cloneDeep(value){return baseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG);}/**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */function cloneDeepWith(value,customizer){customizer=typeof customizer=='function'?customizer:undefined;return baseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG,customizer);}/**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */function conformsTo(object,source){return source==null||baseConformsTo(object,source,keys(source));}/**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */function eq(value,other){return value===other||value!==value&&other!==other;}/**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */var gt=createRelationalOperation(baseGt);/**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */var gte=createRelationalOperation(function(value,other){return value>=other;});/**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */var isArguments=baseIsArguments(function(){return arguments;}())?baseIsArguments:function(value){return isObjectLike(value)&&hasOwnProperty.call(value,'callee')&&!propertyIsEnumerable.call(value,'callee');};/**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */var isArray=Array.isArray;/**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */var isArrayBuffer=nodeIsArrayBuffer?baseUnary(nodeIsArrayBuffer):baseIsArrayBuffer;/**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */function isArrayLike(value){return value!=null&&isLength(value.length)&&!isFunction(value);}/**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */function isArrayLikeObject(value){return isObjectLike(value)&&isArrayLike(value);}/**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */function isBoolean(value){return value===true||value===false||isObjectLike(value)&&baseGetTag(value)==boolTag;}/**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */var isBuffer=nativeIsBuffer||stubFalse;/**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */var isDate=nodeIsDate?baseUnary(nodeIsDate):baseIsDate;/**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */function isElement(value){return isObjectLike(value)&&value.nodeType===1&&!isPlainObject(value);}/**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */function isEmpty(value){if(value==null){return true;}if(isArrayLike(value)&&(isArray(value)||typeof value=='string'||typeof value.splice=='function'||isBuffer(value)||isTypedArray(value)||isArguments(value))){return!value.length;}var tag=getTag(value);if(tag==mapTag||tag==setTag){return!value.size;}if(isPrototype(value)){return!baseKeys(value).length;}for(var key in value){if(hasOwnProperty.call(value,key)){return false;}}return true;}/**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */function isEqual(value,other){return baseIsEqual(value,other);}/**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */function isEqualWith(value,other,customizer){customizer=typeof customizer=='function'?customizer:undefined;var result=customizer?customizer(value,other):undefined;return result===undefined?baseIsEqual(value,other,undefined,customizer):!!result;}/**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */function isError(value){if(!isObjectLike(value)){return false;}var tag=baseGetTag(value);return tag==errorTag||tag==domExcTag||typeof value.message=='string'&&typeof value.name=='string'&&!isPlainObject(value);}/**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */function isFinite(value){return typeof value=='number'&&nativeIsFinite(value);}/**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */function isFunction(value){if(!isObject(value)){return false;}// The use of `Object#toString` avoids issues with the `typeof` operator
// in Safari 9 which returns 'object' for typed arrays and other constructors.
var tag=baseGetTag(value);return tag==funcTag||tag==genTag||tag==asyncTag||tag==proxyTag;}/**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */function isInteger(value){return typeof value=='number'&&value==toInteger(value);}/**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */function isLength(value){return typeof value=='number'&&value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER;}/**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */function isObject(value){var type=typeof value==='undefined'?'undefined':_typeof(value);return value!=null&&(type=='object'||type=='function');}/**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */function isObjectLike(value){return value!=null&&(typeof value==='undefined'?'undefined':_typeof(value))=='object';}/**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */var isMap=nodeIsMap?baseUnary(nodeIsMap):baseIsMap;/**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */function isMatch(object,source){return object===source||baseIsMatch(object,source,getMatchData(source));}/**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */function isMatchWith(object,source,customizer){customizer=typeof customizer=='function'?customizer:undefined;return baseIsMatch(object,source,getMatchData(source),customizer);}/**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */function isNaN(value){// An `NaN` primitive is the only value that is not equal to itself.
// Perform the `toStringTag` check first to avoid errors with some
// ActiveX objects in IE.
return isNumber(value)&&value!=+value;}/**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */function isNative(value){if(isMaskable(value)){throw new Error(CORE_ERROR_TEXT);}return baseIsNative(value);}/**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */function isNull(value){return value===null;}/**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */function isNil(value){return value==null;}/**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */function isNumber(value){return typeof value=='number'||isObjectLike(value)&&baseGetTag(value)==numberTag;}/**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */function isPlainObject(value){if(!isObjectLike(value)||baseGetTag(value)!=objectTag){return false;}var proto=getPrototype(value);if(proto===null){return true;}var Ctor=hasOwnProperty.call(proto,'constructor')&&proto.constructor;return typeof Ctor=='function'&&Ctor instanceof Ctor&&funcToString.call(Ctor)==objectCtorString;}/**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */var isRegExp=nodeIsRegExp?baseUnary(nodeIsRegExp):baseIsRegExp;/**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */function isSafeInteger(value){return isInteger(value)&&value>=-MAX_SAFE_INTEGER&&value<=MAX_SAFE_INTEGER;}/**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */var isSet=nodeIsSet?baseUnary(nodeIsSet):baseIsSet;/**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */function isString(value){return typeof value=='string'||!isArray(value)&&isObjectLike(value)&&baseGetTag(value)==stringTag;}/**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */function isSymbol(value){return(typeof value==='undefined'?'undefined':_typeof(value))=='symbol'||isObjectLike(value)&&baseGetTag(value)==symbolTag;}/**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */var isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray;/**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */function isUndefined(value){return value===undefined;}/**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */function isWeakMap(value){return isObjectLike(value)&&getTag(value)==weakMapTag;}/**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */function isWeakSet(value){return isObjectLike(value)&&baseGetTag(value)==weakSetTag;}/**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */var lt=createRelationalOperation(baseLt);/**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */var lte=createRelationalOperation(function(value,other){return value<=other;});/**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */function toArray(value){if(!value){return[];}if(isArrayLike(value)){return isString(value)?stringToArray(value):copyArray(value);}if(symIterator&&value[symIterator]){return iteratorToArray(value[symIterator]());}var tag=getTag(value),func=tag==mapTag?mapToArray:tag==setTag?setToArray:values;return func(value);}/**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */function toFinite(value){if(!value){return value===0?value:0;}value=toNumber(value);if(value===INFINITY||value===-INFINITY){var sign=value<0?-1:1;return sign*MAX_INTEGER;}return value===value?value:0;}/**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */function toInteger(value){var result=toFinite(value),remainder=result%1;return result===result?remainder?result-remainder:result:0;}/**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */function toLength(value){return value?baseClamp(toInteger(value),0,MAX_ARRAY_LENGTH):0;}/**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */function toNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}if(isObject(value)){var other=typeof value.valueOf=='function'?value.valueOf():value;value=isObject(other)?other+'':other;}if(typeof value!='string'){return value===0?value:+value;}value=value.replace(reTrim,'');var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value;}/**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */function toPlainObject(value){return copyObject(value,keysIn(value));}/**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */function toSafeInteger(value){return value?baseClamp(toInteger(value),-MAX_SAFE_INTEGER,MAX_SAFE_INTEGER):value===0?value:0;}/**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */function toString(value){return value==null?'':baseToString(value);}/*------------------------------------------------------------------------*//**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */var assign=createAssigner(function(object,source){if(isPrototype(source)||isArrayLike(source)){copyObject(source,keys(source),object);return;}for(var key in source){if(hasOwnProperty.call(source,key)){assignValue(object,key,source[key]);}}});/**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */var assignIn=createAssigner(function(object,source){copyObject(source,keysIn(source),object);});/**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */var assignInWith=createAssigner(function(object,source,srcIndex,customizer){copyObject(source,keysIn(source),object,customizer);});/**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */var assignWith=createAssigner(function(object,source,srcIndex,customizer){copyObject(source,keys(source),object,customizer);});/**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */var at=flatRest(baseAt);/**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */function create(prototype,properties){var result=baseCreate(prototype);return properties==null?result:baseAssign(result,properties);}/**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */var defaults=baseRest(function(args){args.push(undefined,customDefaultsAssignIn);return apply(assignInWith,undefined,args);});/**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */var defaultsDeep=baseRest(function(args){args.push(undefined,customDefaultsMerge);return apply(mergeWith,undefined,args);});/**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */function findKey(object,predicate){return baseFindKey(object,getIteratee(predicate,3),baseForOwn);}/**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */function findLastKey(object,predicate){return baseFindKey(object,getIteratee(predicate,3),baseForOwnRight);}/**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */function forIn(object,iteratee){return object==null?object:baseFor(object,getIteratee(iteratee,3),keysIn);}/**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */function forInRight(object,iteratee){return object==null?object:baseForRight(object,getIteratee(iteratee,3),keysIn);}/**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */function forOwn(object,iteratee){return object&&baseForOwn(object,getIteratee(iteratee,3));}/**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */function forOwnRight(object,iteratee){return object&&baseForOwnRight(object,getIteratee(iteratee,3));}/**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */function functions(object){return object==null?[]:baseFunctions(object,keys(object));}/**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */function functionsIn(object){return object==null?[]:baseFunctions(object,keysIn(object));}/**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */function get(object,path,defaultValue){var result=object==null?undefined:baseGet(object,path);return result===undefined?defaultValue:result;}/**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */function has(object,path){return object!=null&&hasPath(object,path,baseHas);}/**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */function hasIn(object,path){return object!=null&&hasPath(object,path,baseHasIn);}/**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */var invert=createInverter(function(result,value,key){result[value]=key;},constant(identity));/**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */var invertBy=createInverter(function(result,value,key){if(hasOwnProperty.call(result,value)){result[value].push(key);}else{result[value]=[key];}},getIteratee);/**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */var invoke=baseRest(baseInvoke);/**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */function keys(object){return isArrayLike(object)?arrayLikeKeys(object):baseKeys(object);}/**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */function keysIn(object){return isArrayLike(object)?arrayLikeKeys(object,true):baseKeysIn(object);}/**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */function mapKeys(object,iteratee){var result={};iteratee=getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){baseAssignValue(result,iteratee(value,key,object),value);});return result;}/**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */function mapValues(object,iteratee){var result={};iteratee=getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){baseAssignValue(result,key,iteratee(value,key,object));});return result;}/**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */var merge=createAssigner(function(object,source,srcIndex){baseMerge(object,source,srcIndex);});/**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */var mergeWith=createAssigner(function(object,source,srcIndex,customizer){baseMerge(object,source,srcIndex,customizer);});/**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */var omit=flatRest(function(object,paths){var result={};if(object==null){return result;}var isDeep=false;paths=arrayMap(paths,function(path){path=castPath(path,object);isDeep||(isDeep=path.length>1);return path;});copyObject(object,getAllKeysIn(object),result);if(isDeep){result=baseClone(result,CLONE_DEEP_FLAG|CLONE_FLAT_FLAG|CLONE_SYMBOLS_FLAG,customOmitClone);}var length=paths.length;while(length--){baseUnset(result,paths[length]);}return result;});/**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */function omitBy(object,predicate){return pickBy(object,negate(getIteratee(predicate)));}/**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */var pick=flatRest(function(object,paths){return object==null?{}:basePick(object,paths);});/**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */function pickBy(object,predicate){if(object==null){return{};}var props=arrayMap(getAllKeysIn(object),function(prop){return[prop];});predicate=getIteratee(predicate);return basePickBy(object,props,function(value,path){return predicate(value,path[0]);});}/**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */function result(object,path,defaultValue){path=castPath(path,object);var index=-1,length=path.length;// Ensure the loop is entered when path is empty.
if(!length){length=1;object=undefined;}while(++index<length){var value=object==null?undefined:object[toKey(path[index])];if(value===undefined){index=length;value=defaultValue;}object=isFunction(value)?value.call(object):value;}return object;}/**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */function set(object,path,value){return object==null?object:baseSet(object,path,value);}/**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */function setWith(object,path,value,customizer){customizer=typeof customizer=='function'?customizer:undefined;return object==null?object:baseSet(object,path,value,customizer);}/**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */var toPairs=createToPairs(keys);/**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */var toPairsIn=createToPairs(keysIn);/**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */function transform(object,iteratee,accumulator){var isArr=isArray(object),isArrLike=isArr||isBuffer(object)||isTypedArray(object);iteratee=getIteratee(iteratee,4);if(accumulator==null){var Ctor=object&&object.constructor;if(isArrLike){accumulator=isArr?new Ctor():[];}else if(isObject(object)){accumulator=isFunction(Ctor)?baseCreate(getPrototype(object)):{};}else{accumulator={};}}(isArrLike?arrayEach:baseForOwn)(object,function(value,index,object){return iteratee(accumulator,value,index,object);});return accumulator;}/**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */function unset(object,path){return object==null?true:baseUnset(object,path);}/**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */function update(object,path,updater){return object==null?object:baseUpdate(object,path,castFunction(updater));}/**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */function updateWith(object,path,updater,customizer){customizer=typeof customizer=='function'?customizer:undefined;return object==null?object:baseUpdate(object,path,castFunction(updater),customizer);}/**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */function values(object){return object==null?[]:baseValues(object,keys(object));}/**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */function valuesIn(object){return object==null?[]:baseValues(object,keysIn(object));}/*------------------------------------------------------------------------*//**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */function clamp(number,lower,upper){if(upper===undefined){upper=lower;lower=undefined;}if(upper!==undefined){upper=toNumber(upper);upper=upper===upper?upper:0;}if(lower!==undefined){lower=toNumber(lower);lower=lower===lower?lower:0;}return baseClamp(toNumber(number),lower,upper);}/**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */function inRange(number,start,end){start=toFinite(start);if(end===undefined){end=start;start=0;}else{end=toFinite(end);}number=toNumber(number);return baseInRange(number,start,end);}/**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */function random(lower,upper,floating){if(floating&&typeof floating!='boolean'&&isIterateeCall(lower,upper,floating)){upper=floating=undefined;}if(floating===undefined){if(typeof upper=='boolean'){floating=upper;upper=undefined;}else if(typeof lower=='boolean'){floating=lower;lower=undefined;}}if(lower===undefined&&upper===undefined){lower=0;upper=1;}else{lower=toFinite(lower);if(upper===undefined){upper=lower;lower=0;}else{upper=toFinite(upper);}}if(lower>upper){var temp=lower;lower=upper;upper=temp;}if(floating||lower%1||upper%1){var rand=nativeRandom();return nativeMin(lower+rand*(upper-lower+freeParseFloat('1e-'+((rand+'').length-1))),upper);}return baseRandom(lower,upper);}/*------------------------------------------------------------------------*//**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */var camelCase=createCompounder(function(result,word,index){word=word.toLowerCase();return result+(index?capitalize(word):word);});/**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */function capitalize(string){return upperFirst(toString(string).toLowerCase());}/**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */function deburr(string){string=toString(string);return string&&string.replace(reLatin,deburrLetter).replace(reComboMark,'');}/**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */function endsWith(string,target,position){string=toString(string);target=baseToString(target);var length=string.length;position=position===undefined?length:baseClamp(toInteger(position),0,length);var end=position;position-=target.length;return position>=0&&string.slice(position,end)==target;}/**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */function escape(string){string=toString(string);return string&&reHasUnescapedHtml.test(string)?string.replace(reUnescapedHtml,escapeHtmlChar):string;}/**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */function escapeRegExp(string){string=toString(string);return string&&reHasRegExpChar.test(string)?string.replace(reRegExpChar,'\\$&'):string;}/**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */var kebabCase=createCompounder(function(result,word,index){return result+(index?'-':'')+word.toLowerCase();});/**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */var lowerCase=createCompounder(function(result,word,index){return result+(index?' ':'')+word.toLowerCase();});/**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */var lowerFirst=createCaseFirst('toLowerCase');/**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */function pad(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;if(!length||strLength>=length){return string;}var mid=(length-strLength)/2;return createPadding(nativeFloor(mid),chars)+string+createPadding(nativeCeil(mid),chars);}/**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */function padEnd(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;return length&&strLength<length?string+createPadding(length-strLength,chars):string;}/**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */function padStart(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;return length&&strLength<length?createPadding(length-strLength,chars)+string:string;}/**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */function parseInt(string,radix,guard){if(guard||radix==null){radix=0;}else if(radix){radix=+radix;}return nativeParseInt(toString(string).replace(reTrimStart,''),radix||0);}/**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */function repeat(string,n,guard){if(guard?isIterateeCall(string,n,guard):n===undefined){n=1;}else{n=toInteger(n);}return baseRepeat(toString(string),n);}/**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */function replace(){var args=arguments,string=toString(args[0]);return args.length<3?string:string.replace(args[1],args[2]);}/**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */var snakeCase=createCompounder(function(result,word,index){return result+(index?'_':'')+word.toLowerCase();});/**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */function split(string,separator,limit){if(limit&&typeof limit!='number'&&isIterateeCall(string,separator,limit)){separator=limit=undefined;}limit=limit===undefined?MAX_ARRAY_LENGTH:limit>>>0;if(!limit){return[];}string=toString(string);if(string&&(typeof separator=='string'||separator!=null&&!isRegExp(separator))){separator=baseToString(separator);if(!separator&&hasUnicode(string)){return castSlice(stringToArray(string),0,limit);}}return string.split(separator,limit);}/**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */var startCase=createCompounder(function(result,word,index){return result+(index?' ':'')+upperFirst(word);});/**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */function startsWith(string,target,position){string=toString(string);position=position==null?0:baseClamp(toInteger(position),0,string.length);target=baseToString(target);return string.slice(position,position+target.length)==target;}/**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */function template(string,options,guard){// Based on John Resig's `tmpl` implementation
// (http://ejohn.org/blog/javascript-micro-templating/)
// and Laura Doktorova's doT.js (https://github.com/olado/doT).
var settings=lodash.templateSettings;if(guard&&isIterateeCall(string,options,guard)){options=undefined;}string=toString(string);options=assignInWith({},options,settings,customDefaultsAssignIn);var imports=assignInWith({},options.imports,settings.imports,customDefaultsAssignIn),importsKeys=keys(imports),importsValues=baseValues(imports,importsKeys);var isEscaping,isEvaluating,index=0,interpolate=options.interpolate||reNoMatch,source="__p += '";// Compile the regexp to match each delimiter.
var reDelimiters=RegExp((options.escape||reNoMatch).source+'|'+interpolate.source+'|'+(interpolate===reInterpolate?reEsTemplate:reNoMatch).source+'|'+(options.evaluate||reNoMatch).source+'|$','g');// Use a sourceURL for easier debugging.
var sourceURL='//# sourceURL='+('sourceURL'in options?options.sourceURL:'lodash.templateSources['+ ++templateCounter+']')+'\n';string.replace(reDelimiters,function(match,escapeValue,interpolateValue,esTemplateValue,evaluateValue,offset){interpolateValue||(interpolateValue=esTemplateValue);// Escape characters that can't be included in string literals.
source+=string.slice(index,offset).replace(reUnescapedString,escapeStringChar);// Replace delimiters with snippets.
if(escapeValue){isEscaping=true;source+="' +\n__e("+escapeValue+") +\n'";}if(evaluateValue){isEvaluating=true;source+="';\n"+evaluateValue+";\n__p += '";}if(interpolateValue){source+="' +\n((__t = ("+interpolateValue+")) == null ? '' : __t) +\n'";}index=offset+match.length;// The JS engine embedded in Adobe products needs `match` returned in
// order to produce the correct `offset` value.
return match;});source+="';\n";// If `variable` is not specified wrap a with-statement around the generated
// code to add the data object to the top of the scope chain.
var variable=options.variable;if(!variable){source='with (obj) {\n'+source+'\n}\n';}// Cleanup code by stripping empty strings.
source=(isEvaluating?source.replace(reEmptyStringLeading,''):source).replace(reEmptyStringMiddle,'$1').replace(reEmptyStringTrailing,'$1;');// Frame code as the function body.
source='function('+(variable||'obj')+') {\n'+(variable?'':'obj || (obj = {});\n')+"var __t, __p = ''"+(isEscaping?', __e = _.escape':'')+(isEvaluating?', __j = Array.prototype.join;\n'+"function print() { __p += __j.call(arguments, '') }\n":';\n')+source+'return __p\n}';var result=attempt(function(){return Function(importsKeys,sourceURL+'return '+source).apply(undefined,importsValues);});// Provide the compiled function's source by its `toString` method or
// the `source` property as a convenience for inlining compiled templates.
result.source=source;if(isError(result)){throw result;}return result;}/**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */function toLower(value){return toString(value).toLowerCase();}/**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */function toUpper(value){return toString(value).toUpperCase();}/**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */function trim(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined)){return string.replace(reTrim,'');}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),chrSymbols=stringToArray(chars),start=charsStartIndex(strSymbols,chrSymbols),end=charsEndIndex(strSymbols,chrSymbols)+1;return castSlice(strSymbols,start,end).join('');}/**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */function trimEnd(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined)){return string.replace(reTrimEnd,'');}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),end=charsEndIndex(strSymbols,stringToArray(chars))+1;return castSlice(strSymbols,0,end).join('');}/**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */function trimStart(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined)){return string.replace(reTrimStart,'');}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),start=charsStartIndex(strSymbols,stringToArray(chars));return castSlice(strSymbols,start).join('');}/**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */function truncate(string,options){var length=DEFAULT_TRUNC_LENGTH,omission=DEFAULT_TRUNC_OMISSION;if(isObject(options)){var separator='separator'in options?options.separator:separator;length='length'in options?toInteger(options.length):length;omission='omission'in options?baseToString(options.omission):omission;}string=toString(string);var strLength=string.length;if(hasUnicode(string)){var strSymbols=stringToArray(string);strLength=strSymbols.length;}if(length>=strLength){return string;}var end=length-stringSize(omission);if(end<1){return omission;}var result=strSymbols?castSlice(strSymbols,0,end).join(''):string.slice(0,end);if(separator===undefined){return result+omission;}if(strSymbols){end+=result.length-end;}if(isRegExp(separator)){if(string.slice(end).search(separator)){var match,substring=result;if(!separator.global){separator=RegExp(separator.source,toString(reFlags.exec(separator))+'g');}separator.lastIndex=0;while(match=separator.exec(substring)){var newEnd=match.index;}result=result.slice(0,newEnd===undefined?end:newEnd);}}else if(string.indexOf(baseToString(separator),end)!=end){var index=result.lastIndexOf(separator);if(index>-1){result=result.slice(0,index);}}return result+omission;}/**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */function unescape(string){string=toString(string);return string&&reHasEscapedHtml.test(string)?string.replace(reEscapedHtml,unescapeHtmlChar):string;}/**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */var upperCase=createCompounder(function(result,word,index){return result+(index?' ':'')+word.toUpperCase();});/**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */var upperFirst=createCaseFirst('toUpperCase');/**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */function words(string,pattern,guard){string=toString(string);pattern=guard?undefined:pattern;if(pattern===undefined){return hasUnicodeWord(string)?unicodeWords(string):asciiWords(string);}return string.match(pattern)||[];}/*------------------------------------------------------------------------*//**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */var attempt=baseRest(function(func,args){try{return apply(func,undefined,args);}catch(e){return isError(e)?e:new Error(e);}});/**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */var bindAll=flatRest(function(object,methodNames){arrayEach(methodNames,function(key){key=toKey(key);baseAssignValue(object,key,bind(object[key],object));});return object;});/**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */function cond(pairs){var length=pairs==null?0:pairs.length,toIteratee=getIteratee();pairs=!length?[]:arrayMap(pairs,function(pair){if(typeof pair[1]!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return[toIteratee(pair[0]),pair[1]];});return baseRest(function(args){var index=-1;while(++index<length){var pair=pairs[index];if(apply(pair[0],this,args)){return apply(pair[1],this,args);}}});}/**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */function conforms(source){return baseConforms(baseClone(source,CLONE_DEEP_FLAG));}/**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */function constant(value){return function(){return value;};}/**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */function defaultTo(value,defaultValue){return value==null||value!==value?defaultValue:value;}/**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */var flow=createFlow();/**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */var flowRight=createFlow(true);/**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */function identity(value){return value;}/**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */function iteratee(func){return baseIteratee(typeof func=='function'?func:baseClone(func,CLONE_DEEP_FLAG));}/**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */function matches(source){return baseMatches(baseClone(source,CLONE_DEEP_FLAG));}/**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */function matchesProperty(path,srcValue){return baseMatchesProperty(path,baseClone(srcValue,CLONE_DEEP_FLAG));}/**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */var method=baseRest(function(path,args){return function(object){return baseInvoke(object,path,args);};});/**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */var methodOf=baseRest(function(object,args){return function(path){return baseInvoke(object,path,args);};});/**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */function mixin(object,source,options){var props=keys(source),methodNames=baseFunctions(source,props);if(options==null&&!(isObject(source)&&(methodNames.length||!props.length))){options=source;source=object;object=this;methodNames=baseFunctions(source,keys(source));}var chain=!(isObject(options)&&'chain'in options)||!!options.chain,isFunc=isFunction(object);arrayEach(methodNames,function(methodName){var func=source[methodName];object[methodName]=func;if(isFunc){object.prototype[methodName]=function(){var chainAll=this.__chain__;if(chain||chainAll){var result=object(this.__wrapped__),actions=result.__actions__=copyArray(this.__actions__);actions.push({'func':func,'args':arguments,'thisArg':object});result.__chain__=chainAll;return result;}return func.apply(object,arrayPush([this.value()],arguments));};}});return object;}/**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */function noConflict(){if(root._===this){root._=oldDash;}return this;}/**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */function noop(){}// No operation performed.
/**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */function nthArg(n){n=toInteger(n);return baseRest(function(args){return baseNth(args,n);});}/**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */var over=createOver(arrayMap);/**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */var overEvery=createOver(arrayEvery);/**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */var overSome=createOver(arraySome);/**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */function property(path){return isKey(path)?baseProperty(toKey(path)):basePropertyDeep(path);}/**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */function propertyOf(object){return function(path){return object==null?undefined:baseGet(object,path);};}/**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */var range=createRange();/**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */var rangeRight=createRange(true);/**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */function stubArray(){return[];}/**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */function stubFalse(){return false;}/**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */function stubObject(){return{};}/**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */function stubString(){return'';}/**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */function stubTrue(){return true;}/**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */function times(n,iteratee){n=toInteger(n);if(n<1||n>MAX_SAFE_INTEGER){return[];}var index=MAX_ARRAY_LENGTH,length=nativeMin(n,MAX_ARRAY_LENGTH);iteratee=getIteratee(iteratee);n-=MAX_ARRAY_LENGTH;var result=baseTimes(length,iteratee);while(++index<n){iteratee(index);}return result;}/**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */function toPath(value){if(isArray(value)){return arrayMap(value,toKey);}return isSymbol(value)?[value]:copyArray(stringToPath(toString(value)));}/**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */function uniqueId(prefix){var id=++idCounter;return toString(prefix)+id;}/*------------------------------------------------------------------------*//**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */var add=createMathOperation(function(augend,addend){return augend+addend;},0);/**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */var ceil=createRound('ceil');/**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */var divide=createMathOperation(function(dividend,divisor){return dividend/divisor;},1);/**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */var floor=createRound('floor');/**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */function max(array){return array&&array.length?baseExtremum(array,identity,baseGt):undefined;}/**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */function maxBy(array,iteratee){return array&&array.length?baseExtremum(array,getIteratee(iteratee,2),baseGt):undefined;}/**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */function mean(array){return baseMean(array,identity);}/**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */function meanBy(array,iteratee){return baseMean(array,getIteratee(iteratee,2));}/**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */function min(array){return array&&array.length?baseExtremum(array,identity,baseLt):undefined;}/**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */function minBy(array,iteratee){return array&&array.length?baseExtremum(array,getIteratee(iteratee,2),baseLt):undefined;}/**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */var multiply=createMathOperation(function(multiplier,multiplicand){return multiplier*multiplicand;},1);/**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */var round=createRound('round');/**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */var subtract=createMathOperation(function(minuend,subtrahend){return minuend-subtrahend;},0);/**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */function sum(array){return array&&array.length?baseSum(array,identity):0;}/**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */function sumBy(array,iteratee){return array&&array.length?baseSum(array,getIteratee(iteratee,2)):0;}/*------------------------------------------------------------------------*/// Add methods that return wrapped values in chain sequences.
lodash.after=after;lodash.ary=ary;lodash.assign=assign;lodash.assignIn=assignIn;lodash.assignInWith=assignInWith;lodash.assignWith=assignWith;lodash.at=at;lodash.before=before;lodash.bind=bind;lodash.bindAll=bindAll;lodash.bindKey=bindKey;lodash.castArray=castArray;lodash.chain=chain;lodash.chunk=chunk;lodash.compact=compact;lodash.concat=concat;lodash.cond=cond;lodash.conforms=conforms;lodash.constant=constant;lodash.countBy=countBy;lodash.create=create;lodash.curry=curry;lodash.curryRight=curryRight;lodash.debounce=debounce;lodash.defaults=defaults;lodash.defaultsDeep=defaultsDeep;lodash.defer=defer;lodash.delay=delay;lodash.difference=difference;lodash.differenceBy=differenceBy;lodash.differenceWith=differenceWith;lodash.drop=drop;lodash.dropRight=dropRight;lodash.dropRightWhile=dropRightWhile;lodash.dropWhile=dropWhile;lodash.fill=fill;lodash.filter=filter;lodash.flatMap=flatMap;lodash.flatMapDeep=flatMapDeep;lodash.flatMapDepth=flatMapDepth;lodash.flatten=flatten;lodash.flattenDeep=flattenDeep;lodash.flattenDepth=flattenDepth;lodash.flip=flip;lodash.flow=flow;lodash.flowRight=flowRight;lodash.fromPairs=fromPairs;lodash.functions=functions;lodash.functionsIn=functionsIn;lodash.groupBy=groupBy;lodash.initial=initial;lodash.intersection=intersection;lodash.intersectionBy=intersectionBy;lodash.intersectionWith=intersectionWith;lodash.invert=invert;lodash.invertBy=invertBy;lodash.invokeMap=invokeMap;lodash.iteratee=iteratee;lodash.keyBy=keyBy;lodash.keys=keys;lodash.keysIn=keysIn;lodash.map=map;lodash.mapKeys=mapKeys;lodash.mapValues=mapValues;lodash.matches=matches;lodash.matchesProperty=matchesProperty;lodash.memoize=memoize;lodash.merge=merge;lodash.mergeWith=mergeWith;lodash.method=method;lodash.methodOf=methodOf;lodash.mixin=mixin;lodash.negate=negate;lodash.nthArg=nthArg;lodash.omit=omit;lodash.omitBy=omitBy;lodash.once=once;lodash.orderBy=orderBy;lodash.over=over;lodash.overArgs=overArgs;lodash.overEvery=overEvery;lodash.overSome=overSome;lodash.partial=partial;lodash.partialRight=partialRight;lodash.partition=partition;lodash.pick=pick;lodash.pickBy=pickBy;lodash.property=property;lodash.propertyOf=propertyOf;lodash.pull=pull;lodash.pullAll=pullAll;lodash.pullAllBy=pullAllBy;lodash.pullAllWith=pullAllWith;lodash.pullAt=pullAt;lodash.range=range;lodash.rangeRight=rangeRight;lodash.rearg=rearg;lodash.reject=reject;lodash.remove=remove;lodash.rest=rest;lodash.reverse=reverse;lodash.sampleSize=sampleSize;lodash.set=set;lodash.setWith=setWith;lodash.shuffle=shuffle;lodash.slice=slice;lodash.sortBy=sortBy;lodash.sortedUniq=sortedUniq;lodash.sortedUniqBy=sortedUniqBy;lodash.split=split;lodash.spread=spread;lodash.tail=tail;lodash.take=take;lodash.takeRight=takeRight;lodash.takeRightWhile=takeRightWhile;lodash.takeWhile=takeWhile;lodash.tap=tap;lodash.throttle=throttle;lodash.thru=thru;lodash.toArray=toArray;lodash.toPairs=toPairs;lodash.toPairsIn=toPairsIn;lodash.toPath=toPath;lodash.toPlainObject=toPlainObject;lodash.transform=transform;lodash.unary=unary;lodash.union=union;lodash.unionBy=unionBy;lodash.unionWith=unionWith;lodash.uniq=uniq;lodash.uniqBy=uniqBy;lodash.uniqWith=uniqWith;lodash.unset=unset;lodash.unzip=unzip;lodash.unzipWith=unzipWith;lodash.update=update;lodash.updateWith=updateWith;lodash.values=values;lodash.valuesIn=valuesIn;lodash.without=without;lodash.words=words;lodash.wrap=wrap;lodash.xor=xor;lodash.xorBy=xorBy;lodash.xorWith=xorWith;lodash.zip=zip;lodash.zipObject=zipObject;lodash.zipObjectDeep=zipObjectDeep;lodash.zipWith=zipWith;// Add aliases.
lodash.entries=toPairs;lodash.entriesIn=toPairsIn;lodash.extend=assignIn;lodash.extendWith=assignInWith;// Add methods to `lodash.prototype`.
mixin(lodash,lodash);/*------------------------------------------------------------------------*/// Add methods that return unwrapped values in chain sequences.
lodash.add=add;lodash.attempt=attempt;lodash.camelCase=camelCase;lodash.capitalize=capitalize;lodash.ceil=ceil;lodash.clamp=clamp;lodash.clone=clone;lodash.cloneDeep=cloneDeep;lodash.cloneDeepWith=cloneDeepWith;lodash.cloneWith=cloneWith;lodash.conformsTo=conformsTo;lodash.deburr=deburr;lodash.defaultTo=defaultTo;lodash.divide=divide;lodash.endsWith=endsWith;lodash.eq=eq;lodash.escape=escape;lodash.escapeRegExp=escapeRegExp;lodash.every=every;lodash.find=find;lodash.findIndex=findIndex;lodash.findKey=findKey;lodash.findLast=findLast;lodash.findLastIndex=findLastIndex;lodash.findLastKey=findLastKey;lodash.floor=floor;lodash.forEach=forEach;lodash.forEachRight=forEachRight;lodash.forIn=forIn;lodash.forInRight=forInRight;lodash.forOwn=forOwn;lodash.forOwnRight=forOwnRight;lodash.get=get;lodash.gt=gt;lodash.gte=gte;lodash.has=has;lodash.hasIn=hasIn;lodash.head=head;lodash.identity=identity;lodash.includes=includes;lodash.indexOf=indexOf;lodash.inRange=inRange;lodash.invoke=invoke;lodash.isArguments=isArguments;lodash.isArray=isArray;lodash.isArrayBuffer=isArrayBuffer;lodash.isArrayLike=isArrayLike;lodash.isArrayLikeObject=isArrayLikeObject;lodash.isBoolean=isBoolean;lodash.isBuffer=isBuffer;lodash.isDate=isDate;lodash.isElement=isElement;lodash.isEmpty=isEmpty;lodash.isEqual=isEqual;lodash.isEqualWith=isEqualWith;lodash.isError=isError;lodash.isFinite=isFinite;lodash.isFunction=isFunction;lodash.isInteger=isInteger;lodash.isLength=isLength;lodash.isMap=isMap;lodash.isMatch=isMatch;lodash.isMatchWith=isMatchWith;lodash.isNaN=isNaN;lodash.isNative=isNative;lodash.isNil=isNil;lodash.isNull=isNull;lodash.isNumber=isNumber;lodash.isObject=isObject;lodash.isObjectLike=isObjectLike;lodash.isPlainObject=isPlainObject;lodash.isRegExp=isRegExp;lodash.isSafeInteger=isSafeInteger;lodash.isSet=isSet;lodash.isString=isString;lodash.isSymbol=isSymbol;lodash.isTypedArray=isTypedArray;lodash.isUndefined=isUndefined;lodash.isWeakMap=isWeakMap;lodash.isWeakSet=isWeakSet;lodash.join=join;lodash.kebabCase=kebabCase;lodash.last=last;lodash.lastIndexOf=lastIndexOf;lodash.lowerCase=lowerCase;lodash.lowerFirst=lowerFirst;lodash.lt=lt;lodash.lte=lte;lodash.max=max;lodash.maxBy=maxBy;lodash.mean=mean;lodash.meanBy=meanBy;lodash.min=min;lodash.minBy=minBy;lodash.stubArray=stubArray;lodash.stubFalse=stubFalse;lodash.stubObject=stubObject;lodash.stubString=stubString;lodash.stubTrue=stubTrue;lodash.multiply=multiply;lodash.nth=nth;lodash.noConflict=noConflict;lodash.noop=noop;lodash.now=now;lodash.pad=pad;lodash.padEnd=padEnd;lodash.padStart=padStart;lodash.parseInt=parseInt;lodash.random=random;lodash.reduce=reduce;lodash.reduceRight=reduceRight;lodash.repeat=repeat;lodash.replace=replace;lodash.result=result;lodash.round=round;lodash.runInContext=runInContext;lodash.sample=sample;lodash.size=size;lodash.snakeCase=snakeCase;lodash.some=some;lodash.sortedIndex=sortedIndex;lodash.sortedIndexBy=sortedIndexBy;lodash.sortedIndexOf=sortedIndexOf;lodash.sortedLastIndex=sortedLastIndex;lodash.sortedLastIndexBy=sortedLastIndexBy;lodash.sortedLastIndexOf=sortedLastIndexOf;lodash.startCase=startCase;lodash.startsWith=startsWith;lodash.subtract=subtract;lodash.sum=sum;lodash.sumBy=sumBy;lodash.template=template;lodash.times=times;lodash.toFinite=toFinite;lodash.toInteger=toInteger;lodash.toLength=toLength;lodash.toLower=toLower;lodash.toNumber=toNumber;lodash.toSafeInteger=toSafeInteger;lodash.toString=toString;lodash.toUpper=toUpper;lodash.trim=trim;lodash.trimEnd=trimEnd;lodash.trimStart=trimStart;lodash.truncate=truncate;lodash.unescape=unescape;lodash.uniqueId=uniqueId;lodash.upperCase=upperCase;lodash.upperFirst=upperFirst;// Add aliases.
lodash.each=forEach;lodash.eachRight=forEachRight;lodash.first=head;mixin(lodash,function(){var source={};baseForOwn(lodash,function(func,methodName){if(!hasOwnProperty.call(lodash.prototype,methodName)){source[methodName]=func;}});return source;}(),{'chain':false});/*------------------------------------------------------------------------*//**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */lodash.VERSION=VERSION;// Assign default placeholders.
arrayEach(['bind','bindKey','curry','curryRight','partial','partialRight'],function(methodName){lodash[methodName].placeholder=lodash;});// Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
arrayEach(['drop','take'],function(methodName,index){LazyWrapper.prototype[methodName]=function(n){n=n===undefined?1:nativeMax(toInteger(n),0);var result=this.__filtered__&&!index?new LazyWrapper(this):this.clone();if(result.__filtered__){result.__takeCount__=nativeMin(n,result.__takeCount__);}else{result.__views__.push({'size':nativeMin(n,MAX_ARRAY_LENGTH),'type':methodName+(result.__dir__<0?'Right':'')});}return result;};LazyWrapper.prototype[methodName+'Right']=function(n){return this.reverse()[methodName](n).reverse();};});// Add `LazyWrapper` methods that accept an `iteratee` value.
arrayEach(['filter','map','takeWhile'],function(methodName,index){var type=index+1,isFilter=type==LAZY_FILTER_FLAG||type==LAZY_WHILE_FLAG;LazyWrapper.prototype[methodName]=function(iteratee){var result=this.clone();result.__iteratees__.push({'iteratee':getIteratee(iteratee,3),'type':type});result.__filtered__=result.__filtered__||isFilter;return result;};});// Add `LazyWrapper` methods for `_.head` and `_.last`.
arrayEach(['head','last'],function(methodName,index){var takeName='take'+(index?'Right':'');LazyWrapper.prototype[methodName]=function(){return this[takeName](1).value()[0];};});// Add `LazyWrapper` methods for `_.initial` and `_.tail`.
arrayEach(['initial','tail'],function(methodName,index){var dropName='drop'+(index?'':'Right');LazyWrapper.prototype[methodName]=function(){return this.__filtered__?new LazyWrapper(this):this[dropName](1);};});LazyWrapper.prototype.compact=function(){return this.filter(identity);};LazyWrapper.prototype.find=function(predicate){return this.filter(predicate).head();};LazyWrapper.prototype.findLast=function(predicate){return this.reverse().find(predicate);};LazyWrapper.prototype.invokeMap=baseRest(function(path,args){if(typeof path=='function'){return new LazyWrapper(this);}return this.map(function(value){return baseInvoke(value,path,args);});});LazyWrapper.prototype.reject=function(predicate){return this.filter(negate(getIteratee(predicate)));};LazyWrapper.prototype.slice=function(start,end){start=toInteger(start);var result=this;if(result.__filtered__&&(start>0||end<0)){return new LazyWrapper(result);}if(start<0){result=result.takeRight(-start);}else if(start){result=result.drop(start);}if(end!==undefined){end=toInteger(end);result=end<0?result.dropRight(-end):result.take(end-start);}return result;};LazyWrapper.prototype.takeRightWhile=function(predicate){return this.reverse().takeWhile(predicate).reverse();};LazyWrapper.prototype.toArray=function(){return this.take(MAX_ARRAY_LENGTH);};// Add `LazyWrapper` methods to `lodash.prototype`.
baseForOwn(LazyWrapper.prototype,function(func,methodName){var checkIteratee=/^(?:filter|find|map|reject)|While$/.test(methodName),isTaker=/^(?:head|last)$/.test(methodName),lodashFunc=lodash[isTaker?'take'+(methodName=='last'?'Right':''):methodName],retUnwrapped=isTaker||/^find/.test(methodName);if(!lodashFunc){return;}lodash.prototype[methodName]=function(){var value=this.__wrapped__,args=isTaker?[1]:arguments,isLazy=value instanceof LazyWrapper,iteratee=args[0],useLazy=isLazy||isArray(value);var interceptor=function interceptor(value){var result=lodashFunc.apply(lodash,arrayPush([value],args));return isTaker&&chainAll?result[0]:result;};if(useLazy&&checkIteratee&&typeof iteratee=='function'&&iteratee.length!=1){// Avoid lazy use if the iteratee has a "length" value other than `1`.
isLazy=useLazy=false;}var chainAll=this.__chain__,isHybrid=!!this.__actions__.length,isUnwrapped=retUnwrapped&&!chainAll,onlyLazy=isLazy&&!isHybrid;if(!retUnwrapped&&useLazy){value=onlyLazy?value:new LazyWrapper(this);var result=func.apply(value,args);result.__actions__.push({'func':thru,'args':[interceptor],'thisArg':undefined});return new LodashWrapper(result,chainAll);}if(isUnwrapped&&onlyLazy){return func.apply(this,args);}result=this.thru(interceptor);return isUnwrapped?isTaker?result.value()[0]:result.value():result;};});// Add `Array` methods to `lodash.prototype`.
arrayEach(['pop','push','shift','sort','splice','unshift'],function(methodName){var func=arrayProto[methodName],chainName=/^(?:push|sort|unshift)$/.test(methodName)?'tap':'thru',retUnwrapped=/^(?:pop|shift)$/.test(methodName);lodash.prototype[methodName]=function(){var args=arguments;if(retUnwrapped&&!this.__chain__){var value=this.value();return func.apply(isArray(value)?value:[],args);}return this[chainName](function(value){return func.apply(isArray(value)?value:[],args);});};});// Map minified method names to their real names.
baseForOwn(LazyWrapper.prototype,function(func,methodName){var lodashFunc=lodash[methodName];if(lodashFunc){var key=lodashFunc.name+'',names=realNames[key]||(realNames[key]=[]);names.push({'name':methodName,'func':lodashFunc});}});realNames[createHybrid(undefined,WRAP_BIND_KEY_FLAG).name]=[{'name':'wrapper','func':undefined}];// Add methods to `LazyWrapper`.
LazyWrapper.prototype.clone=lazyClone;LazyWrapper.prototype.reverse=lazyReverse;LazyWrapper.prototype.value=lazyValue;// Add chain sequence methods to the `lodash` wrapper.
lodash.prototype.at=wrapperAt;lodash.prototype.chain=wrapperChain;lodash.prototype.commit=wrapperCommit;lodash.prototype.next=wrapperNext;lodash.prototype.plant=wrapperPlant;lodash.prototype.reverse=wrapperReverse;lodash.prototype.toJSON=lodash.prototype.valueOf=lodash.prototype.value=wrapperValue;// Add lazy aliases.
lodash.prototype.first=lodash.prototype.head;if(symIterator){lodash.prototype[symIterator]=wrapperToIterator;}return lodash;};/*--------------------------------------------------------------------------*/// Export lodash.
var _=runInContext();// Some AMD build optimizers, like r.js, check for condition patterns like:
if("function"=='function'&&_typeof(__webpack_require__(3))=='object'&&__webpack_require__(3)){// Expose Lodash on the global object to prevent errors when Lodash is
// loaded by a script tag in the presence of an AMD loader.
// See http://requirejs.org/docs/errors.html#mismatch for more details.
// Use `_.noConflict` to remove Lodash from the global object.
root._=_;// Define as an anonymous module so, through path mapping, it can be
// referenced as the "underscore" module.
!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){return _;}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}// Check for `exports` after `define` in case a build optimizer adds it.
else if(freeModule){// Export for Node.js.
(freeModule.exports=_)._=_;// Export for CommonJS support.
freeExports._=_;}else{// Export to the global object.
root._=_;}}).call(undefined);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(15)(module)))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function (module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function () {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function get() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function get() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};

/***/ })
/******/ ]);
//# sourceMappingURL=latex-parser.bundle.js.map